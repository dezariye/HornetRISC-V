
paranoia.elf:     file format elf32-littleriscv


Disassembly of section .init:

00010000 <_start>:
.section .init, "ax"
.global _start
_start:
    .cfi_startproc
    la sp, __stack_top
   10000:	00008117          	auipc	sp,0x8
   10004:	ffc10113          	addi	sp,sp,-4 # 17ffc <__stack_top>
    add s0, sp, zero
   10008:	00010433          	add	s0,sp,zero
	#bitmask with bit 13 set to 1
	li t0, 0x2000
   1000c:	000022b7          	lui	t0,0x2
	#load value to mstatus CSR to set mstatus.FS to 1
	csrrs x0, mstatus, t0
   10010:	3002a073          	csrs	mstatus,t0
    #Return address is stored at x1, which is 0x10000 in this case
    li x1, 0x10000
   10014:	000100b7          	lui	ra,0x10
    jal zero, main
   10018:	4a00006f          	j	104b8 <main>

Disassembly of section .text:

0001001c <exit>:
int Break, Done, NotMonot, Monot, Anomaly, IEEE,
    SqRWrng;
int UfNGrad;

void exit(int code){
  while(1); //Infinite loop 
   1001c:	0000006f          	j	1001c <exit>

00010020 <write_char>:
  *address = c;
   10020:	000087b7          	lui	a5,0x8
   10024:	00a78823          	sb	a0,16(a5) # 8010 <_start-0x7ff0>
}
   10028:	00008067          	ret

0001002c <write_string>:
void write_string(const char *str) {
   1002c:	ff010113          	addi	sp,sp,-16
   10030:	00112623          	sw	ra,12(sp)
   10034:	00812423          	sw	s0,8(sp)
   10038:	00050413          	mv	s0,a0
  while (*str) {
   1003c:	00c0006f          	j	10048 <write_string+0x1c>
    write_char(*str++);
   10040:	00140413          	addi	s0,s0,1
   10044:	fddff0ef          	jal	10020 <write_char>
  while (*str) {
   10048:	00044503          	lbu	a0,0(s0)
   1004c:	fe051ae3          	bnez	a0,10040 <write_string+0x14>
}
   10050:	00c12083          	lw	ra,12(sp)
   10054:	00812403          	lw	s0,8(sp)
   10058:	01010113          	addi	sp,sp,16
   1005c:	00008067          	ret

00010060 <sigfpe>:
/* 
  Purpose:

    SIGFPE is the floating point exception receiver.
*/
{
   10060:	ff010113          	addi	sp,sp,-16
   10064:	00112623          	sw	ra,12(sp)
  fpecount++;
   10068:	00017737          	lui	a4,0x17
   1006c:	0c472783          	lw	a5,196(a4) # 170c4 <fpecount>
   10070:	00178793          	addi	a5,a5,1
   10074:	0cf72223          	sw	a5,196(a4)
  write_string("\n* * * FLOATING-POINT ERROR %d * * *\n");
   10078:	00014537          	lui	a0,0x14
   1007c:	36450513          	addi	a0,a0,868 # 14364 <longjmp+0x74>
   10080:	fadff0ef          	jal	1002c <write_string>
  fflush(stdout);
   10084:	00014537          	lui	a0,0x14
   10088:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   1008c:	fa1ff0ef          	jal	1002c <write_string>
  if (sigsave)
   10090:	000177b7          	lui	a5,0x17
   10094:	1ac7a783          	lw	a5,428(a5) # 171ac <sigsave>
   10098:	00078e63          	beqz	a5,100b4 <sigfpe+0x54>
  {
#ifndef NOSIGNAL
    signal(SIGFPE, sigsave);
#endif
    sigsave = 0;
   1009c:	000177b7          	lui	a5,0x17
   100a0:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
    longjmp(ovfl_buf, 1);
   100a4:	00100593          	li	a1,1
   100a8:	00017537          	lui	a0,0x17
   100ac:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   100b0:	240040ef          	jal	142f0 <longjmp>
  }
  exit(1);
   100b4:	00100513          	li	a0,1
   100b8:	f65ff0ef          	jal	1001c <exit>

000100bc <Sign>:
  Purpose:

    SIGN returns the sign of a floating point value.
*/
{ 
  return X >= 0.f ? 1.0f : -1.0f; 
   100bc:	f00007d3          	fmv.w.x	fa5,zero
   100c0:	a0a787d3          	fle.s	a5,fa5,fa0
   100c4:	00078863          	beqz	a5,100d4 <Sign+0x18>
   100c8:	000177b7          	lui	a5,0x17
   100cc:	0007a507          	flw	fa0,0(a5) # 17000 <__SDATA_BEGIN__>
   100d0:	00008067          	ret
   100d4:	000177b7          	lui	a5,0x17
   100d8:	0047a507          	flw	fa0,4(a5) # 17004 <__SDATA_BEGIN__+0x4>
}
   100dc:	00008067          	ret

000100e0 <Pause>:
/*
  Purpose:

    PAUSE pauses program execution until the user hits RETURN.
*/
{
   100e0:	fe010113          	addi	sp,sp,-32
   100e4:	00112e23          	sw	ra,28(sp)
#ifndef NOPAUSE
  char ch[8];

  //write_string("\nTo continue, press RETURN");
  fflush(stdout);
   100e8:	00014537          	lui	a0,0x14
   100ec:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   100f0:	f3dff0ef          	jal	1002c <write_string>
  ch[0] = ' ';
   100f4:	02000793          	li	a5,32
   100f8:	00f10423          	sb	a5,8(sp)
#endif
//  //write_string("\nDiagnosis resumes after milestone Number %d", Milestone);
//  //write_string("          Page: %d\n\n", PageNo);
  ++Milestone;
   100fc:	00017737          	lui	a4,0x17
   10100:	0c072783          	lw	a5,192(a4) # 170c0 <Milestone>
   10104:	00178793          	addi	a5,a5,1
   10108:	0cf72023          	sw	a5,192(a4)
  ++PageNo;
   1010c:	00017737          	lui	a4,0x17
   10110:	0bc72783          	lw	a5,188(a4) # 170bc <PageNo>
   10114:	00178793          	addi	a5,a5,1
   10118:	0af72e23          	sw	a5,188(a4)

  return;
}
   1011c:	01c12083          	lw	ra,28(sp)
   10120:	02010113          	addi	sp,sp,32
   10124:	00008067          	ret

00010128 <BadCond>:
/*
  Purpose:

    BADCOND tracks and prints the various levels of error.
*/
{
   10128:	ff010113          	addi	sp,sp,-16
   1012c:	00112623          	sw	ra,12(sp)
   10130:	00812423          	sw	s0,8(sp)
  static char *msg[] = { "FAILURE", "SERIOUS DEFECT", "DEFECT", "FLAW" };

  ErrCnt [K] = ErrCnt [K] + 1;
   10134:	000177b7          	lui	a5,0x17
   10138:	00251413          	slli	s0,a0,0x2
   1013c:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   10140:	008787b3          	add	a5,a5,s0
   10144:	0007a703          	lw	a4,0(a5)
   10148:	00170713          	addi	a4,a4,1
   1014c:	00e7a023          	sw	a4,0(a5)

  write_string(T);
   10150:	00058513          	mv	a0,a1
   10154:	ed9ff0ef          	jal	1002c <write_string>
  write_string("Error Level: ");
   10158:	00014537          	lui	a0,0x14
   1015c:	38c50513          	addi	a0,a0,908 # 1438c <longjmp+0x9c>
   10160:	ecdff0ef          	jal	1002c <write_string>
  write_string(msg[K]);
   10164:	000167b7          	lui	a5,0x16
   10168:	8f878793          	addi	a5,a5,-1800 # 158f8 <msg.0>
   1016c:	008787b3          	add	a5,a5,s0
   10170:	0007a503          	lw	a0,0(a5)
   10174:	eb9ff0ef          	jal	1002c <write_string>

  return;
}
   10178:	00c12083          	lw	ra,12(sp)
   1017c:	00812403          	lw	s0,8(sp)
   10180:	01010113          	addi	sp,sp,16
   10184:	00008067          	ret

00010188 <TstCond>:
  if (! Valid) 
   10188:	00058463          	beqz	a1,10190 <TstCond+0x8>
   1018c:	00008067          	ret
{ 
   10190:	ff010113          	addi	sp,sp,-16
   10194:	00112623          	sw	ra,12(sp)
    BadCond ( K, T ); 
   10198:	00060593          	mv	a1,a2
   1019c:	f8dff0ef          	jal	10128 <BadCond>
    write_string ( ".\n" ); 
   101a0:	00014537          	lui	a0,0x14
   101a4:	67450513          	addi	a0,a0,1652 # 14674 <longjmp+0x384>
   101a8:	e85ff0ef          	jal	1002c <write_string>
}
   101ac:	00c12083          	lw	ra,12(sp)
   101b0:	01010113          	addi	sp,sp,16
   101b4:	00008067          	ret

000101b8 <Random>:
    Random computes
     X = (Random1 + Random9)^5
     Random1 = X - FLOOR(X) + 0.000005 * X;
   and returns the new value of Random1
*/
{
   101b8:	fe010113          	addi	sp,sp,-32
   101bc:	00112e23          	sw	ra,28(sp)
   101c0:	00812c23          	sw	s0,24(sp)
   101c4:	00812627          	fsw	fs0,12(sp)
  FLOAT X, Y;
  
  X = Random1 + Random9;
   101c8:	00017437          	lui	s0,0x17
   101cc:	0ec42407          	flw	fs0,236(s0) # 170ec <Random1>
   101d0:	000177b7          	lui	a5,0x17
   101d4:	1247a787          	flw	fa5,292(a5) # 17124 <Random9>
   101d8:	00f47453          	fadd.s	fs0,fs0,fa5
  Y = X * X;
   101dc:	108477d3          	fmul.s	fa5,fs0,fs0
  Y = Y * Y;
   101e0:	10f7f7d3          	fmul.s	fa5,fa5,fa5
  X = X * Y;
   101e4:	10f47453          	fmul.s	fs0,fs0,fa5
  Y = X - FLOOR(X);
   101e8:	20840553          	fmv.s	fa0,fs0
   101ec:	7c9030ef          	jal	141b4 <floorf>
   101f0:	08a47553          	fsub.s	fa0,fs0,fa0
  Random1 = Y + X * 0.000005f;
   101f4:	000177b7          	lui	a5,0x17
   101f8:	0087a787          	flw	fa5,8(a5) # 17008 <__SDATA_BEGIN__+0x8>
   101fc:	10f47453          	fmul.s	fs0,fs0,fa5
   10200:	00a47553          	fadd.s	fa0,fs0,fa0
   10204:	0ea42627          	fsw	fa0,236(s0)

  return ( Random1 );
}
   10208:	01c12083          	lw	ra,28(sp)
   1020c:	01812403          	lw	s0,24(sp)
   10210:	00c12407          	flw	fs0,12(sp)
   10214:	02010113          	addi	sp,sp,32
   10218:	00008067          	ret

0001021c <SqXMinX>:
    SQXMINX ???.
*/
{
  FLOAT XA, XB;
  
  XB = X * BInvrse;
   1021c:	000177b7          	lui	a5,0x17
   10220:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   10224:	000177b7          	lui	a5,0x17
   10228:	1a07a707          	flw	fa4,416(a5) # 171a0 <BInvrse>
   1022c:	10e7f753          	fmul.s	fa4,fa5,fa4
  XA = X - XB;
   10230:	08e7f6d3          	fsub.s	fa3,fa5,fa4
  SqEr = ((SQRT(X * X) - XB) - XA) / OneUlp;
   10234:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   10238:	5807f7d3          	fsqrt.s	fa5,fa5
   1023c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10240:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   10244:	000177b7          	lui	a5,0x17
   10248:	1147a707          	flw	fa4,276(a5) # 17114 <OneUlp>
   1024c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   10250:	000177b7          	lui	a5,0x17
   10254:	16f7a227          	fsw	fa5,356(a5) # 17164 <SqEr>
  if (SqEr != Zero)
   10258:	000177b7          	lui	a5,0x17
   1025c:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   10260:	a0e7a7d3          	feq.s	a5,fa5,fa4
   10264:	06079663          	bnez	a5,102d0 <SqXMinX+0xb4>
{
   10268:	ff010113          	addi	sp,sp,-16
   1026c:	00112623          	sw	ra,12(sp)
  {
    if (SqEr < MinSqEr) MinSqEr = SqEr;
   10270:	000177b7          	lui	a5,0x17
   10274:	1687a707          	flw	fa4,360(a5) # 17168 <MinSqEr>
   10278:	a0e797d3          	flt.s	a5,fa5,fa4
   1027c:	00078663          	beqz	a5,10288 <SqXMinX+0x6c>
   10280:	000177b7          	lui	a5,0x17
   10284:	16f7a427          	fsw	fa5,360(a5) # 17168 <MinSqEr>
    if (SqEr > MaxSqEr) MaxSqEr = SqEr;
   10288:	000177b7          	lui	a5,0x17
   1028c:	1607a707          	flw	fa4,352(a5) # 17160 <MaxSqEr>
   10290:	a0f717d3          	flt.s	a5,fa4,fa5
   10294:	00078663          	beqz	a5,102a0 <SqXMinX+0x84>
   10298:	000177b7          	lui	a5,0x17
   1029c:	16f7a027          	fsw	fa5,352(a5) # 17160 <MaxSqEr>
    J = J + 1.0f;
   102a0:	000177b7          	lui	a5,0x17
   102a4:	13c7a787          	flw	fa5,316(a5) # 1713c <J>
   102a8:	00017737          	lui	a4,0x17
   102ac:	00072707          	flw	fa4,0(a4) # 17000 <__SDATA_BEGIN__>
   102b0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   102b4:	12f7ae27          	fsw	fa5,316(a5)
    BadCond(ErrKind, "\n");
   102b8:	000145b7          	lui	a1,0x14
   102bc:	3d058593          	addi	a1,a1,976 # 143d0 <longjmp+0xe0>
   102c0:	e69ff0ef          	jal	10128 <BadCond>
//    //write_string("sqrt( %.17e) - %.17e  = %.17e\n", X * X, X, OneUlp * SqEr);
    //write_string("\tinstead of correct value 0 .\n");
  }
  return;
}
   102c4:	00c12083          	lw	ra,12(sp)
   102c8:	01010113          	addi	sp,sp,16
   102cc:	00008067          	ret
   102d0:	00008067          	ret

000102d4 <TstPtUf>:
  Purpose:

    TstPtUf???
*/
{
  N = 0;
   102d4:	000177b7          	lui	a5,0x17
   102d8:	0a07ac23          	sw	zero,184(a5) # 170b8 <N>
  if ( Z != Zero )
   102dc:	000177b7          	lui	a5,0x17
   102e0:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   102e4:	000177b7          	lui	a5,0x17
   102e8:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   102ec:	a0f727d3          	feq.s	a5,fa4,fa5
   102f0:	18079a63          	bnez	a5,10484 <TstPtUf+0x1b0>
{
   102f4:	ff010113          	addi	sp,sp,-16
   102f8:	00112623          	sw	ra,12(sp)
  {
    //write_string("Since comparison denies Z = 0, evaluating ");
    //write_string("(Z + Z) / Z should be safe.\n");
    sigsave = sigfpe;
   102fc:	00017737          	lui	a4,0x17
   10300:	000107b7          	lui	a5,0x10
   10304:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   10308:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
    if (setjmp(ovfl_buf)) goto very_serious;
   1030c:	00017537          	lui	a0,0x17
   10310:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   10314:	76d030ef          	jal	14280 <setjmp>
   10318:	06051063          	bnez	a0,10378 <TstPtUf+0xa4>
    Q9 = (Z + Z) / Z;
   1031c:	000177b7          	lui	a5,0x17
   10320:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   10324:	00e777d3          	fadd.s	fa5,fa4,fa4
   10328:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   1032c:	000177b7          	lui	a5,0x17
   10330:	12f7a627          	fsw	fa5,300(a5) # 1712c <Q9>
//    //write_string("What the machine gets for (Z + Z) / Z is  %.17e .\n",
//      Q9);
    if (FABS(Q9 - Two) < Radix * U2)
   10334:	000177b7          	lui	a5,0x17
   10338:	07c7a607          	flw	fa2,124(a5) # 1707c <Two>
   1033c:	08c7f6d3          	fsub.s	fa3,fa5,fa2
   10340:	20d6a6d3          	fabs.s	fa3,fa3
   10344:	000177b7          	lui	a5,0x17
   10348:	1a87a707          	flw	fa4,424(a5) # 171a8 <Radix>
   1034c:	000177b7          	lui	a5,0x17
   10350:	1087a587          	flw	fa1,264(a5) # 17108 <U2>
   10354:	10b77753          	fmul.s	fa4,fa4,fa1
   10358:	a0e697d3          	flt.s	a5,fa3,fa4
   1035c:	02079e63          	bnez	a5,10398 <TstPtUf+0xc4>
      //write_string("This is O.K., provided Over/Underflow");
      //write_string(" has NOT just been signaled.\n");
    }
    else
    {
      if ((Q9 < One) || (Q9 > Two))
   10360:	000177b7          	lui	a5,0x17
   10364:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   10368:	a0e797d3          	flt.s	a5,fa5,fa4
   1036c:	00079663          	bnez	a5,10378 <TstPtUf+0xa4>
   10370:	a0f617d3          	flt.s	a5,fa2,fa5
   10374:	08078263          	beqz	a5,103f8 <TstPtUf+0x124>
      {
very_serious:
        N = 1;
   10378:	000177b7          	lui	a5,0x17
   1037c:	00100713          	li	a4,1
   10380:	0ae7ac23          	sw	a4,184(a5) # 170b8 <N>
        ErrCnt [Serious] = ErrCnt [Serious] + 1;
   10384:	000177b7          	lui	a5,0x17
   10388:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   1038c:	0047a703          	lw	a4,4(a5)
   10390:	00170713          	addi	a4,a4,1
   10394:	00e7a223          	sw	a4,4(a5)
        N = 1;
        ErrCnt [Defect] = ErrCnt [Defect] + 1;
        //write_string("This is a DEFECT!\n");
      }
    }
    sigsave = 0;
   10398:	000177b7          	lui	a5,0x17
   1039c:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
    V9 = Z * One;
   103a0:	000177b7          	lui	a5,0x17
   103a4:	0d87a687          	flw	fa3,216(a5) # 170d8 <Z>
   103a8:	000177b7          	lui	a5,0x17
   103ac:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   103b0:	10f6f753          	fmul.s	fa4,fa3,fa5
   103b4:	000177b7          	lui	a5,0x17
   103b8:	0ee7ae27          	fsw	fa4,252(a5) # 170fc <V9>
    Random1 = V9;
   103bc:	00017737          	lui	a4,0x17
   103c0:	0ee72627          	fsw	fa4,236(a4) # 170ec <Random1>
    V9 = One * Z;
    Random2 = V9;
   103c4:	00017737          	lui	a4,0x17
   103c8:	0ce72e27          	fsw	fa4,220(a4) # 170dc <Random2>
    V9 = Z / One;
   103cc:	18f6f7d3          	fdiv.s	fa5,fa3,fa5
   103d0:	0ef7ae27          	fsw	fa5,252(a5)
    if ((Z == Random1) && (Z == Random2) && (Z == V9))
   103d4:	a0e6a7d3          	feq.s	a5,fa3,fa4
   103d8:	04078263          	beqz	a5,1041c <TstPtUf+0x148>
   103dc:	a0f6a7d3          	feq.s	a5,fa3,fa5
   103e0:	02078e63          	beqz	a5,1041c <TstPtUf+0x148>
    {
      if (N > 0) Pause();
   103e4:	000177b7          	lui	a5,0x17
   103e8:	0b87a783          	lw	a5,184(a5) # 170b8 <N>
   103ec:	08f05663          	blez	a5,10478 <TstPtUf+0x1a4>
   103f0:	cf1ff0ef          	jal	100e0 <Pause>
   103f4:	0840006f          	j	10478 <TstPtUf+0x1a4>
        N = 1;
   103f8:	000177b7          	lui	a5,0x17
   103fc:	00100713          	li	a4,1
   10400:	0ae7ac23          	sw	a4,184(a5) # 170b8 <N>
        ErrCnt [Defect] = ErrCnt [Defect] + 1;
   10404:	000177b7          	lui	a5,0x17
   10408:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   1040c:	0087a703          	lw	a4,8(a5)
   10410:	00170713          	addi	a4,a4,1
   10414:	00e7a423          	sw	a4,8(a5)
   10418:	f81ff06f          	j	10398 <TstPtUf+0xc4>
      }
    else {
      N = 1;
   1041c:	000177b7          	lui	a5,0x17
   10420:	00100713          	li	a4,1
   10424:	0ae7ac23          	sw	a4,184(a5) # 170b8 <N>
      BadCond(Defect, "What prints as Z = ");
   10428:	000145b7          	lui	a1,0x14
   1042c:	39c58593          	addi	a1,a1,924 # 1439c <longjmp+0xac>
   10430:	00200513          	li	a0,2
   10434:	cf5ff0ef          	jal	10128 <BadCond>
//      //write_string("%.17e\n\tcompares different from  ", Z);
//      if (Z != Random1) //write_string("Z * 1 = %.17e ", Random1);

      if (! ( (Z == Random2) || (Random2 == Random1) ) )
   10438:	000177b7          	lui	a5,0x17
   1043c:	0dc7a707          	flw	fa4,220(a5) # 170dc <Random2>
      if (! (Z == V9)) 
      {
        //write_string("Z / 1 = %.17e\n");
      }

      if (Random2 != Random1)
   10440:	000177b7          	lui	a5,0x17
   10444:	0ec7a787          	flw	fa5,236(a5) # 170ec <Random1>
   10448:	a0f727d3          	feq.s	a5,fa4,fa5
   1044c:	02079463          	bnez	a5,10474 <TstPtUf+0x1a0>
      {
        ErrCnt [Defect] = ErrCnt [Defect] + 1;
   10450:	000177b7          	lui	a5,0x17
   10454:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   10458:	0087a703          	lw	a4,8(a5)
   1045c:	00170713          	addi	a4,a4,1
   10460:	00e7a423          	sw	a4,8(a5)
        BadCond(Defect, "Multiplication does not commute!\n");
   10464:	000145b7          	lui	a1,0x14
   10468:	3b058593          	addi	a1,a1,944 # 143b0 <longjmp+0xc0>
   1046c:	00200513          	li	a0,2
   10470:	cb9ff0ef          	jal	10128 <BadCond>
//        //write_string("\tComparison alleges that 1 * Z = %.17e\n",
//          Random2);
//        //write_string("\tdiffers from Z * 1 = %.17e\n", Random1);
      }
      Pause();
   10474:	c6dff0ef          	jal	100e0 <Pause>
    }
  }
  return;
}
   10478:	00c12083          	lw	ra,12(sp)
   1047c:	01010113          	addi	sp,sp,16
   10480:	00008067          	ret
   10484:	00008067          	ret

00010488 <notify>:
/*
  Purpose:

    NOTIFY warns if a test appears to be inconsistent.
*/
{
   10488:	ff010113          	addi	sp,sp,-16
   1048c:	00112623          	sw	ra,12(sp)
  write_string(s);
   10490:	b9dff0ef          	jal	1002c <write_string>
  write_string(" test appears to be inconsistent...\n");
   10494:	00014537          	lui	a0,0x14
   10498:	3d450513          	addi	a0,a0,980 # 143d4 <longjmp+0xe4>
   1049c:	b91ff0ef          	jal	1002c <write_string>
  write_string("   PLEASE NOTIFY KARPINKSI!\n");
   104a0:	00014537          	lui	a0,0x14
   104a4:	3fc50513          	addi	a0,a0,1020 # 143fc <longjmp+0x10c>
   104a8:	b85ff0ef          	jal	1002c <write_string>

  return;
}
   104ac:	00c12083          	lw	ra,12(sp)
   104b0:	01010113          	addi	sp,sp,16
   104b4:	00008067          	ret

000104b8 <main>:
{
   104b8:	fc010113          	addi	sp,sp,-64
   104bc:	02112e23          	sw	ra,60(sp)
   104c0:	02812c23          	sw	s0,56(sp)
   104c4:	02912a23          	sw	s1,52(sp)
   104c8:	03212823          	sw	s2,48(sp)
   104cc:	03312623          	sw	s3,44(sp)
   104d0:	03412423          	sw	s4,40(sp)
   104d4:	00812e27          	fsw	fs0,28(sp)
   104d8:	00912c27          	fsw	fs1,24(sp)
   104dc:	01212a27          	fsw	fs2,20(sp)
   104e0:	01312827          	fsw	fs3,16(sp)
   104e4:	01412627          	fsw	fs4,12(sp)
   104e8:	01512427          	fsw	fs5,8(sp)
   104ec:	01612227          	fsw	fs6,4(sp)
   104f0:	01712027          	fsw	fs7,0(sp)
  Zero = 0;
   104f4:	00017437          	lui	s0,0x17
   104f8:	18042c23          	sw	zero,408(s0) # 17198 <Zero>
  One = 1;
   104fc:	000174b7          	lui	s1,0x17
   10500:	000177b7          	lui	a5,0x17
   10504:	0007a787          	flw	fa5,0(a5) # 17000 <__SDATA_BEGIN__>
   10508:	08f4a027          	fsw	fa5,128(s1) # 17080 <One>
  Two = One + One;
   1050c:	00017937          	lui	s2,0x17
   10510:	000177b7          	lui	a5,0x17
   10514:	00c7a787          	flw	fa5,12(a5) # 1700c <__SDATA_BEGIN__+0xc>
   10518:	06f92e27          	fsw	fa5,124(s2) # 1707c <Two>
  Three = Two + One;
   1051c:	00017737          	lui	a4,0x17
   10520:	000177b7          	lui	a5,0x17
   10524:	01072787          	flw	fa5,16(a4) # 17010 <__SDATA_BEGIN__+0x10>
   10528:	06f7ac27          	fsw	fa5,120(a5) # 17078 <Three>
  Four = Three + One;
   1052c:	00017737          	lui	a4,0x17
   10530:	000177b7          	lui	a5,0x17
   10534:	01472787          	flw	fa5,20(a4) # 17014 <__SDATA_BEGIN__+0x14>
   10538:	06f7aa27          	fsw	fa5,116(a5) # 17074 <Four>
  Five = Four + One;
   1053c:	00017737          	lui	a4,0x17
   10540:	000177b7          	lui	a5,0x17
   10544:	01872787          	flw	fa5,24(a4) # 17018 <__SDATA_BEGIN__+0x18>
   10548:	06f7a827          	fsw	fa5,112(a5) # 17070 <Five>
  Eight = Four + Four;
   1054c:	00017737          	lui	a4,0x17
   10550:	000177b7          	lui	a5,0x17
   10554:	01c72787          	flw	fa5,28(a4) # 1701c <__SDATA_BEGIN__+0x1c>
   10558:	06f7a627          	fsw	fa5,108(a5) # 1706c <Eight>
  Nine = Three * Three;
   1055c:	00017737          	lui	a4,0x17
   10560:	000177b7          	lui	a5,0x17
   10564:	02072787          	flw	fa5,32(a4) # 17020 <__SDATA_BEGIN__+0x20>
   10568:	06f7a427          	fsw	fa5,104(a5) # 17068 <Nine>
  TwentySeven = Nine * Three;
   1056c:	00017737          	lui	a4,0x17
   10570:	000177b7          	lui	a5,0x17
   10574:	02472787          	flw	fa5,36(a4) # 17024 <__SDATA_BEGIN__+0x24>
   10578:	06f7a227          	fsw	fa5,100(a5) # 17064 <TwentySeven>
  ThirtyTwo = Four * Eight;
   1057c:	00017737          	lui	a4,0x17
   10580:	000177b7          	lui	a5,0x17
   10584:	02872787          	flw	fa5,40(a4) # 17028 <__SDATA_BEGIN__+0x28>
   10588:	06f7a027          	fsw	fa5,96(a5) # 17060 <ThirtyTwo>
  TwoForty = Four * Five * Three * Four;
   1058c:	00017737          	lui	a4,0x17
   10590:	000177b7          	lui	a5,0x17
   10594:	02c72787          	flw	fa5,44(a4) # 1702c <__SDATA_BEGIN__+0x2c>
   10598:	04f7ae27          	fsw	fa5,92(a5) # 1705c <TwoForty>
  MinusOne = -One;
   1059c:	00017737          	lui	a4,0x17
   105a0:	000177b7          	lui	a5,0x17
   105a4:	00472787          	flw	fa5,4(a4) # 17004 <__SDATA_BEGIN__+0x4>
   105a8:	04f7ac27          	fsw	fa5,88(a5) # 17058 <MinusOne>
  Half = One / Two;
   105ac:	00017737          	lui	a4,0x17
   105b0:	000177b7          	lui	a5,0x17
   105b4:	03072787          	flw	fa5,48(a4) # 17030 <__SDATA_BEGIN__+0x30>
   105b8:	08f7a227          	fsw	fa5,132(a5) # 17084 <Half>
  OneAndHalf = One + Half;
   105bc:	00017737          	lui	a4,0x17
   105c0:	000177b7          	lui	a5,0x17
   105c4:	03472787          	flw	fa5,52(a4) # 17034 <__SDATA_BEGIN__+0x34>
   105c8:	04f7aa27          	fsw	fa5,84(a5) # 17054 <OneAndHalf>
  ErrCnt[Failure] = 0;
   105cc:	000177b7          	lui	a5,0x17
   105d0:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   105d4:	0007a023          	sw	zero,0(a5)
  ErrCnt[Serious] = 0;
   105d8:	0007a223          	sw	zero,4(a5)
  ErrCnt[Defect] = 0;
   105dc:	0007a423          	sw	zero,8(a5)
  ErrCnt[Flaw] = 0;
   105e0:	0007a623          	sw	zero,12(a5)
  PageNo = 1;
   105e4:	000177b7          	lui	a5,0x17
   105e8:	00100713          	li	a4,1
   105ec:	0ae7ae23          	sw	a4,188(a5) # 170bc <PageNo>
  Milestone = 0;
   105f0:	000177b7          	lui	a5,0x17
   105f4:	0c07a023          	sw	zero,192(a5) # 170c0 <Milestone>
  Milestone = 7;
   105f8:	00700713          	li	a4,7
   105fc:	0ce7a023          	sw	a4,192(a5)
  write_string ( "Program is now RUNNING tests on small integers:\n" );
   10600:	00014537          	lui	a0,0x14
   10604:	41c50513          	addi	a0,a0,1052 # 1441c <longjmp+0x12c>
   10608:	a25ff0ef          	jal	1002c <write_string>
  TstCond ( Failure, (Zero + Zero == Zero), "0+0 != 0" );
   1060c:	19842787          	flw	fa5,408(s0)
   10610:	00f7f753          	fadd.s	fa4,fa5,fa5
   10614:	00014637          	lui	a2,0x14
   10618:	45060613          	addi	a2,a2,1104 # 14450 <longjmp+0x160>
   1061c:	a0e7a5d3          	feq.s	a1,fa5,fa4
   10620:	00000513          	li	a0,0
   10624:	b65ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (One - One == Zero),   "1-1 != 0" );
   10628:	0804a787          	flw	fa5,128(s1)
   1062c:	08f7f7d3          	fsub.s	fa5,fa5,fa5
   10630:	19842707          	flw	fa4,408(s0)
   10634:	00014637          	lui	a2,0x14
   10638:	45c60613          	addi	a2,a2,1116 # 1445c <longjmp+0x16c>
   1063c:	a0f725d3          	feq.s	a1,fa4,fa5
   10640:	00000513          	li	a0,0
   10644:	b45ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (One > Zero),          "1 <= 0"   );
   10648:	0804a707          	flw	fa4,128(s1)
   1064c:	19842787          	flw	fa5,408(s0)
   10650:	00014637          	lui	a2,0x14
   10654:	46860613          	addi	a2,a2,1128 # 14468 <longjmp+0x178>
   10658:	a0e795d3          	flt.s	a1,fa5,fa4
   1065c:	00000513          	li	a0,0
   10660:	b29ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (One + One == Two),    "1+1 != 2" );
   10664:	0804a787          	flw	fa5,128(s1)
   10668:	00f7f7d3          	fadd.s	fa5,fa5,fa5
   1066c:	07c92707          	flw	fa4,124(s2)
   10670:	00014637          	lui	a2,0x14
   10674:	47060613          	addi	a2,a2,1136 # 14470 <longjmp+0x180>
   10678:	a0f725d3          	feq.s	a1,fa4,fa5
   1067c:	00000513          	li	a0,0
   10680:	b09ff0ef          	jal	10188 <TstCond>
  Z = - Zero;
   10684:	19842787          	flw	fa5,408(s0)
   10688:	20f79753          	fneg.s	fa4,fa5
   1068c:	000177b7          	lui	a5,0x17
   10690:	0ce7ac27          	fsw	fa4,216(a5) # 170d8 <Z>
  if ( Z != 0.0f )
   10694:	f0000753          	fmv.w.x	fa4,zero
   10698:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1069c:	04079463          	bnez	a5,106e4 <main+0x22c>
    ErrCnt[Failure] = ErrCnt[Failure] + 1;
   106a0:	000177b7          	lui	a5,0x17
   106a4:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   106a8:	0007a703          	lw	a4,0(a5)
   106ac:	00170713          	addi	a4,a4,1
   106b0:	00e7a023          	sw	a4,0(a5)
    write_string ( "Comparison alleges that -0.0 is Non-zero!\n" );
   106b4:	00014537          	lui	a0,0x14
   106b8:	47c50513          	addi	a0,a0,1148 # 1447c <longjmp+0x18c>
   106bc:	971ff0ef          	jal	1002c <write_string>
    U2 = 0.001f;
   106c0:	00017737          	lui	a4,0x17
   106c4:	000177b7          	lui	a5,0x17
   106c8:	03872787          	flw	fa5,56(a4) # 17038 <__SDATA_BEGIN__+0x38>
   106cc:	10f7a427          	fsw	fa5,264(a5) # 17108 <U2>
    Radix = 1;
   106d0:	00017737          	lui	a4,0x17
   106d4:	000177b7          	lui	a5,0x17
   106d8:	00072787          	flw	fa5,0(a4) # 17000 <__SDATA_BEGIN__>
   106dc:	1af7a427          	fsw	fa5,424(a5) # 171a8 <Radix>
    TstPtUf();
   106e0:	bf5ff0ef          	jal	102d4 <TstPtUf>
  TstCond ( Failure, (Three == Two + One),           "3 != 2+1" );
   106e4:	000179b7          	lui	s3,0x17
   106e8:	00017437          	lui	s0,0x17
   106ec:	07c9a787          	flw	fa5,124(s3) # 1707c <Two>
   106f0:	08042707          	flw	fa4,128(s0) # 17080 <One>
   106f4:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   106f8:	000174b7          	lui	s1,0x17
   106fc:	0784a707          	flw	fa4,120(s1) # 17078 <Three>
   10700:	00014637          	lui	a2,0x14
   10704:	4a860613          	addi	a2,a2,1192 # 144a8 <longjmp+0x1b8>
   10708:	a0f725d3          	feq.s	a1,fa4,fa5
   1070c:	00000513          	li	a0,0
   10710:	a79ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (Four == Three + One),          "4 != 3+1" );
   10714:	0784a787          	flw	fa5,120(s1)
   10718:	08042707          	flw	fa4,128(s0)
   1071c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   10720:	00017937          	lui	s2,0x17
   10724:	07492707          	flw	fa4,116(s2) # 17074 <Four>
   10728:	00014637          	lui	a2,0x14
   1072c:	4b460613          	addi	a2,a2,1204 # 144b4 <longjmp+0x1c4>
   10730:	a0f725d3          	feq.s	a1,fa4,fa5
   10734:	00000513          	li	a0,0
   10738:	a51ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (Four + Two * (- Two) == Zero), "4+2*(-2) != 0" );
   1073c:	07c9a787          	flw	fa5,124(s3)
   10740:	20f79753          	fneg.s	fa4,fa5
   10744:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   10748:	07492707          	flw	fa4,116(s2)
   1074c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   10750:	000179b7          	lui	s3,0x17
   10754:	1989a707          	flw	fa4,408(s3) # 17198 <Zero>
   10758:	00014637          	lui	a2,0x14
   1075c:	4c060613          	addi	a2,a2,1216 # 144c0 <longjmp+0x1d0>
   10760:	a0f725d3          	feq.s	a1,fa4,fa5
   10764:	00000513          	li	a0,0
   10768:	a21ff0ef          	jal	10188 <TstCond>
  TstCond ( Failure, (Four - Three - One == Zero),   "4-3-1 != 0" );
   1076c:	07492787          	flw	fa5,116(s2)
   10770:	0784a707          	flw	fa4,120(s1)
   10774:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10778:	08042707          	flw	fa4,128(s0)
   1077c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10780:	1989a707          	flw	fa4,408(s3)
   10784:	00014637          	lui	a2,0x14
   10788:	4d060613          	addi	a2,a2,1232 # 144d0 <longjmp+0x1e0>
   1078c:	a0f725d3          	feq.s	a1,fa4,fa5
   10790:	00000513          	li	a0,0
   10794:	9f5ff0ef          	jal	10188 <TstCond>
  TstCond (Failure, (MinusOne == (0 - One))
   10798:	08042707          	flw	fa4,128(s0)
   1079c:	f00007d3          	fmv.w.x	fa5,zero
   107a0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   107a4:	000177b7          	lui	a5,0x17
   107a8:	0587a687          	flw	fa3,88(a5) # 17058 <MinusOne>
   107ac:	a0d7a7d3          	feq.s	a5,fa5,fa3
   107b0:	02078e63          	beqz	a5,107ec <main+0x334>
       && (MinusOne + One == Zero ) && (One + MinusOne == Zero)
   107b4:	00d777d3          	fadd.s	fa5,fa4,fa3
   107b8:	1989a607          	flw	fa2,408(s3)
   107bc:	a0c7a7d3          	feq.s	a5,fa5,fa2
   107c0:	10078663          	beqz	a5,108cc <main+0x414>
       && (MinusOne + FABS(One) == Zero)
   107c4:	20e727d3          	fabs.s	fa5,fa4
   107c8:	00f6f7d3          	fadd.s	fa5,fa3,fa5
   107cc:	a0f627d3          	feq.s	a5,fa2,fa5
   107d0:	10078263          	beqz	a5,108d4 <main+0x41c>
       && (MinusOne + MinusOne * MinusOne == Zero),
   107d4:	10d6f7d3          	fmul.s	fa5,fa3,fa3
   107d8:	00f6f6d3          	fadd.s	fa3,fa3,fa5
  TstCond (Failure, (MinusOne == (0 - One))
   107dc:	a0d627d3          	feq.s	a5,fa2,fa3
   107e0:	0e079e63          	bnez	a5,108dc <main+0x424>
   107e4:	00000593          	li	a1,0
   107e8:	0080006f          	j	107f0 <main+0x338>
   107ec:	00000593          	li	a1,0
   107f0:	00014637          	lui	a2,0x14
   107f4:	4dc60613          	addi	a2,a2,1244 # 144dc <longjmp+0x1ec>
   107f8:	00000513          	li	a0,0
   107fc:	98dff0ef          	jal	10188 <TstCond>
  TstCond (Failure, Half + MinusOne + Half == Zero,
   10800:	000177b7          	lui	a5,0x17
   10804:	0847a787          	flw	fa5,132(a5) # 17084 <Half>
   10808:	000177b7          	lui	a5,0x17
   1080c:	0587a707          	flw	fa4,88(a5) # 17058 <MinusOne>
   10810:	00e7f753          	fadd.s	fa4,fa5,fa4
   10814:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   10818:	000177b7          	lui	a5,0x17
   1081c:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   10820:	00014637          	lui	a2,0x14
   10824:	51060613          	addi	a2,a2,1296 # 14510 <longjmp+0x220>
   10828:	a0f725d3          	feq.s	a1,fa4,fa5
   1082c:	00000513          	li	a0,0
   10830:	959ff0ef          	jal	10188 <TstCond>
  Milestone = 10;
   10834:	000177b7          	lui	a5,0x17
   10838:	00a00713          	li	a4,10
   1083c:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  TstCond (Failure, (Nine == Three * Three)
   10840:	000177b7          	lui	a5,0x17
   10844:	0787a787          	flw	fa5,120(a5) # 17078 <Three>
   10848:	10f7f6d3          	fmul.s	fa3,fa5,fa5
   1084c:	000177b7          	lui	a5,0x17
   10850:	0687a707          	flw	fa4,104(a5) # 17068 <Nine>
   10854:	a0e6a7d3          	feq.s	a5,fa3,fa4
   10858:	08078663          	beqz	a5,108e4 <main+0x42c>
       && (TwentySeven == Nine * Three) && (Eight == Four + Four)
   1085c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   10860:	000177b7          	lui	a5,0x17
   10864:	0647a707          	flw	fa4,100(a5) # 17064 <TwentySeven>
   10868:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1086c:	12078663          	beqz	a5,10998 <main+0x4e0>
   10870:	000177b7          	lui	a5,0x17
   10874:	0747a787          	flw	fa5,116(a5) # 17074 <Four>
   10878:	00f7f653          	fadd.s	fa2,fa5,fa5
   1087c:	000177b7          	lui	a5,0x17
   10880:	06c7a687          	flw	fa3,108(a5) # 1706c <Eight>
   10884:	a0d627d3          	feq.s	a5,fa2,fa3
   10888:	10078c63          	beqz	a5,109a0 <main+0x4e8>
       && (ThirtyTwo == Eight * Four)
   1088c:	10d7f653          	fmul.s	fa2,fa5,fa3
   10890:	000177b7          	lui	a5,0x17
   10894:	0607a687          	flw	fa3,96(a5) # 17060 <ThirtyTwo>
   10898:	a0d627d3          	feq.s	a5,fa2,fa3
   1089c:	10078663          	beqz	a5,109a8 <main+0x4f0>
       && (ThirtyTwo - TwentySeven - Four - One == Zero),
   108a0:	08e6f6d3          	fsub.s	fa3,fa3,fa4
   108a4:	08f6f7d3          	fsub.s	fa5,fa3,fa5
   108a8:	000177b7          	lui	a5,0x17
   108ac:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   108b0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   108b4:	000177b7          	lui	a5,0x17
   108b8:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
  TstCond (Failure, (Nine == Three * Three)
   108bc:	a0e7a7d3          	feq.s	a5,fa5,fa4
   108c0:	0e079863          	bnez	a5,109b0 <main+0x4f8>
   108c4:	00000593          	li	a1,0
   108c8:	0200006f          	j	108e8 <main+0x430>
  TstCond (Failure, (MinusOne == (0 - One))
   108cc:	00000593          	li	a1,0
   108d0:	f21ff06f          	j	107f0 <main+0x338>
   108d4:	00000593          	li	a1,0
   108d8:	f19ff06f          	j	107f0 <main+0x338>
   108dc:	00100593          	li	a1,1
   108e0:	f11ff06f          	j	107f0 <main+0x338>
  TstCond (Failure, (Nine == Three * Three)
   108e4:	00000593          	li	a1,0
   108e8:	00014637          	lui	a2,0x14
   108ec:	52860613          	addi	a2,a2,1320 # 14528 <longjmp+0x238>
   108f0:	00000513          	li	a0,0
   108f4:	895ff0ef          	jal	10188 <TstCond>
  TstCond (Failure, (Five == Four + One) &&
   108f8:	000177b7          	lui	a5,0x17
   108fc:	0747a787          	flw	fa5,116(a5) # 17074 <Four>
   10900:	000177b7          	lui	a5,0x17
   10904:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   10908:	00e7f753          	fadd.s	fa4,fa5,fa4
   1090c:	000177b7          	lui	a5,0x17
   10910:	0707a687          	flw	fa3,112(a5) # 17070 <Five>
   10914:	a0d727d3          	feq.s	a5,fa4,fa3
   10918:	0a078063          	beqz	a5,109b8 <main+0x500>
      (TwoForty == Four * Five * Three * Four)
   1091c:	10d7f753          	fmul.s	fa4,fa5,fa3
   10920:	000177b7          	lui	a5,0x17
   10924:	0787a587          	flw	fa1,120(a5) # 17078 <Three>
   10928:	10b77753          	fmul.s	fa4,fa4,fa1
   1092c:	10e7f753          	fmul.s	fa4,fa5,fa4
   10930:	000177b7          	lui	a5,0x17
   10934:	05c7a607          	flw	fa2,92(a5) # 1705c <TwoForty>
  TstCond (Failure, (Five == Four + One) &&
   10938:	a0c727d3          	feq.s	a5,fa4,fa2
   1093c:	4a078e63          	beqz	a5,10df8 <main+0x940>
       && (TwoForty / Three - Four * Four * Five == Zero)
   10940:	18b67753          	fdiv.s	fa4,fa2,fa1
   10944:	10f7f553          	fmul.s	fa0,fa5,fa5
   10948:	10a6f553          	fmul.s	fa0,fa3,fa0
   1094c:	08a77753          	fsub.s	fa4,fa4,fa0
   10950:	000177b7          	lui	a5,0x17
   10954:	1987a507          	flw	fa0,408(a5) # 17198 <Zero>
   10958:	a0a727d3          	feq.s	a5,fa4,fa0
   1095c:	4a078263          	beqz	a5,10e00 <main+0x948>
       && ( TwoForty / Four - Five * Three * Four == Zero)
   10960:	18f67753          	fdiv.s	fa4,fa2,fa5
   10964:	10b6f053          	fmul.s	ft0,fa3,fa1
   10968:	1007f053          	fmul.s	ft0,fa5,ft0
   1096c:	08077753          	fsub.s	fa4,fa4,ft0
   10970:	a0e527d3          	feq.s	a5,fa0,fa4
   10974:	48078a63          	beqz	a5,10e08 <main+0x950>
       && ( TwoForty / Five - Four * Three * Four == Zero),
   10978:	18d67653          	fdiv.s	fa2,fa2,fa3
   1097c:	10b7f5d3          	fmul.s	fa1,fa5,fa1
   10980:	10b7f7d3          	fmul.s	fa5,fa5,fa1
   10984:	08f677d3          	fsub.s	fa5,fa2,fa5
  TstCond (Failure, (Five == Four + One) &&
   10988:	a0f527d3          	feq.s	a5,fa0,fa5
   1098c:	48079263          	bnez	a5,10e10 <main+0x958>
   10990:	00000593          	li	a1,0
   10994:	0280006f          	j	109bc <main+0x504>
  TstCond (Failure, (Nine == Three * Three)
   10998:	00000593          	li	a1,0
   1099c:	f4dff06f          	j	108e8 <main+0x430>
   109a0:	00000593          	li	a1,0
   109a4:	f45ff06f          	j	108e8 <main+0x430>
   109a8:	00000593          	li	a1,0
   109ac:	f3dff06f          	j	108e8 <main+0x430>
   109b0:	00100593          	li	a1,1
   109b4:	f35ff06f          	j	108e8 <main+0x430>
  TstCond (Failure, (Five == Four + One) &&
   109b8:	00000593          	li	a1,0
   109bc:	00014637          	lui	a2,0x14
   109c0:	55c60613          	addi	a2,a2,1372 # 1455c <longjmp+0x26c>
   109c4:	00000513          	li	a0,0
   109c8:	fc0ff0ef          	jal	10188 <TstCond>
  if (ErrCnt[Failure] == 0)
   109cc:	000177b7          	lui	a5,0x17
   109d0:	1b07a783          	lw	a5,432(a5) # 171b0 <ErrCnt>
   109d4:	00079e63          	bnez	a5,109f0 <main+0x538>
    write_string ( "-1, 0, 1/2, 1, 2, 3, 4, 5, 9, 27, 32 & 240 are O.K.\n" );
   109d8:	00014537          	lui	a0,0x14
   109dc:	59050513          	addi	a0,a0,1424 # 14590 <longjmp+0x2a0>
   109e0:	e4cff0ef          	jal	1002c <write_string>
    write_string ( "\n");
   109e4:	00014537          	lui	a0,0x14
   109e8:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   109ec:	e40ff0ef          	jal	1002c <write_string>
  write_string ( "Searching for Radix and Precision.\n" );
   109f0:	00014537          	lui	a0,0x14
   109f4:	5c850513          	addi	a0,a0,1480 # 145c8 <longjmp+0x2d8>
   109f8:	e34ff0ef          	jal	1002c <write_string>
  W = One;
   109fc:	000177b7          	lui	a5,0x17
   10a00:	0807a587          	flw	fa1,128(a5) # 17080 <One>
   10a04:	000177b7          	lui	a5,0x17
   10a08:	0eb7ac27          	fsw	fa1,248(a5) # 170f8 <W>
    W = W + W;
   10a0c:	000177b7          	lui	a5,0x17
   10a10:	0f87a707          	flw	fa4,248(a5) # 170f8 <W>
   10a14:	00e77753          	fadd.s	fa4,fa4,fa4
   10a18:	0ee7ac27          	fsw	fa4,248(a5)
    Y = W + One;
   10a1c:	00e5f7d3          	fadd.s	fa5,fa1,fa4
   10a20:	000177b7          	lui	a5,0x17
   10a24:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
    Z = Y - W;
   10a28:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10a2c:	00017737          	lui	a4,0x17
   10a30:	0cf72c27          	fsw	fa5,216(a4) # 170d8 <Z>
    Y = Z - One;
   10a34:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   10a38:	0ef7a427          	fsw	fa5,232(a5)
  } while (MinusOne + FABS(Y) < Zero);
   10a3c:	20f7a7d3          	fabs.s	fa5,fa5
   10a40:	000177b7          	lui	a5,0x17
   10a44:	0587a687          	flw	fa3,88(a5) # 17058 <MinusOne>
   10a48:	00d7f7d3          	fadd.s	fa5,fa5,fa3
   10a4c:	000177b7          	lui	a5,0x17
   10a50:	1987a607          	flw	fa2,408(a5) # 17198 <Zero>
   10a54:	a0c797d3          	flt.s	a5,fa5,fa2
   10a58:	fa079ae3          	bnez	a5,10a0c <main+0x554>
  Precision = Zero;
   10a5c:	000177b7          	lui	a5,0x17
   10a60:	12c7aa27          	fsw	fa2,308(a5) # 17134 <Precision>
  Y = One;
   10a64:	000177b7          	lui	a5,0x17
   10a68:	0eb7a427          	fsw	fa1,232(a5) # 170e8 <Y>
    Radix = W + Y;
   10a6c:	00017737          	lui	a4,0x17
   10a70:	0e872687          	flw	fa3,232(a4) # 170e8 <Y>
   10a74:	00d777d3          	fadd.s	fa5,fa4,fa3
   10a78:	000177b7          	lui	a5,0x17
   10a7c:	1af7a427          	fsw	fa5,424(a5) # 171a8 <Radix>
    Y = Y + Y;
   10a80:	00d6f6d3          	fadd.s	fa3,fa3,fa3
   10a84:	0ed72427          	fsw	fa3,232(a4)
    Radix = Radix - W;
   10a88:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10a8c:	1af7a427          	fsw	fa5,424(a5)
  } while ( Radix == Zero);
   10a90:	a0f627d3          	feq.s	a5,fa2,fa5
   10a94:	fc079ce3          	bnez	a5,10a6c <main+0x5b4>
  if ( Radix < Two ) 
   10a98:	000177b7          	lui	a5,0x17
   10a9c:	07c7a707          	flw	fa4,124(a5) # 1707c <Two>
   10aa0:	a0e797d3          	flt.s	a5,fa5,fa4
   10aa4:	00078663          	beqz	a5,10ab0 <main+0x5f8>
    Radix = One;
   10aa8:	000177b7          	lui	a5,0x17
   10aac:	1ab7a427          	fsw	fa1,424(a5) # 171a8 <Radix>
  write_string ( "Radix = %f\n");
   10ab0:	00014537          	lui	a0,0x14
   10ab4:	5ec50513          	addi	a0,a0,1516 # 145ec <longjmp+0x2fc>
   10ab8:	d74ff0ef          	jal	1002c <write_string>
  if (Radix != 1)
   10abc:	000177b7          	lui	a5,0x17
   10ac0:	1a87a607          	flw	fa2,424(a5) # 171a8 <Radix>
   10ac4:	000177b7          	lui	a5,0x17
   10ac8:	0007a787          	flw	fa5,0(a5) # 17000 <__SDATA_BEGIN__>
   10acc:	a0f627d3          	feq.s	a5,fa2,fa5
   10ad0:	04079663          	bnez	a5,10b1c <main+0x664>
    W = One;
   10ad4:	000177b7          	lui	a5,0x17
   10ad8:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   10adc:	000177b7          	lui	a5,0x17
   10ae0:	0ed7ac27          	fsw	fa3,248(a5) # 170f8 <W>
      Precision = Precision + One;
   10ae4:	000177b7          	lui	a5,0x17
   10ae8:	1347a787          	flw	fa5,308(a5) # 17134 <Precision>
   10aec:	00f6f7d3          	fadd.s	fa5,fa3,fa5
   10af0:	12f7aa27          	fsw	fa5,308(a5)
      W = W * Radix;
   10af4:	000177b7          	lui	a5,0x17
   10af8:	0f87a787          	flw	fa5,248(a5) # 170f8 <W>
   10afc:	10f677d3          	fmul.s	fa5,fa2,fa5
   10b00:	0ef7ac27          	fsw	fa5,248(a5)
      Y = W + One;
   10b04:	00f6f753          	fadd.s	fa4,fa3,fa5
   10b08:	000177b7          	lui	a5,0x17
   10b0c:	0ee7a427          	fsw	fa4,232(a5) # 170e8 <Y>
    } while ((Y - W) == One);
   10b10:	08f77753          	fsub.s	fa4,fa4,fa5
   10b14:	a0e6a7d3          	feq.s	a5,fa3,fa4
   10b18:	fc0796e3          	bnez	a5,10ae4 <main+0x62c>
  U1 = One / W;
   10b1c:	00017437          	lui	s0,0x17
   10b20:	08042787          	flw	fa5,128(s0) # 17080 <One>
   10b24:	000177b7          	lui	a5,0x17
   10b28:	0f87a707          	flw	fa4,248(a5) # 170f8 <W>
   10b2c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   10b30:	00017937          	lui	s2,0x17
   10b34:	10f92627          	fsw	fa5,268(s2) # 1710c <U1>
  U2 = Radix * U1;
   10b38:	10f67653          	fmul.s	fa2,fa2,fa5
   10b3c:	000174b7          	lui	s1,0x17
   10b40:	10c4a427          	fsw	fa2,264(s1) # 17108 <U2>
  write_string ( "Closest relative separation found is U1 = %.7e\n");
   10b44:	00014537          	lui	a0,0x14
   10b48:	5f850513          	addi	a0,a0,1528 # 145f8 <longjmp+0x308>
   10b4c:	ce0ff0ef          	jal	1002c <write_string>
  write_string ( "\n" );
   10b50:	00014537          	lui	a0,0x14
   10b54:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   10b58:	cd4ff0ef          	jal	1002c <write_string>
  write_string ( "Recalculating radix and precision\n" );
   10b5c:	00014537          	lui	a0,0x14
   10b60:	62850513          	addi	a0,a0,1576 # 14628 <longjmp+0x338>
   10b64:	cc8ff0ef          	jal	1002c <write_string>
  E0 = Radix;
   10b68:	000177b7          	lui	a5,0x17
   10b6c:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   10b70:	000177b7          	lui	a5,0x17
   10b74:	16f7aa27          	fsw	fa5,372(a5) # 17174 <E0>
  E1 = U1;
   10b78:	10c92007          	flw	ft0,268(s2)
   10b7c:	000177b7          	lui	a5,0x17
   10b80:	1607a827          	fsw	ft0,368(a5) # 17170 <E1>
  E9 = U2;
   10b84:	1084a607          	flw	fa2,264(s1)
   10b88:	000177b7          	lui	a5,0x17
   10b8c:	14c7ae27          	fsw	fa2,348(a5) # 1715c <E9>
  E3 = Precision;
   10b90:	000177b7          	lui	a5,0x17
   10b94:	1347a787          	flw	fa5,308(a5) # 17134 <Precision>
   10b98:	000177b7          	lui	a5,0x17
   10b9c:	16f7a627          	fsw	fa5,364(a5) # 1716c <E3>
  X = Four / Three;
   10ba0:	000177b7          	lui	a5,0x17
   10ba4:	0787a087          	flw	ft1,120(a5) # 17078 <Three>
   10ba8:	000177b7          	lui	a5,0x17
   10bac:	0747a687          	flw	fa3,116(a5) # 17074 <Four>
   10bb0:	1816f6d3          	fdiv.s	fa3,fa3,ft1
   10bb4:	000177b7          	lui	a5,0x17
   10bb8:	0ed7aa27          	fsw	fa3,244(a5) # 170f4 <X>
  Third = X - One;
   10bbc:	08042507          	flw	fa0,128(s0)
   10bc0:	08a6f6d3          	fsub.s	fa3,fa3,fa0
   10bc4:	00017737          	lui	a4,0x17
   10bc8:	14d72c27          	fsw	fa3,344(a4) # 17158 <Third>
  F6 = Half - Third;
   10bcc:	00017737          	lui	a4,0x17
   10bd0:	08472707          	flw	fa4,132(a4) # 17084 <Half>
   10bd4:	08d777d3          	fsub.s	fa5,fa4,fa3
   10bd8:	00017737          	lui	a4,0x17
   10bdc:	14f72a27          	fsw	fa5,340(a4) # 17154 <F6>
  X = F6 + F6;
   10be0:	00f7f7d3          	fadd.s	fa5,fa5,fa5
   10be4:	0ef7aa27          	fsw	fa5,244(a5)
  X = FABS(X - Third);
   10be8:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   10bec:	20f7a7d3          	fabs.s	fa5,fa5
   10bf0:	0ef7aa27          	fsw	fa5,244(a5)
  if (X < U2) X = U2;
   10bf4:	a0c797d3          	flt.s	a5,fa5,fa2
   10bf8:	00078663          	beqz	a5,10c04 <main+0x74c>
   10bfc:	000177b7          	lui	a5,0x17
   10c00:	0ec7aa27          	fsw	fa2,244(a5) # 170f4 <X>
    U2 = X;
   10c04:	000177b7          	lui	a5,0x17
   10c08:	0f47a687          	flw	fa3,244(a5) # 170f4 <X>
   10c0c:	00017737          	lui	a4,0x17
   10c10:	10d72427          	fsw	fa3,264(a4) # 17108 <U2>
    Y = Half * U2 + ThirtyTwo * U2 * U2;
   10c14:	10d777d3          	fmul.s	fa5,fa4,fa3
   10c18:	00017737          	lui	a4,0x17
   10c1c:	06072587          	flw	fa1,96(a4) # 17060 <ThirtyTwo>
   10c20:	10b6f653          	fmul.s	fa2,fa3,fa1
   10c24:	10c6f653          	fmul.s	fa2,fa3,fa2
   10c28:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   10c2c:	00017737          	lui	a4,0x17
   10c30:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
    Y = One + Y;
   10c34:	00f577d3          	fadd.s	fa5,fa0,fa5
   10c38:	0ef72427          	fsw	fa5,232(a4)
    X = Y - One;
   10c3c:	08a7f7d3          	fsub.s	fa5,fa5,fa0
   10c40:	0ef7aa27          	fsw	fa5,244(a5)
    } while ( ! ((U2 <= X) || (X <= Zero)));  
   10c44:	a0f687d3          	fle.s	a5,fa3,fa5
   10c48:	00079a63          	bnez	a5,10c5c <main+0x7a4>
   10c4c:	000177b7          	lui	a5,0x17
   10c50:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   10c54:	a0d787d3          	fle.s	a5,fa5,fa3
   10c58:	fa0786e3          	beqz	a5,10c04 <main+0x74c>
  X = Two / Three;
   10c5c:	000177b7          	lui	a5,0x17
   10c60:	07c7a787          	flw	fa5,124(a5) # 1707c <Two>
   10c64:	1817f7d3          	fdiv.s	fa5,fa5,ft1
   10c68:	000177b7          	lui	a5,0x17
   10c6c:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
  F6 = X - Half;
   10c70:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10c74:	00017737          	lui	a4,0x17
   10c78:	14f72a27          	fsw	fa5,340(a4) # 17154 <F6>
  Third = F6 + F6;
   10c7c:	00f7f6d3          	fadd.s	fa3,fa5,fa5
   10c80:	00017737          	lui	a4,0x17
   10c84:	14d72c27          	fsw	fa3,344(a4) # 17158 <Third>
  X = Third - Half;
   10c88:	08e6f6d3          	fsub.s	fa3,fa3,fa4
   10c8c:	0ed7aa27          	fsw	fa3,244(a5)
  X = FABS(X + F6);
   10c90:	00d7f7d3          	fadd.s	fa5,fa5,fa3
   10c94:	20f7a7d3          	fabs.s	fa5,fa5
   10c98:	0ef7aa27          	fsw	fa5,244(a5)
  if ( X < U1 )
   10c9c:	a00797d3          	flt.s	a5,fa5,ft0
   10ca0:	00078663          	beqz	a5,10cac <main+0x7f4>
    X = U1;
   10ca4:	000177b7          	lui	a5,0x17
   10ca8:	0e07aa27          	fsw	ft0,244(a5) # 170f4 <X>
    U1 = X;
   10cac:	000177b7          	lui	a5,0x17
   10cb0:	0f47a687          	flw	fa3,244(a5) # 170f4 <X>
   10cb4:	00017737          	lui	a4,0x17
   10cb8:	10d72627          	fsw	fa3,268(a4) # 1710c <U1>
    Y = Half * U1 + ThirtyTwo * U1 * U1;
   10cbc:	10d777d3          	fmul.s	fa5,fa4,fa3
   10cc0:	10d5f653          	fmul.s	fa2,fa1,fa3
   10cc4:	10c6f653          	fmul.s	fa2,fa3,fa2
   10cc8:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   10ccc:	00017737          	lui	a4,0x17
   10cd0:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
    Y = Half - Y;
   10cd4:	08f777d3          	fsub.s	fa5,fa4,fa5
   10cd8:	0ef72427          	fsw	fa5,232(a4)
    X = Half + Y;
   10cdc:	00f777d3          	fadd.s	fa5,fa4,fa5
   10ce0:	0ef7aa27          	fsw	fa5,244(a5)
    Y = Half - X;
   10ce4:	08f777d3          	fsub.s	fa5,fa4,fa5
   10ce8:	0ef72427          	fsw	fa5,232(a4)
    X = Half + Y;
   10cec:	00f777d3          	fadd.s	fa5,fa4,fa5
   10cf0:	0ef7aa27          	fsw	fa5,244(a5)
  } while ( ! ((U1 <= X) || (X <= Zero)));
   10cf4:	a0f687d3          	fle.s	a5,fa3,fa5
   10cf8:	00079a63          	bnez	a5,10d0c <main+0x854>
   10cfc:	000177b7          	lui	a5,0x17
   10d00:	1987a607          	flw	fa2,408(a5) # 17198 <Zero>
   10d04:	a0c787d3          	fle.s	a5,fa5,fa2
   10d08:	fa0782e3          	beqz	a5,10cac <main+0x7f4>
  if ( U1 == E1 )
   10d0c:	a0d027d3          	feq.s	a5,ft0,fa3
   10d10:	10078463          	beqz	a5,10e18 <main+0x960>
    write_string ( "confirms closest relative separation U1 .\n" );
   10d14:	00014537          	lui	a0,0x14
   10d18:	64c50513          	addi	a0,a0,1612 # 1464c <longjmp+0x35c>
   10d1c:	b10ff0ef          	jal	1002c <write_string>
  W = One / U1;
   10d20:	000177b7          	lui	a5,0x17
   10d24:	10c7a707          	flw	fa4,268(a5) # 1710c <U1>
   10d28:	000177b7          	lui	a5,0x17
   10d2c:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   10d30:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   10d34:	000177b7          	lui	a5,0x17
   10d38:	0ef7ac27          	fsw	fa5,248(a5) # 170f8 <W>
  F9 = (Half - U1) + Half;
   10d3c:	000177b7          	lui	a5,0x17
   10d40:	0847a787          	flw	fa5,132(a5) # 17084 <Half>
   10d44:	08e7f6d3          	fsub.s	fa3,fa5,fa4
   10d48:	00d7f7d3          	fadd.s	fa5,fa5,fa3
   10d4c:	000177b7          	lui	a5,0x17
   10d50:	14f7a827          	fsw	fa5,336(a5) # 17150 <F9>
  Radix = FLOOR(0.01f + U2 / U1);
   10d54:	000177b7          	lui	a5,0x17
   10d58:	1087a787          	flw	fa5,264(a5) # 17108 <U2>
   10d5c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   10d60:	000177b7          	lui	a5,0x17
   10d64:	03c7a507          	flw	fa0,60(a5) # 1703c <__SDATA_BEGIN__+0x3c>
   10d68:	00a7f553          	fadd.s	fa0,fa5,fa0
   10d6c:	448030ef          	jal	141b4 <floorf>
   10d70:	000177b7          	lui	a5,0x17
   10d74:	1aa7a427          	fsw	fa0,424(a5) # 171a8 <Radix>
  if ( Radix == E0 ) 
   10d78:	000177b7          	lui	a5,0x17
   10d7c:	1747a787          	flw	fa5,372(a5) # 17174 <E0>
   10d80:	a0f527d3          	feq.s	a5,fa0,fa5
   10d84:	0a078263          	beqz	a5,10e28 <main+0x970>
    write_string ( "Radix confirmed.\n" );
   10d88:	00014537          	lui	a0,0x14
   10d8c:	6b050513          	addi	a0,a0,1712 # 146b0 <longjmp+0x3c0>
   10d90:	a9cff0ef          	jal	1002c <write_string>
  TstCond (Defect, Radix <= Eight + Eight,
   10d94:	000177b7          	lui	a5,0x17
   10d98:	06c7a787          	flw	fa5,108(a5) # 1706c <Eight>
   10d9c:	00f7f7d3          	fadd.s	fa5,fa5,fa5
   10da0:	00017437          	lui	s0,0x17
   10da4:	1a842707          	flw	fa4,424(s0) # 171a8 <Radix>
   10da8:	00014637          	lui	a2,0x14
   10dac:	6ec60613          	addi	a2,a2,1772 # 146ec <longjmp+0x3fc>
   10db0:	a0f705d3          	fle.s	a1,fa4,fa5
   10db4:	00200513          	li	a0,2
   10db8:	bd0ff0ef          	jal	10188 <TstCond>
  TstCond (Flaw, (Radix == Two) || (Radix == 10)
   10dbc:	1a842787          	flw	fa5,424(s0)
   10dc0:	000177b7          	lui	a5,0x17
   10dc4:	07c7a707          	flw	fa4,124(a5) # 1707c <Two>
   10dc8:	a0e7a7d3          	feq.s	a5,fa5,fa4
   10dcc:	06079663          	bnez	a5,10e38 <main+0x980>
   10dd0:	000177b7          	lui	a5,0x17
   10dd4:	0407a707          	flw	fa4,64(a5) # 17040 <__SDATA_BEGIN__+0x40>
   10dd8:	a0e7a7d3          	feq.s	a5,fa5,fa4
   10ddc:	10079063          	bnez	a5,10edc <main+0xa24>
       || (Radix == One), "Radix is not as good as 2 or 10");
   10de0:	000177b7          	lui	a5,0x17
   10de4:	0807a707          	flw	fa4,128(a5) # 17080 <One>
  TstCond (Flaw, (Radix == Two) || (Radix == 10)
   10de8:	a0e7a7d3          	feq.s	a5,fa5,fa4
   10dec:	0e078c63          	beqz	a5,10ee4 <main+0xa2c>
   10df0:	00100593          	li	a1,1
   10df4:	0480006f          	j	10e3c <main+0x984>
  TstCond (Failure, (Five == Four + One) &&
   10df8:	00000593          	li	a1,0
   10dfc:	bc1ff06f          	j	109bc <main+0x504>
   10e00:	00000593          	li	a1,0
   10e04:	bb9ff06f          	j	109bc <main+0x504>
   10e08:	00000593          	li	a1,0
   10e0c:	bb1ff06f          	j	109bc <main+0x504>
   10e10:	00100593          	li	a1,1
   10e14:	ba9ff06f          	j	109bc <main+0x504>
    write_string ( "gets better closest relative separation U1 = %.7e .\n");
   10e18:	00014537          	lui	a0,0x14
   10e1c:	67850513          	addi	a0,a0,1656 # 14678 <longjmp+0x388>
   10e20:	a0cff0ef          	jal	1002c <write_string>
   10e24:	efdff06f          	j	10d20 <main+0x868>
    write_string ( "MYSTERY: recalculated Radix = %.7e .\n");
   10e28:	00014537          	lui	a0,0x14
   10e2c:	6c450513          	addi	a0,a0,1732 # 146c4 <longjmp+0x3d4>
   10e30:	9fcff0ef          	jal	1002c <write_string>
   10e34:	f61ff06f          	j	10d94 <main+0x8dc>
  TstCond (Flaw, (Radix == Two) || (Radix == 10)
   10e38:	00100593          	li	a1,1
   10e3c:	00014637          	lui	a2,0x14
   10e40:	71060613          	addi	a2,a2,1808 # 14710 <longjmp+0x420>
   10e44:	00300513          	li	a0,3
   10e48:	b40ff0ef          	jal	10188 <TstCond>
  Milestone = 20;
   10e4c:	000177b7          	lui	a5,0x17
   10e50:	01400713          	li	a4,20
   10e54:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  TstCond (Failure, F9 - Half < Half,
   10e58:	00017437          	lui	s0,0x17
   10e5c:	08442707          	flw	fa4,132(s0) # 17084 <Half>
   10e60:	000174b7          	lui	s1,0x17
   10e64:	1504a787          	flw	fa5,336(s1) # 17150 <F9>
   10e68:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   10e6c:	00014637          	lui	a2,0x14
   10e70:	73060613          	addi	a2,a2,1840 # 14730 <longjmp+0x440>
   10e74:	a0e795d3          	flt.s	a1,fa5,fa4
   10e78:	00000513          	li	a0,0
   10e7c:	b0cff0ef          	jal	10188 <TstCond>
  X = F9;
   10e80:	1504a707          	flw	fa4,336(s1)
   10e84:	000177b7          	lui	a5,0x17
   10e88:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
  I = 1;
   10e8c:	000177b7          	lui	a5,0x17
   10e90:	00100713          	li	a4,1
   10e94:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  Y = X - Half;
   10e98:	08442687          	flw	fa3,132(s0)
   10e9c:	08d777d3          	fsub.s	fa5,fa4,fa3
   10ea0:	000177b7          	lui	a5,0x17
   10ea4:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  Z = Y - Half;
   10ea8:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   10eac:	000177b7          	lui	a5,0x17
   10eb0:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  TstCond (Failure, (X != One)
   10eb4:	000177b7          	lui	a5,0x17
   10eb8:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   10ebc:	a0d727d3          	feq.s	a5,fa4,fa3
   10ec0:	02078663          	beqz	a5,10eec <main+0xa34>
       || (Z == Zero), "Comparison is fuzzy,X=1 but X-1/2-1/2 != 0");
   10ec4:	000177b7          	lui	a5,0x17
   10ec8:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
  TstCond (Failure, (X != One)
   10ecc:	a0e7a7d3          	feq.s	a5,fa5,fa4
   10ed0:	16078c63          	beqz	a5,11048 <main+0xb90>
   10ed4:	00070593          	mv	a1,a4
   10ed8:	0180006f          	j	10ef0 <main+0xa38>
  TstCond (Flaw, (Radix == Two) || (Radix == 10)
   10edc:	00100593          	li	a1,1
   10ee0:	f5dff06f          	j	10e3c <main+0x984>
   10ee4:	00000593          	li	a1,0
   10ee8:	f55ff06f          	j	10e3c <main+0x984>
  TstCond (Failure, (X != One)
   10eec:	00100593          	li	a1,1
   10ef0:	00014637          	lui	a2,0x14
   10ef4:	75860613          	addi	a2,a2,1880 # 14758 <longjmp+0x468>
   10ef8:	00000513          	li	a0,0
   10efc:	a8cff0ef          	jal	10188 <TstCond>
  X = One + U2;
   10f00:	000177b7          	lui	a5,0x17
   10f04:	0807a007          	flw	ft0,128(a5) # 17080 <One>
   10f08:	000177b7          	lui	a5,0x17
   10f0c:	1087a107          	flw	ft2,264(a5) # 17108 <U2>
   10f10:	002077d3          	fadd.s	fa5,ft0,ft2
   10f14:	000177b7          	lui	a5,0x17
   10f18:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
  I = 0;
   10f1c:	00017737          	lui	a4,0x17
   10f20:	14072223          	sw	zero,324(a4) # 17144 <I>
  Milestone = 25;
   10f24:	00017737          	lui	a4,0x17
   10f28:	01900693          	li	a3,25
   10f2c:	0cd72023          	sw	a3,192(a4) # 170c0 <Milestone>
  Milestone = 30;
   10f30:	01e00693          	li	a3,30
   10f34:	0cd72023          	sw	a3,192(a4)
  X = FABS(((Four / Three - One) - One / Four) * Three - One / Four);
   10f38:	00017737          	lui	a4,0x17
   10f3c:	07472587          	flw	fa1,116(a4) # 17074 <Four>
   10f40:	00017737          	lui	a4,0x17
   10f44:	07872607          	flw	fa2,120(a4) # 17078 <Three>
   10f48:	18c5f7d3          	fdiv.s	fa5,fa1,fa2
   10f4c:	0807f7d3          	fsub.s	fa5,fa5,ft0
   10f50:	18b07253          	fdiv.s	ft4,ft0,fa1
   10f54:	0847f7d3          	fsub.s	fa5,fa5,ft4
   10f58:	10f677d3          	fmul.s	fa5,fa2,fa5
   10f5c:	0847f7d3          	fsub.s	fa5,fa5,ft4
   10f60:	20f7a7d3          	fabs.s	fa5,fa5
   10f64:	0ef7aa27          	fsw	fa5,244(a5)
    Z2 = X;
   10f68:	000177b7          	lui	a5,0x17
   10f6c:	0f47a507          	flw	fa0,244(a5) # 170f4 <X>
   10f70:	00017737          	lui	a4,0x17
   10f74:	0ca72627          	fsw	fa0,204(a4) # 170cc <Z2>
    X = (One + (Half * Z2 + ThirtyTwo * Z2 * Z2)) - One;
   10f78:	00017737          	lui	a4,0x17
   10f7c:	08472707          	flw	fa4,132(a4) # 17084 <Half>
   10f80:	10e577d3          	fmul.s	fa5,fa0,fa4
   10f84:	00017737          	lui	a4,0x17
   10f88:	06072087          	flw	ft1,96(a4) # 17060 <ThirtyTwo>
   10f8c:	101576d3          	fmul.s	fa3,fa0,ft1
   10f90:	10d576d3          	fmul.s	fa3,fa0,fa3
   10f94:	00d7f7d3          	fadd.s	fa5,fa5,fa3
   10f98:	00f077d3          	fadd.s	fa5,ft0,fa5
   10f9c:	0807f7d3          	fsub.s	fa5,fa5,ft0
   10fa0:	0ef7aa27          	fsw	fa5,244(a5)
    } while ( ! ((Z2 <= X) || (X <= Zero)));
   10fa4:	a0f507d3          	fle.s	a5,fa0,fa5
   10fa8:	00079a63          	bnez	a5,10fbc <main+0xb04>
   10fac:	000177b7          	lui	a5,0x17
   10fb0:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   10fb4:	a0d787d3          	fle.s	a5,fa5,fa3
   10fb8:	fa0788e3          	beqz	a5,10f68 <main+0xab0>
  X = Y = Z = FABS((Three / Four - Two / Three) * Three - One / Four);
   10fbc:	18b677d3          	fdiv.s	fa5,fa2,fa1
   10fc0:	000177b7          	lui	a5,0x17
   10fc4:	07c7a187          	flw	ft3,124(a5) # 1707c <Two>
   10fc8:	18c1f6d3          	fdiv.s	fa3,ft3,fa2
   10fcc:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   10fd0:	10f677d3          	fmul.s	fa5,fa2,fa5
   10fd4:	0847f7d3          	fsub.s	fa5,fa5,ft4
   10fd8:	20f7a7d3          	fabs.s	fa5,fa5
   10fdc:	000177b7          	lui	a5,0x17
   10fe0:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
   10fe4:	000177b7          	lui	a5,0x17
   10fe8:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
   10fec:	000177b7          	lui	a5,0x17
   10ff0:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
    Z1 = Z;
   10ff4:	000177b7          	lui	a5,0x17
   10ff8:	0d87a587          	flw	fa1,216(a5) # 170d8 <Z>
   10ffc:	00017737          	lui	a4,0x17
   11000:	0cb72827          	fsw	fa1,208(a4) # 170d0 <Z1>
    Z = (One / Two - ((One / Two - (Half * Z1 + ThirtyTwo * Z1 * Z1))
   11004:	183077d3          	fdiv.s	fa5,ft0,ft3
   11008:	10b776d3          	fmul.s	fa3,fa4,fa1
   1100c:	10b0f653          	fmul.s	fa2,ft1,fa1
   11010:	10c5f653          	fmul.s	fa2,fa1,fa2
   11014:	00c6f6d3          	fadd.s	fa3,fa3,fa2
   11018:	08d7f6d3          	fsub.s	fa3,fa5,fa3
      + One / Two)) + One / Two;
   1101c:	00d7f6d3          	fadd.s	fa3,fa5,fa3
    Z = (One / Two - ((One / Two - (Half * Z1 + ThirtyTwo * Z1 * Z1))
   11020:	08d7f6d3          	fsub.s	fa3,fa5,fa3
      + One / Two)) + One / Two;
   11024:	00d7f7d3          	fadd.s	fa5,fa5,fa3
    Z = (One / Two - ((One / Two - (Half * Z1 + ThirtyTwo * Z1 * Z1))
   11028:	0cf7ac27          	fsw	fa5,216(a5)
    } while ( ! ((Z1 <= Z) || (Z <= Zero)));
   1102c:	a0f587d3          	fle.s	a5,fa1,fa5
   11030:	06079663          	bnez	a5,1109c <main+0xbe4>
   11034:	000177b7          	lui	a5,0x17
   11038:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   1103c:	a0d787d3          	fle.s	a5,fa5,fa3
   11040:	fa078ae3          	beqz	a5,10ff4 <main+0xb3c>
   11044:	0580006f          	j	1109c <main+0xbe4>
  TstCond (Failure, (X != One)
   11048:	00000593          	li	a1,0
   1104c:	ea5ff06f          	j	10ef0 <main+0xa38>
    X1 = X;
   11050:	000177b7          	lui	a5,0x17
   11054:	0f47a607          	flw	fa2,244(a5) # 170f4 <X>
   11058:	00017737          	lui	a4,0x17
   1105c:	0ec72827          	fsw	fa2,240(a4) # 170f0 <X1>
    X = ((Half * X1 + ThirtyTwo * X1 * X1) - F9) + F9;
   11060:	10c77053          	fmul.s	ft0,fa4,fa2
   11064:	10c0f7d3          	fmul.s	fa5,ft1,fa2
   11068:	10f677d3          	fmul.s	fa5,fa2,fa5
   1106c:	00f07053          	fadd.s	ft0,ft0,fa5
   11070:	00017737          	lui	a4,0x17
   11074:	15072787          	flw	fa5,336(a4) # 17150 <F9>
   11078:	08f07053          	fsub.s	ft0,ft0,fa5
   1107c:	0007f7d3          	fadd.s	fa5,fa5,ft0
   11080:	0ef7aa27          	fsw	fa5,244(a5)
    } while ( ! ((X1 <= X) || (X <= Zero)));
   11084:	a0f607d3          	fle.s	a5,fa2,fa5
   11088:	06079263          	bnez	a5,110ec <main+0xc34>
   1108c:	000177b7          	lui	a5,0x17
   11090:	1987a007          	flw	ft0,408(a5) # 17198 <Zero>
   11094:	a00787d3          	fle.s	a5,fa5,ft0
   11098:	04079a63          	bnez	a5,110ec <main+0xc34>
      Y1 = Y;
   1109c:	000177b7          	lui	a5,0x17
   110a0:	0e87a687          	flw	fa3,232(a5) # 170e8 <Y>
   110a4:	00017737          	lui	a4,0x17
   110a8:	0ed72227          	fsw	fa3,228(a4) # 170e4 <Y1>
      Y = (Half - ((Half - (Half * Y1 + ThirtyTwo * Y1 * Y1)) + Half
   110ac:	10d777d3          	fmul.s	fa5,fa4,fa3
   110b0:	10d0f653          	fmul.s	fa2,ft1,fa3
   110b4:	10c6f653          	fmul.s	fa2,fa3,fa2
   110b8:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   110bc:	08f777d3          	fsub.s	fa5,fa4,fa5
   110c0:	00f777d3          	fadd.s	fa5,fa4,fa5
   110c4:	08f777d3          	fsub.s	fa5,fa4,fa5
        )) + Half;
   110c8:	00f777d3          	fadd.s	fa5,fa4,fa5
      Y = (Half - ((Half - (Half * Y1 + ThirtyTwo * Y1 * Y1)) + Half
   110cc:	0ef7a427          	fsw	fa5,232(a5)
      } while ( ! ((Y1 <= Y) || (Y <= Zero)));
   110d0:	a0f687d3          	fle.s	a5,fa3,fa5
   110d4:	f6079ee3          	bnez	a5,11050 <main+0xb98>
   110d8:	000177b7          	lui	a5,0x17
   110dc:	1987a607          	flw	fa2,408(a5) # 17198 <Zero>
   110e0:	a0c787d3          	fle.s	a5,fa5,fa2
   110e4:	fa078ce3          	beqz	a5,1109c <main+0xbe4>
   110e8:	f69ff06f          	j	11050 <main+0xb98>
  if ((X1 != Y1) || (X1 != Z1)) {
   110ec:	a0c6a7d3          	feq.s	a5,fa3,fa2
   110f0:	00078663          	beqz	a5,110fc <main+0xc44>
   110f4:	a0c5a7d3          	feq.s	a5,fa1,fa2
   110f8:	1c079c63          	bnez	a5,112d0 <main+0xe18>
    BadCond(Serious, "Disagreements among the values X1, Y1, Z1,\n");
   110fc:	000145b7          	lui	a1,0x14
   11100:	78458593          	addi	a1,a1,1924 # 14784 <longjmp+0x494>
   11104:	00100513          	li	a0,1
   11108:	820ff0ef          	jal	10128 <BadCond>
    notify("Possibly some part of this");
   1110c:	00014537          	lui	a0,0x14
   11110:	7b050513          	addi	a0,a0,1968 # 147b0 <longjmp+0x4c0>
   11114:	b74ff0ef          	jal	10488 <notify>
    if ((X1 == U1) || (Y1 == U1) || (Z1 == U1))  write_string(
   11118:	000177b7          	lui	a5,0x17
   1111c:	0f07a707          	flw	fa4,240(a5) # 170f0 <X1>
   11120:	000177b7          	lui	a5,0x17
   11124:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   11128:	a0f727d3          	feq.s	a5,fa4,fa5
   1112c:	02079263          	bnez	a5,11150 <main+0xc98>
   11130:	000177b7          	lui	a5,0x17
   11134:	0e47a707          	flw	fa4,228(a5) # 170e4 <Y1>
   11138:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1113c:	00079a63          	bnez	a5,11150 <main+0xc98>
   11140:	000177b7          	lui	a5,0x17
   11144:	0d07a707          	flw	fa4,208(a5) # 170d0 <Z1>
   11148:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1114c:	00078863          	beqz	a5,1115c <main+0xca4>
   11150:	00014537          	lui	a0,0x14
   11154:	7cc50513          	addi	a0,a0,1996 # 147cc <longjmp+0x4dc>
   11158:	ed5fe0ef          	jal	1002c <write_string>
  Pause();
   1115c:	f85fe0ef          	jal	100e0 <Pause>
  Milestone = 35;
   11160:	000177b7          	lui	a5,0x17
   11164:	02300713          	li	a4,35
   11168:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  if (Radix >= Two) {
   1116c:	000177b7          	lui	a5,0x17
   11170:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   11174:	000177b7          	lui	a5,0x17
   11178:	07c7a707          	flw	fa4,124(a5) # 1707c <Two>
   1117c:	a0f707d3          	fle.s	a5,fa4,fa5
   11180:	06078e63          	beqz	a5,111fc <main+0xd44>
    X = W / (Radix * Radix);
   11184:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   11188:	000177b7          	lui	a5,0x17
   1118c:	0f87a707          	flw	fa4,248(a5) # 170f8 <W>
   11190:	18f77753          	fdiv.s	fa4,fa4,fa5
   11194:	00017437          	lui	s0,0x17
   11198:	0ee42a27          	fsw	fa4,244(s0) # 170f4 <X>
    Y = X + One;
   1119c:	000177b7          	lui	a5,0x17
   111a0:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   111a4:	00f777d3          	fadd.s	fa5,fa4,fa5
   111a8:	000177b7          	lui	a5,0x17
   111ac:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
    Z = Y - X;
   111b0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   111b4:	000177b7          	lui	a5,0x17
   111b8:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    T = Z + U2;
   111bc:	000174b7          	lui	s1,0x17
   111c0:	1084a687          	flw	fa3,264(s1) # 17108 <U2>
   111c4:	00d7f753          	fadd.s	fa4,fa5,fa3
   111c8:	000177b7          	lui	a5,0x17
   111cc:	12e7a027          	fsw	fa4,288(a5) # 17120 <T>
    X = T - Z;
   111d0:	08f777d3          	fsub.s	fa5,fa4,fa5
   111d4:	0ef42a27          	fsw	fa5,244(s0)
    TstCond (Failure, X == U2,
   111d8:	00015637          	lui	a2,0x15
   111dc:	8c860613          	addi	a2,a2,-1848 # 148c8 <longjmp+0x5d8>
   111e0:	a0f6a5d3          	feq.s	a1,fa3,fa5
   111e4:	00000513          	li	a0,0
   111e8:	fa1fe0ef          	jal	10188 <TstCond>
    if (X == U2) write_string(
   111ec:	0f442707          	flw	fa4,244(s0)
   111f0:	1084a787          	flw	fa5,264(s1)
   111f4:	a0f727d3          	feq.s	a5,fa4,fa5
   111f8:	1e079263          	bnez	a5,113dc <main+0xf24>
  write_string("\nChecking for guard digit in *, /, and -.\n");
   111fc:	00015537          	lui	a0,0x15
   11200:	93050513          	addi	a0,a0,-1744 # 14930 <longjmp+0x640>
   11204:	e29fe0ef          	jal	1002c <write_string>
  Y = F9 * One;
   11208:	000177b7          	lui	a5,0x17
   1120c:	1507a707          	flw	fa4,336(a5) # 17150 <F9>
   11210:	000177b7          	lui	a5,0x17
   11214:	0807a587          	flw	fa1,128(a5) # 17080 <One>
   11218:	10b777d3          	fmul.s	fa5,fa4,fa1
   1121c:	000176b7          	lui	a3,0x17
   11220:	0ef6a427          	fsw	fa5,232(a3) # 170e8 <Y>
  Z = One * F9;
   11224:	00017737          	lui	a4,0x17
   11228:	0cf72c27          	fsw	fa5,216(a4) # 170d8 <Z>
  X = F9 - Half;
   1122c:	000177b7          	lui	a5,0x17
   11230:	0847a687          	flw	fa3,132(a5) # 17084 <Half>
   11234:	08d77753          	fsub.s	fa4,fa4,fa3
   11238:	000177b7          	lui	a5,0x17
   1123c:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
  Y = (Y - Half) - X;
   11240:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   11244:	08e7f6d3          	fsub.s	fa3,fa5,fa4
   11248:	0ed6a427          	fsw	fa3,232(a3)
  Z = (Z - Half) - X;
   1124c:	0cd72c27          	fsw	fa3,216(a4)
  X = One + U2;
   11250:	00017737          	lui	a4,0x17
   11254:	10872787          	flw	fa5,264(a4) # 17108 <U2>
   11258:	00f5f753          	fadd.s	fa4,fa1,fa5
   1125c:	0ee7aa27          	fsw	fa4,244(a5)
  T = X * Radix;
   11260:	00017737          	lui	a4,0x17
   11264:	1a872607          	flw	fa2,424(a4) # 171a8 <Radix>
   11268:	10c77753          	fmul.s	fa4,fa4,fa2
   1126c:	00017737          	lui	a4,0x17
   11270:	12e72027          	fsw	fa4,288(a4) # 17120 <T>
  R = Radix * X;
   11274:	000176b7          	lui	a3,0x17
   11278:	12e6a427          	fsw	fa4,296(a3) # 17128 <R>
  X = T - Radix;
   1127c:	08c77753          	fsub.s	fa4,fa4,fa2
   11280:	0ee7aa27          	fsw	fa4,244(a5)
  X = X - Radix * U2;
   11284:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   11288:	08f777d3          	fsub.s	fa5,fa4,fa5
   1128c:	0ef7aa27          	fsw	fa5,244(a5)
  T = R - Radix;
   11290:	12e72027          	fsw	fa4,288(a4)
  T = T - Radix * U2;
   11294:	12f72027          	fsw	fa5,288(a4)
  X = X * (Radix - One);
   11298:	08b67653          	fsub.s	fa2,fa2,fa1
   1129c:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   112a0:	0ef7aa27          	fsw	fa5,244(a5)
  T = T * (Radix - One);
   112a4:	12f72027          	fsw	fa5,288(a4)
  if ((X == Zero) && (Y == Zero) && (Z == Zero) && (T == Zero)) GMult = Yes;
   112a8:	000177b7          	lui	a5,0x17
   112ac:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   112b0:	a0e7a7d3          	feq.s	a5,fa5,fa4
   112b4:	12078c63          	beqz	a5,113ec <main+0xf34>
   112b8:	a0e6a7d3          	feq.s	a5,fa3,fa4
   112bc:	12078863          	beqz	a5,113ec <main+0xf34>
   112c0:	000177b7          	lui	a5,0x17
   112c4:	00100713          	li	a4,1
   112c8:	0ae7aa23          	sw	a4,180(a5) # 170b4 <GMult>
   112cc:	13c0006f          	j	11408 <main+0xf50>
    if ((Z1 != U1) || (Z2 != U2)) {
   112d0:	000177b7          	lui	a5,0x17
   112d4:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   112d8:	a0f5a7d3          	feq.s	a5,fa1,fa5
   112dc:	00078663          	beqz	a5,112e8 <main+0xe30>
   112e0:	a0a127d3          	feq.s	a5,ft2,fa0
   112e4:	e6079ce3          	bnez	a5,1115c <main+0xca4>
      if ((Z1 >= U1) || (Z2 >= U2)) {
   112e8:	a0b787d3          	fle.s	a5,fa5,fa1
   112ec:	00079663          	bnez	a5,112f8 <main+0xe40>
   112f0:	a0a107d3          	fle.s	a5,ft2,fa0
   112f4:	02078e63          	beqz	a5,11330 <main+0xe78>
        BadCond(Failure, "");
   112f8:	000145b7          	lui	a1,0x14
   112fc:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   11300:	00000513          	li	a0,0
   11304:	e25fe0ef          	jal	10128 <BadCond>
        notify("Precision");
   11308:	00015537          	lui	a0,0x15
   1130c:	80450513          	addi	a0,a0,-2044 # 14804 <longjmp+0x514>
   11310:	978ff0ef          	jal	10488 <notify>
        write_string("\tU1 = %.7e, Z1 - U1 = %.7e\n");
   11314:	00015537          	lui	a0,0x15
   11318:	81050513          	addi	a0,a0,-2032 # 14810 <longjmp+0x520>
   1131c:	d11fe0ef          	jal	1002c <write_string>
        write_string("\tU2 = %.7e, Z2 - U2 = %.7e\n");
   11320:	00015537          	lui	a0,0x15
   11324:	82c50513          	addi	a0,a0,-2004 # 1482c <longjmp+0x53c>
   11328:	d05fe0ef          	jal	1002c <write_string>
   1132c:	e31ff06f          	j	1115c <main+0xca4>
        if ((Z1 <= Zero) || (Z2 <= Zero)) {
   11330:	000177b7          	lui	a5,0x17
   11334:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   11338:	a0f587d3          	fle.s	a5,fa1,fa5
   1133c:	00079663          	bnez	a5,11348 <main+0xe90>
   11340:	a0f507d3          	fle.s	a5,fa0,fa5
   11344:	02078a63          	beqz	a5,11378 <main+0xec0>
          write_string("Because of unusual Radix = %f");
   11348:	00015537          	lui	a0,0x15
   1134c:	84850513          	addi	a0,a0,-1976 # 14848 <longjmp+0x558>
   11350:	cddfe0ef          	jal	1002c <write_string>
          write_string(", or exact rational arithmetic a result\n");
   11354:	00015537          	lui	a0,0x15
   11358:	86850513          	addi	a0,a0,-1944 # 14868 <longjmp+0x578>
   1135c:	cd1fe0ef          	jal	1002c <write_string>
          write_string("Z1 = %.7e, or Z2 = %.7e ");
   11360:	00015537          	lui	a0,0x15
   11364:	89450513          	addi	a0,a0,-1900 # 14894 <longjmp+0x5a4>
   11368:	cc5fe0ef          	jal	1002c <write_string>
          notify("of an\nextra-precision");
   1136c:	00015537          	lui	a0,0x15
   11370:	8b050513          	addi	a0,a0,-1872 # 148b0 <longjmp+0x5c0>
   11374:	914ff0ef          	jal	10488 <notify>
        if (Z1 != Z2 || Z1 > Zero) {
   11378:	000177b7          	lui	a5,0x17
   1137c:	0d07a707          	flw	fa4,208(a5) # 170d0 <Z1>
   11380:	000177b7          	lui	a5,0x17
   11384:	0cc7a787          	flw	fa5,204(a5) # 170cc <Z2>
   11388:	a0f727d3          	feq.s	a5,fa4,fa5
   1138c:	00078a63          	beqz	a5,113a0 <main+0xee8>
   11390:	000177b7          	lui	a5,0x17
   11394:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   11398:	a0e697d3          	flt.s	a5,fa3,fa4
   1139c:	dc0780e3          	beqz	a5,1115c <main+0xca4>
          X = Z1 / U1;
   113a0:	000177b7          	lui	a5,0x17
   113a4:	10c7a687          	flw	fa3,268(a5) # 1710c <U1>
   113a8:	18d77753          	fdiv.s	fa4,fa4,fa3
   113ac:	000177b7          	lui	a5,0x17
   113b0:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
          Y = Z2 / U2;
   113b4:	000177b7          	lui	a5,0x17
   113b8:	1087a687          	flw	fa3,264(a5) # 17108 <U2>
   113bc:	18d7f7d3          	fdiv.s	fa5,fa5,fa3
   113c0:	000177b7          	lui	a5,0x17
   113c4:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
          if (Y > X) X = Y;
   113c8:	a0f717d3          	flt.s	a5,fa4,fa5
   113cc:	d80788e3          	beqz	a5,1115c <main+0xca4>
   113d0:	000177b7          	lui	a5,0x17
   113d4:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
   113d8:	d85ff06f          	j	1115c <main+0xca4>
    if (X == U2) write_string(
   113dc:	00015537          	lui	a0,0x15
   113e0:	8f850513          	addi	a0,a0,-1800 # 148f8 <longjmp+0x608>
   113e4:	c49fe0ef          	jal	1002c <write_string>
   113e8:	e15ff06f          	j	111fc <main+0xd44>
    GMult = No;
   113ec:	000177b7          	lui	a5,0x17
   113f0:	0a07aa23          	sw	zero,180(a5) # 170b4 <GMult>
    TstCond (Serious, False,
   113f4:	00015637          	lui	a2,0x15
   113f8:	95c60613          	addi	a2,a2,-1700 # 1495c <longjmp+0x66c>
   113fc:	00000593          	li	a1,0
   11400:	00100513          	li	a0,1
   11404:	d85fe0ef          	jal	10188 <TstCond>
  Z = Radix * U2;
   11408:	000177b7          	lui	a5,0x17
   1140c:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   11410:	000177b7          	lui	a5,0x17
   11414:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   11418:	10f777d3          	fmul.s	fa5,fa4,fa5
   1141c:	000177b7          	lui	a5,0x17
   11420:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  X = One + Z;
   11424:	00017737          	lui	a4,0x17
   11428:	08072687          	flw	fa3,128(a4) # 17080 <One>
   1142c:	00d7f653          	fadd.s	fa2,fa5,fa3
   11430:	00017737          	lui	a4,0x17
   11434:	0ec72a27          	fsw	fa2,244(a4) # 170f4 <X>
  Y = FABS((X + Z) - X * X) - U2;
   11438:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   1143c:	10c67653          	fmul.s	fa2,fa2,fa2
   11440:	08c7f7d3          	fsub.s	fa5,fa5,fa2
   11444:	20f7a7d3          	fabs.s	fa5,fa5
   11448:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   1144c:	000176b7          	lui	a3,0x17
   11450:	0ef6a427          	fsw	fa5,232(a3) # 170e8 <Y>
  X = One - U2;
   11454:	08e6f6d3          	fsub.s	fa3,fa3,fa4
   11458:	0ed72a27          	fsw	fa3,244(a4)
  Z = FABS((X - U2) - X * X) - U1;
   1145c:	08e6f753          	fsub.s	fa4,fa3,fa4
   11460:	10d6f6d3          	fmul.s	fa3,fa3,fa3
   11464:	08d77753          	fsub.s	fa4,fa4,fa3
   11468:	20e72753          	fabs.s	fa4,fa4
   1146c:	00017737          	lui	a4,0x17
   11470:	10c72687          	flw	fa3,268(a4) # 1710c <U1>
   11474:	08d77753          	fsub.s	fa4,fa4,fa3
   11478:	0ce7ac27          	fsw	fa4,216(a5)
  TstCond (Failure, (Y <= Zero)
   1147c:	000177b7          	lui	a5,0x17
   11480:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   11484:	a0d787d3          	fle.s	a5,fa5,fa3
   11488:	00078a63          	beqz	a5,1149c <main+0xfe4>
   1148c:	a0d707d3          	fle.s	a5,fa4,fa3
   11490:	0c079463          	bnez	a5,11558 <main+0x10a0>
   11494:	00000593          	li	a1,0
   11498:	0080006f          	j	114a0 <main+0xfe8>
   1149c:	00000593          	li	a1,0
   114a0:	00015637          	lui	a2,0x15
   114a4:	98060613          	addi	a2,a2,-1664 # 14980 <longjmp+0x690>
   114a8:	00000513          	li	a0,0
   114ac:	cddfe0ef          	jal	10188 <TstCond>
  Y = One - U2;
   114b0:	000177b7          	lui	a5,0x17
   114b4:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   114b8:	000177b7          	lui	a5,0x17
   114bc:	1087a687          	flw	fa3,264(a5) # 17108 <U2>
   114c0:	08d7f753          	fsub.s	fa4,fa5,fa3
   114c4:	000176b7          	lui	a3,0x17
   114c8:	0ee6a427          	fsw	fa4,232(a3) # 170e8 <Y>
  X = One + U2;
   114cc:	00d7f6d3          	fadd.s	fa3,fa5,fa3
   114d0:	00017737          	lui	a4,0x17
   114d4:	0ed72a27          	fsw	fa3,244(a4) # 170f4 <X>
  Z = One / Y;
   114d8:	18e7f753          	fdiv.s	fa4,fa5,fa4
   114dc:	000177b7          	lui	a5,0x17
   114e0:	0ce7ac27          	fsw	fa4,216(a5) # 170d8 <Z>
  Y = Z - X;
   114e4:	08d776d3          	fsub.s	fa3,fa4,fa3
   114e8:	0ed6a427          	fsw	fa3,232(a3)
  X = One / Three;
   114ec:	000176b7          	lui	a3,0x17
   114f0:	0786a707          	flw	fa4,120(a3) # 17078 <Three>
   114f4:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   114f8:	0ef72a27          	fsw	fa5,244(a4)
  Z = Three / Nine;
   114fc:	000176b7          	lui	a3,0x17
   11500:	0686a607          	flw	fa2,104(a3) # 17068 <Nine>
   11504:	18c77753          	fdiv.s	fa4,fa4,fa2
   11508:	0ce7ac27          	fsw	fa4,216(a5)
  X = X - Z;
   1150c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11510:	0ef72a27          	fsw	fa5,244(a4)
  T = Nine / TwentySeven;
   11514:	00017737          	lui	a4,0x17
   11518:	06472587          	flw	fa1,100(a4) # 17064 <TwentySeven>
   1151c:	18b67653          	fdiv.s	fa2,fa2,fa1
   11520:	00017737          	lui	a4,0x17
   11524:	12c72027          	fsw	fa2,288(a4) # 17120 <T>
  Z = Z - T;
   11528:	08c77753          	fsub.s	fa4,fa4,fa2
   1152c:	0ce7ac27          	fsw	fa4,216(a5)
  TstCond(Defect, X == Zero && Y == Zero && Z == Zero,
   11530:	000177b7          	lui	a5,0x17
   11534:	1987a607          	flw	fa2,408(a5) # 17198 <Zero>
   11538:	a0c7a7d3          	feq.s	a5,fa5,fa2
   1153c:	02078263          	beqz	a5,11560 <main+0x10a8>
   11540:	a0c6a7d3          	feq.s	a5,fa3,fa2
   11544:	0c078463          	beqz	a5,1160c <main+0x1154>
   11548:	a0c727d3          	feq.s	a5,fa4,fa2
   1154c:	0c079463          	bnez	a5,11614 <main+0x115c>
   11550:	00000593          	li	a1,0
   11554:	0100006f          	j	11564 <main+0x10ac>
  TstCond (Failure, (Y <= Zero)
   11558:	00100593          	li	a1,1
   1155c:	f45ff06f          	j	114a0 <main+0xfe8>
  TstCond(Defect, X == Zero && Y == Zero && Z == Zero,
   11560:	00000593          	li	a1,0
   11564:	00015637          	lui	a2,0x15
   11568:	9a860613          	addi	a2,a2,-1624 # 149a8 <longjmp+0x6b8>
   1156c:	00200513          	li	a0,2
   11570:	c19fe0ef          	jal	10188 <TstCond>
  Y = F9 / One;
   11574:	000177b7          	lui	a5,0x17
   11578:	1507a687          	flw	fa3,336(a5) # 17150 <F9>
   1157c:	000177b7          	lui	a5,0x17
   11580:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   11584:	18f6f753          	fdiv.s	fa4,fa3,fa5
   11588:	00017737          	lui	a4,0x17
   1158c:	0ee72427          	fsw	fa4,232(a4) # 170e8 <Y>
  X = F9 - Half;
   11590:	000177b7          	lui	a5,0x17
   11594:	0847a607          	flw	fa2,132(a5) # 17084 <Half>
   11598:	08c6f6d3          	fsub.s	fa3,fa3,fa2
   1159c:	000177b7          	lui	a5,0x17
   115a0:	0ed7aa27          	fsw	fa3,244(a5) # 170f4 <X>
  Y = (Y - Half) - X;
   115a4:	08c77753          	fsub.s	fa4,fa4,fa2
   115a8:	08d77753          	fsub.s	fa4,fa4,fa3
   115ac:	0ee72427          	fsw	fa4,232(a4)
  X = One + U2;
   115b0:	00017737          	lui	a4,0x17
   115b4:	10872687          	flw	fa3,264(a4) # 17108 <U2>
   115b8:	00d7f6d3          	fadd.s	fa3,fa5,fa3
   115bc:	0ed7aa27          	fsw	fa3,244(a5)
  T = X / One;
   115c0:	18f6f7d3          	fdiv.s	fa5,fa3,fa5
   115c4:	00017737          	lui	a4,0x17
   115c8:	12f72027          	fsw	fa5,288(a4) # 17120 <T>
  X = T - X;
   115cc:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   115d0:	0ef7aa27          	fsw	fa5,244(a5)
  if ((X == Zero) && (Y == Zero) && (Z == Zero)) GDiv = Yes;
   115d4:	000177b7          	lui	a5,0x17
   115d8:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   115dc:	a0d7a7d3          	feq.s	a5,fa5,fa3
   115e0:	02078e63          	beqz	a5,1161c <main+0x1164>
   115e4:	a0d727d3          	feq.s	a5,fa4,fa3
   115e8:	02078a63          	beqz	a5,1161c <main+0x1164>
   115ec:	000177b7          	lui	a5,0x17
   115f0:	0d87a787          	flw	fa5,216(a5) # 170d8 <Z>
   115f4:	a0f6a7d3          	feq.s	a5,fa3,fa5
   115f8:	02078263          	beqz	a5,1161c <main+0x1164>
   115fc:	000177b7          	lui	a5,0x17
   11600:	00100713          	li	a4,1
   11604:	0ae7a823          	sw	a4,176(a5) # 170b0 <GDiv>
   11608:	0300006f          	j	11638 <main+0x1180>
  TstCond(Defect, X == Zero && Y == Zero && Z == Zero,
   1160c:	00000593          	li	a1,0
   11610:	f55ff06f          	j	11564 <main+0x10ac>
   11614:	00100593          	li	a1,1
   11618:	f4dff06f          	j	11564 <main+0x10ac>
    GDiv = No;
   1161c:	000177b7          	lui	a5,0x17
   11620:	0a07a823          	sw	zero,176(a5) # 170b0 <GDiv>
    TstCond (Serious, False,
   11624:	00015637          	lui	a2,0x15
   11628:	a0c60613          	addi	a2,a2,-1524 # 14a0c <longjmp+0x71c>
   1162c:	00000593          	li	a1,0
   11630:	00100513          	li	a0,1
   11634:	b55fe0ef          	jal	10188 <TstCond>
  X = One / (One + U2);
   11638:	00017a37          	lui	s4,0x17
   1163c:	080a2787          	flw	fa5,128(s4) # 17080 <One>
   11640:	000179b7          	lui	s3,0x17
   11644:	1089a707          	flw	fa4,264(s3) # 17108 <U2>
   11648:	00e7f753          	fadd.s	fa4,fa5,fa4
   1164c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   11650:	000174b7          	lui	s1,0x17
   11654:	0ef4aa27          	fsw	fa5,244(s1) # 170f4 <X>
  Y = X - Half - Half;
   11658:	000177b7          	lui	a5,0x17
   1165c:	0847a707          	flw	fa4,132(a5) # 17084 <Half>
   11660:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11664:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11668:	00017437          	lui	s0,0x17
   1166c:	0ef42427          	fsw	fa5,232(s0) # 170e8 <Y>
  TstCond (Serious, Y < Zero,
   11670:	00017937          	lui	s2,0x17
   11674:	19892707          	flw	fa4,408(s2) # 17198 <Zero>
   11678:	00015637          	lui	a2,0x15
   1167c:	a3860613          	addi	a2,a2,-1480 # 14a38 <longjmp+0x748>
   11680:	a0e795d3          	flt.s	a1,fa5,fa4
   11684:	00100513          	li	a0,1
   11688:	b01fe0ef          	jal	10188 <TstCond>
  X = One - U2;
   1168c:	080a2687          	flw	fa3,128(s4)
   11690:	1089a787          	flw	fa5,264(s3)
   11694:	08f6f5d3          	fsub.s	fa1,fa3,fa5
   11698:	0eb4aa27          	fsw	fa1,244(s1)
  Y = One + Radix * U2;
   1169c:	000177b7          	lui	a5,0x17
   116a0:	1a87a607          	flw	fa2,424(a5) # 171a8 <Radix>
   116a4:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   116a8:	00f6f6d3          	fadd.s	fa3,fa3,fa5
   116ac:	0ed42427          	fsw	fa3,232(s0)
  Z = X * Radix;
   116b0:	10c5f7d3          	fmul.s	fa5,fa1,fa2
   116b4:	000177b7          	lui	a5,0x17
   116b8:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  T = Y * Radix;
   116bc:	10d67753          	fmul.s	fa4,fa2,fa3
   116c0:	000177b7          	lui	a5,0x17
   116c4:	12e7a027          	fsw	fa4,288(a5) # 17120 <T>
  R = Z / Radix;
   116c8:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
   116cc:	000177b7          	lui	a5,0x17
   116d0:	12f7a427          	fsw	fa5,296(a5) # 17128 <R>
  StickyBit = T / Radix;
   116d4:	18c77753          	fdiv.s	fa4,fa4,fa2
   116d8:	000177b7          	lui	a5,0x17
   116dc:	14e7a027          	fsw	fa4,320(a5) # 17140 <StickyBit>
  X = R - X;
   116e0:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   116e4:	0ef4aa27          	fsw	fa5,244(s1)
  Y = StickyBit - Y;
   116e8:	08d77753          	fsub.s	fa4,fa4,fa3
   116ec:	0ee42427          	fsw	fa4,232(s0)
  TstCond (Failure, X == Zero && Y == Zero,
   116f0:	19892687          	flw	fa3,408(s2)
   116f4:	a0d7a7d3          	feq.s	a5,fa5,fa3
   116f8:	00078a63          	beqz	a5,1170c <main+0x1254>
   116fc:	a0d727d3          	feq.s	a5,fa4,fa3
   11700:	0c079063          	bnez	a5,117c0 <main+0x1308>
   11704:	00000593          	li	a1,0
   11708:	0080006f          	j	11710 <main+0x1258>
   1170c:	00000593          	li	a1,0
   11710:	00015637          	lui	a2,0x15
   11714:	a5c60613          	addi	a2,a2,-1444 # 14a5c <longjmp+0x76c>
   11718:	00000513          	li	a0,0
   1171c:	a6dfe0ef          	jal	10188 <TstCond>
  Y = One - U1;
   11720:	000177b7          	lui	a5,0x17
   11724:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   11728:	000177b7          	lui	a5,0x17
   1172c:	10c7a587          	flw	fa1,268(a5) # 1710c <U1>
   11730:	08b7f753          	fsub.s	fa4,fa5,fa1
   11734:	000177b7          	lui	a5,0x17
   11738:	0ee7a427          	fsw	fa4,232(a5) # 170e8 <Y>
  X = One - F9;
   1173c:	00017737          	lui	a4,0x17
   11740:	15072687          	flw	fa3,336(a4) # 17150 <F9>
   11744:	08d7f6d3          	fsub.s	fa3,fa5,fa3
   11748:	00017737          	lui	a4,0x17
   1174c:	0ed72a27          	fsw	fa3,244(a4) # 170f4 <X>
  Y = One - Y;
   11750:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11754:	0ef7a427          	fsw	fa5,232(a5)
  T = Radix - U2;
   11758:	000177b7          	lui	a5,0x17
   1175c:	1a87a707          	flw	fa4,424(a5) # 171a8 <Radix>
   11760:	000177b7          	lui	a5,0x17
   11764:	1087a007          	flw	ft0,264(a5) # 17108 <U2>
   11768:	08077553          	fsub.s	fa0,fa4,ft0
   1176c:	000177b7          	lui	a5,0x17
   11770:	12a7a027          	fsw	fa0,288(a5) # 17120 <T>
  Z = Radix - BMinusU2;
   11774:	00017737          	lui	a4,0x17
   11778:	19c72607          	flw	fa2,412(a4) # 1719c <BMinusU2>
   1177c:	08c77653          	fsub.s	fa2,fa4,fa2
   11780:	00017737          	lui	a4,0x17
   11784:	0cc72c27          	fsw	fa2,216(a4) # 170d8 <Z>
  T = Radix - T;
   11788:	08a77753          	fsub.s	fa4,fa4,fa0
   1178c:	12e7a027          	fsw	fa4,288(a5)
  if ((X == U1) && (Y == U1) && (Z == U2) && (T == U2)) GAddSub = Yes;
   11790:	a0d5a7d3          	feq.s	a5,fa1,fa3
   11794:	02078a63          	beqz	a5,117c8 <main+0x1310>
   11798:	a0f5a7d3          	feq.s	a5,fa1,fa5
   1179c:	02078663          	beqz	a5,117c8 <main+0x1310>
   117a0:	a0c027d3          	feq.s	a5,ft0,fa2
   117a4:	02078263          	beqz	a5,117c8 <main+0x1310>
   117a8:	a0e027d3          	feq.s	a5,ft0,fa4
   117ac:	00078e63          	beqz	a5,117c8 <main+0x1310>
   117b0:	000177b7          	lui	a5,0x17
   117b4:	00100713          	li	a4,1
   117b8:	0ae7a623          	sw	a4,172(a5) # 170ac <GAddSub>
   117bc:	0280006f          	j	117e4 <main+0x132c>
  TstCond (Failure, X == Zero && Y == Zero,
   117c0:	00100593          	li	a1,1
   117c4:	f4dff06f          	j	11710 <main+0x1258>
    GAddSub = No;
   117c8:	000177b7          	lui	a5,0x17
   117cc:	0a07a623          	sw	zero,172(a5) # 170ac <GAddSub>
    TstCond (Serious, False,
   117d0:	00015637          	lui	a2,0x15
   117d4:	a8860613          	addi	a2,a2,-1400 # 14a88 <longjmp+0x798>
   117d8:	00000593          	li	a1,0
   117dc:	00100513          	li	a0,1
   117e0:	9a9fe0ef          	jal	10188 <TstCond>
  if (F9 != One && F9 - One >= Zero) {
   117e4:	000177b7          	lui	a5,0x17
   117e8:	1507a787          	flw	fa5,336(a5) # 17150 <F9>
   117ec:	000177b7          	lui	a5,0x17
   117f0:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   117f4:	a0e7a7d3          	feq.s	a5,fa5,fa4
   117f8:	00079c63          	bnez	a5,11810 <main+0x1358>
   117fc:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11800:	000177b7          	lui	a5,0x17
   11804:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   11808:	a0f707d3          	fle.s	a5,fa4,fa5
   1180c:	08079463          	bnez	a5,11894 <main+0x13dc>
  if (GMult == Yes && GDiv == Yes && GAddSub == Yes) 
   11810:	000177b7          	lui	a5,0x17
   11814:	0b47a703          	lw	a4,180(a5) # 170b4 <GMult>
   11818:	00100793          	li	a5,1
   1181c:	00f71a63          	bne	a4,a5,11830 <main+0x1378>
   11820:	000177b7          	lui	a5,0x17
   11824:	0b07a703          	lw	a4,176(a5) # 170b0 <GDiv>
   11828:	00100793          	li	a5,1
   1182c:	06f70e63          	beq	a4,a5,118a8 <main+0x13f0>
  Milestone = 40;
   11830:	000177b7          	lui	a5,0x17
   11834:	02800713          	li	a4,40
   11838:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Pause();
   1183c:	8a5fe0ef          	jal	100e0 <Pause>
  write_string("Checking rounding on multiply, divide and add/subtract.\n");
   11840:	00015537          	lui	a0,0x15
   11844:	b2850513          	addi	a0,a0,-1240 # 14b28 <longjmp+0x838>
   11848:	fe4fe0ef          	jal	1002c <write_string>
  RMult = Other;
   1184c:	000177b7          	lui	a5,0x17
   11850:	0a07a423          	sw	zero,168(a5) # 170a8 <RMult>
  RDiv = Other;
   11854:	000177b7          	lui	a5,0x17
   11858:	0a07a223          	sw	zero,164(a5) # 170a4 <RDiv>
  RAddSub = Other;
   1185c:	000177b7          	lui	a5,0x17
   11860:	0a07a023          	sw	zero,160(a5) # 170a0 <RAddSub>
  RadixD2 = Radix / Two;
   11864:	000177b7          	lui	a5,0x17
   11868:	1a87a987          	flw	fs3,424(a5) # 171a8 <Radix>
   1186c:	000177b7          	lui	a5,0x17
   11870:	07c7a787          	flw	fa5,124(a5) # 1707c <Two>
   11874:	18f9f753          	fdiv.s	fa4,fs3,fa5
   11878:	000177b7          	lui	a5,0x17
   1187c:	1ae7a227          	fsw	fa4,420(a5) # 171a4 <RadixD2>
  A1 = Two;
   11880:	000177b7          	lui	a5,0x17
   11884:	18f7a227          	fsw	fa5,388(a5) # 17184 <A1>
  Done = False;
   11888:	000177b7          	lui	a5,0x17
   1188c:	0807ac23          	sw	zero,152(a5) # 17098 <Done>
   11890:	0680006f          	j	118f8 <main+0x1440>
    BadCond(Serious, "comparison alleges  (1-U1) < 1  although\n");
   11894:	000155b7          	lui	a1,0x15
   11898:	abc58593          	addi	a1,a1,-1348 # 14abc <longjmp+0x7cc>
   1189c:	00100513          	li	a0,1
   118a0:	889fe0ef          	jal	10128 <BadCond>
   118a4:	f6dff06f          	j	11810 <main+0x1358>
  if (GMult == Yes && GDiv == Yes && GAddSub == Yes) 
   118a8:	000177b7          	lui	a5,0x17
   118ac:	0ac7a703          	lw	a4,172(a5) # 170ac <GAddSub>
   118b0:	00100793          	li	a5,1
   118b4:	f6f71ee3          	bne	a4,a5,11830 <main+0x1378>
  write_string("     *, /, and - appear to have guard digits, as they should.\n");
   118b8:	00015537          	lui	a0,0x15
   118bc:	ae850513          	addi	a0,a0,-1304 # 14ae8 <longjmp+0x7f8>
   118c0:	f6cfe0ef          	jal	1002c <write_string>
   118c4:	f6dff06f          	j	11830 <main+0x1378>
    Done = (X == One) || (A1 > Three);
   118c8:	00100493          	li	s1,1
   118cc:	0080006f          	j	118d4 <main+0x141c>
   118d0:	00100493          	li	s1,1
   118d4:	000177b7          	lui	a5,0x17
   118d8:	0897ac23          	sw	s1,152(a5) # 17098 <Done>
    if (! Done) A1 = Nine + One;
   118dc:	00049c63          	bnez	s1,118f4 <main+0x143c>
   118e0:	000177b7          	lui	a5,0x17
   118e4:	0687a707          	flw	fa4,104(a5) # 17068 <Nine>
   118e8:	00e7f753          	fadd.s	fa4,fa5,fa4
   118ec:	000177b7          	lui	a5,0x17
   118f0:	18e7a227          	fsw	fa4,388(a5) # 17184 <A1>
    } while ( ! (Done));
   118f4:	06049263          	bnez	s1,11958 <main+0x14a0>
    AInvrse = Radix;
   118f8:	000177b7          	lui	a5,0x17
   118fc:	1937a427          	fsw	fs3,392(a5) # 17188 <AInvrse>
      X = AInvrse;
   11900:	000177b7          	lui	a5,0x17
   11904:	1887a487          	flw	fs1,392(a5) # 17188 <AInvrse>
   11908:	00017737          	lui	a4,0x17
   1190c:	0e972a27          	fsw	fs1,244(a4) # 170f4 <X>
      AInvrse = AInvrse / A1;
   11910:	00017737          	lui	a4,0x17
   11914:	18472907          	flw	fs2,388(a4) # 17184 <A1>
   11918:	1924f453          	fdiv.s	fs0,fs1,fs2
   1191c:	1887a427          	fsw	fs0,392(a5)
      } while ( ! (FLOOR(AInvrse) != AInvrse));
   11920:	20840553          	fmv.s	fa0,fs0
   11924:	091020ef          	jal	141b4 <floorf>
   11928:	a0a427d3          	feq.s	a5,fs0,fa0
   1192c:	fc079ae3          	bnez	a5,11900 <main+0x1448>
    Done = (X == One) || (A1 > Three);
   11930:	000177b7          	lui	a5,0x17
   11934:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   11938:	a0f4a7d3          	feq.s	a5,fs1,fa5
   1193c:	f8079ae3          	bnez	a5,118d0 <main+0x1418>
   11940:	000177b7          	lui	a5,0x17
   11944:	0787a707          	flw	fa4,120(a5) # 17078 <Three>
   11948:	a12717d3          	flt.s	a5,fa4,fs2
   1194c:	f6079ee3          	bnez	a5,118c8 <main+0x1410>
   11950:	00000493          	li	s1,0
   11954:	f81ff06f          	j	118d4 <main+0x141c>
  if (X == One) A1 = Radix;
   11958:	a0f4a7d3          	feq.s	a5,fs1,fa5
   1195c:	00078663          	beqz	a5,11968 <main+0x14b0>
   11960:	000177b7          	lui	a5,0x17
   11964:	1937a227          	fsw	fs3,388(a5) # 17184 <A1>
  AInvrse = One / A1;
   11968:	000177b7          	lui	a5,0x17
   1196c:	1847a707          	flw	fa4,388(a5) # 17184 <A1>
   11970:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   11974:	000177b7          	lui	a5,0x17
   11978:	18f7a427          	fsw	fa5,392(a5) # 17188 <AInvrse>
  X = A1;
   1197c:	000177b7          	lui	a5,0x17
   11980:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
  Y = AInvrse;
   11984:	000177b7          	lui	a5,0x17
   11988:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  Done = False;
   1198c:	000177b7          	lui	a5,0x17
   11990:	0807ac23          	sw	zero,152(a5) # 17098 <Done>
    Z = X * Y - Half;
   11994:	000177b7          	lui	a5,0x17
   11998:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   1199c:	000177b7          	lui	a5,0x17
   119a0:	0e87a707          	flw	fa4,232(a5) # 170e8 <Y>
   119a4:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   119a8:	000177b7          	lui	a5,0x17
   119ac:	0847a707          	flw	fa4,132(a5) # 17084 <Half>
   119b0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   119b4:	000177b7          	lui	a5,0x17
   119b8:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    TstCond (Failure, Z == Half,
   119bc:	00015637          	lui	a2,0x15
   119c0:	b6460613          	addi	a2,a2,-1180 # 14b64 <longjmp+0x874>
   119c4:	a0f725d3          	feq.s	a1,fa4,fa5
   119c8:	00000513          	li	a0,0
   119cc:	fbcfe0ef          	jal	10188 <TstCond>
    Done = X == Radix;
   119d0:	000177b7          	lui	a5,0x17
   119d4:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   119d8:	00017737          	lui	a4,0x17
   119dc:	0f472707          	flw	fa4,244(a4) # 170f4 <X>
   119e0:	a0f727d3          	feq.s	a5,fa4,fa5
   119e4:	000176b7          	lui	a3,0x17
   119e8:	08f6ac23          	sw	a5,152(a3) # 17098 <Done>
    X = Radix;
   119ec:	0ef72a27          	fsw	fa5,244(a4)
    Y = One / X;
   119f0:	00017737          	lui	a4,0x17
   119f4:	08072707          	flw	fa4,128(a4) # 17080 <One>
   119f8:	18f777d3          	fdiv.s	fa5,fa4,fa5
   119fc:	00017737          	lui	a4,0x17
   11a00:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
    } while ( ! (Done));
   11a04:	f80788e3          	beqz	a5,11994 <main+0x14dc>
  Y2 = One + U2;
   11a08:	000177b7          	lui	a5,0x17
   11a0c:	1087a687          	flw	fa3,264(a5) # 17108 <U2>
   11a10:	00d771d3          	fadd.s	ft3,fa4,fa3
   11a14:	000177b7          	lui	a5,0x17
   11a18:	0e37a027          	fsw	ft3,224(a5) # 170e0 <Y2>
  Y1 = One - U2;
   11a1c:	08d77753          	fsub.s	fa4,fa4,fa3
   11a20:	000177b7          	lui	a5,0x17
   11a24:	0ee7a227          	fsw	fa4,228(a5) # 170e4 <Y1>
  X = OneAndHalf - U2;
   11a28:	000177b7          	lui	a5,0x17
   11a2c:	0547a087          	flw	ft1,84(a5) # 17054 <OneAndHalf>
   11a30:	08d0f7d3          	fsub.s	fa5,ft1,fa3
   11a34:	00017737          	lui	a4,0x17
   11a38:	0ef72a27          	fsw	fa5,244(a4) # 170f4 <X>
  Y = OneAndHalf + U2;
   11a3c:	0016f153          	fadd.s	ft2,fa3,ft1
   11a40:	000177b7          	lui	a5,0x17
   11a44:	0e27a427          	fsw	ft2,232(a5) # 170e8 <Y>
  Z = (X - U2) * Y2;
   11a48:	08d7f2d3          	fsub.s	ft5,fa5,fa3
   11a4c:	1051f653          	fmul.s	fa2,ft3,ft5
   11a50:	00017637          	lui	a2,0x17
   11a54:	0cc62c27          	fsw	fa2,216(a2) # 170d8 <Z>
  T = Y * Y1;
   11a58:	102775d3          	fmul.s	fa1,fa4,ft2
   11a5c:	000176b7          	lui	a3,0x17
   11a60:	12b6a027          	fsw	fa1,288(a3) # 17120 <T>
  Z = Z - X;
   11a64:	08f67553          	fsub.s	fa0,fa2,fa5
   11a68:	0ca62c27          	fsw	fa0,216(a2)
  T = T - X;
   11a6c:	08f5f053          	fsub.s	ft0,fa1,fa5
   11a70:	1206a027          	fsw	ft0,288(a3)
  X = X * Y2;
   11a74:	10f1f653          	fmul.s	fa2,ft3,fa5
   11a78:	0ec72a27          	fsw	fa2,244(a4)
  Y = (Y + U2) * Y1;
   11a7c:	0026f253          	fadd.s	ft4,fa3,ft2
   11a80:	104775d3          	fmul.s	fa1,fa4,ft4
   11a84:	0eb7a427          	fsw	fa1,232(a5)
  X = X - OneAndHalf;
   11a88:	08167653          	fsub.s	fa2,fa2,ft1
   11a8c:	0ec72a27          	fsw	fa2,244(a4)
  Y = Y - OneAndHalf;
   11a90:	0815f5d3          	fsub.s	fa1,fa1,ft1
   11a94:	0eb7a427          	fsw	fa1,232(a5)
  if ((X == Zero) && (Y == Zero) && (Z == Zero) && (T <= Zero))
   11a98:	000177b7          	lui	a5,0x17
   11a9c:	1987a087          	flw	ft1,408(a5) # 17198 <Zero>
   11aa0:	a01627d3          	feq.s	a5,fa2,ft1
   11aa4:	18078a63          	beqz	a5,11c38 <main+0x1780>
   11aa8:	a015a7d3          	feq.s	a5,fa1,ft1
   11aac:	18078663          	beqz	a5,11c38 <main+0x1780>
   11ab0:	a01527d3          	feq.s	a5,fa0,ft1
   11ab4:	18078263          	beqz	a5,11c38 <main+0x1780>
   11ab8:	a01007d3          	fle.s	a5,ft0,ft1
   11abc:	16078e63          	beqz	a5,11c38 <main+0x1780>
    X = (OneAndHalf + U2) * Y2;
   11ac0:	1021f5d3          	fmul.s	fa1,ft3,ft2
   11ac4:	000177b7          	lui	a5,0x17
   11ac8:	0eb7aa27          	fsw	fa1,244(a5) # 170f4 <X>
    Y = OneAndHalf - U2 - U2;
   11acc:	000176b7          	lui	a3,0x17
   11ad0:	0e56a427          	fsw	ft5,232(a3) # 170e8 <Y>
    Z = OneAndHalf + U2 + U2;
   11ad4:	00017737          	lui	a4,0x17
   11ad8:	0c472c27          	fsw	ft4,216(a4) # 170d8 <Z>
    T = (OneAndHalf - U2) * Y1;
   11adc:	10f777d3          	fmul.s	fa5,fa4,fa5
   11ae0:	00017637          	lui	a2,0x17
   11ae4:	12f62027          	fsw	fa5,288(a2) # 17120 <T>
    X = X - (Z + U2);
   11ae8:	0046f053          	fadd.s	ft0,fa3,ft4
   11aec:	0805f5d3          	fsub.s	fa1,fa1,ft0
   11af0:	0eb7aa27          	fsw	fa1,244(a5)
    StickyBit = Y * Y1;
   11af4:	10577153          	fmul.s	ft2,fa4,ft5
   11af8:	000177b7          	lui	a5,0x17
   11afc:	1427a027          	fsw	ft2,320(a5) # 17140 <StickyBit>
    S = Z * Y2;
   11b00:	1041f553          	fmul.s	fa0,ft3,ft4
   11b04:	000175b7          	lui	a1,0x17
   11b08:	10a5ac27          	fsw	fa0,280(a1) # 17118 <S>
    T = T - Y;
   11b0c:	0857f653          	fsub.s	fa2,fa5,ft5
   11b10:	12c62027          	fsw	fa2,288(a2)
    Y = (U2 - Y) + StickyBit;
   11b14:	0856f2d3          	fsub.s	ft5,fa3,ft5
   11b18:	00517153          	fadd.s	ft2,ft2,ft5
   11b1c:	0e26a427          	fsw	ft2,232(a3)
    Z = S - (Z + U2 + U2);
   11b20:	0006f053          	fadd.s	ft0,fa3,ft0
   11b24:	08057553          	fsub.s	fa0,fa0,ft0
   11b28:	0ca72c27          	fsw	fa0,216(a4)
    StickyBit = (Y2 + U2) * Y1;
   11b2c:	0036f053          	fadd.s	ft0,fa3,ft3
   11b30:	10077053          	fmul.s	ft0,fa4,ft0
   11b34:	1407a027          	fsw	ft0,320(a5)
    Y1 = Y2 * Y1;
   11b38:	10e1f753          	fmul.s	fa4,ft3,fa4
   11b3c:	00017737          	lui	a4,0x17
   11b40:	0ee72227          	fsw	fa4,228(a4) # 170e4 <Y1>
    StickyBit = StickyBit - Y2;
   11b44:	08307053          	fsub.s	ft0,ft0,ft3
   11b48:	1407a027          	fsw	ft0,320(a5)
    Y1 = Y1 - Half;
   11b4c:	000177b7          	lui	a5,0x17
   11b50:	0847a187          	flw	ft3,132(a5) # 17084 <Half>
   11b54:	083777d3          	fsub.s	fa5,fa4,ft3
   11b58:	0ef72227          	fsw	fa5,228(a4)
    if ((X == Zero) && (Y == Zero) && (Z == Zero) && (T == Zero)
   11b5c:	a0b0a7d3          	feq.s	a5,ft1,fa1
   11b60:	02078663          	beqz	a5,11b8c <main+0x16d4>
   11b64:	a020a7d3          	feq.s	a5,ft1,ft2
   11b68:	02078263          	beqz	a5,11b8c <main+0x16d4>
   11b6c:	a0a0a7d3          	feq.s	a5,ft1,fa0
   11b70:	00078e63          	beqz	a5,11b8c <main+0x16d4>
   11b74:	a0c0a7d3          	feq.s	a5,ft1,fa2
   11b78:	00078a63          	beqz	a5,11b8c <main+0x16d4>
      && ( StickyBit == Zero) && (Y1 == Half))
   11b7c:	a000a7d3          	feq.s	a5,ft1,ft0
   11b80:	00078663          	beqz	a5,11b8c <main+0x16d4>
   11b84:	a0f1a7d3          	feq.s	a5,ft3,fa5
   11b88:	06079c63          	bnez	a5,11c00 <main+0x1748>
    else if ((X + U2 == Zero) && (Y < Zero) && (Z + U2 == Zero)
   11b8c:	00b6f5d3          	fadd.s	fa1,fa3,fa1
   11b90:	a0b0a7d3          	feq.s	a5,ft1,fa1
   11b94:	02078a63          	beqz	a5,11bc8 <main+0x1710>
   11b98:	a01117d3          	flt.s	a5,ft2,ft1
   11b9c:	02078663          	beqz	a5,11bc8 <main+0x1710>
   11ba0:	00a6f553          	fadd.s	fa0,fa3,fa0
   11ba4:	a0a0a7d3          	feq.s	a5,ft1,fa0
   11ba8:	02078063          	beqz	a5,11bc8 <main+0x1710>
        && (T < Zero) && (StickyBit + U2 == Zero)
   11bac:	a01617d3          	flt.s	a5,fa2,ft1
   11bb0:	00078c63          	beqz	a5,11bc8 <main+0x1710>
   11bb4:	0006f6d3          	fadd.s	fa3,fa3,ft0
   11bb8:	a0d0a7d3          	feq.s	a5,ft1,fa3
   11bbc:	00078663          	beqz	a5,11bc8 <main+0x1710>
        && (Y1 < Half))
   11bc0:	a03797d3          	flt.s	a5,fa5,ft3
   11bc4:	04079c63          	bnez	a5,11c1c <main+0x1764>
      write_string("* is neither chopped nor correctly rounded.\n");
   11bc8:	00015537          	lui	a0,0x15
   11bcc:	bd050513          	addi	a0,a0,-1072 # 14bd0 <longjmp+0x8e0>
   11bd0:	c5cfe0ef          	jal	1002c <write_string>
    if ((RMult == Rounded) && (GMult == No)) notify("Multiplication");
   11bd4:	000177b7          	lui	a5,0x17
   11bd8:	0a87a703          	lw	a4,168(a5) # 170a8 <RMult>
   11bdc:	00100793          	li	a5,1
   11be0:	06f71263          	bne	a4,a5,11c44 <main+0x178c>
   11be4:	000177b7          	lui	a5,0x17
   11be8:	0b47a783          	lw	a5,180(a5) # 170b4 <GMult>
   11bec:	04079c63          	bnez	a5,11c44 <main+0x178c>
   11bf0:	00015537          	lui	a0,0x15
   11bf4:	c0050513          	addi	a0,a0,-1024 # 14c00 <longjmp+0x910>
   11bf8:	891fe0ef          	jal	10488 <notify>
   11bfc:	0480006f          	j	11c44 <main+0x178c>
      RMult = Rounded;
   11c00:	000177b7          	lui	a5,0x17
   11c04:	00100713          	li	a4,1
   11c08:	0ae7a423          	sw	a4,168(a5) # 170a8 <RMult>
      write_string("Multiplication appears to round correctly.\n");
   11c0c:	00015537          	lui	a0,0x15
   11c10:	b8050513          	addi	a0,a0,-1152 # 14b80 <longjmp+0x890>
   11c14:	c18fe0ef          	jal	1002c <write_string>
   11c18:	fbdff06f          	j	11bd4 <main+0x171c>
        RMult = Chopped;
   11c1c:	000177b7          	lui	a5,0x17
   11c20:	00200713          	li	a4,2
   11c24:	0ae7a423          	sw	a4,168(a5) # 170a8 <RMult>
        write_string("Multiplication appears to chop.\n");
   11c28:	00015537          	lui	a0,0x15
   11c2c:	bac50513          	addi	a0,a0,-1108 # 14bac <longjmp+0x8bc>
   11c30:	bfcfe0ef          	jal	1002c <write_string>
   11c34:	fa1ff06f          	j	11bd4 <main+0x171c>
  else write_string("* is neither chopped nor correctly rounded.\n");
   11c38:	00015537          	lui	a0,0x15
   11c3c:	bd050513          	addi	a0,a0,-1072 # 14bd0 <longjmp+0x8e0>
   11c40:	becfe0ef          	jal	1002c <write_string>
  Milestone = 45;
   11c44:	000177b7          	lui	a5,0x17
   11c48:	02d00713          	li	a4,45
   11c4c:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Y2 = One + U2;
   11c50:	000177b7          	lui	a5,0x17
   11c54:	0807a587          	flw	fa1,128(a5) # 17080 <One>
   11c58:	000177b7          	lui	a5,0x17
   11c5c:	1087a787          	flw	fa5,264(a5) # 17108 <U2>
   11c60:	00f5f0d3          	fadd.s	ft1,fa1,fa5
   11c64:	000177b7          	lui	a5,0x17
   11c68:	0e17a027          	fsw	ft1,224(a5) # 170e0 <Y2>
  Y1 = One - U2;
   11c6c:	08f5f5d3          	fsub.s	fa1,fa1,fa5
   11c70:	000177b7          	lui	a5,0x17
   11c74:	0eb7a227          	fsw	fa1,228(a5) # 170e4 <Y1>
  Z = OneAndHalf + U2 + U2;
   11c78:	000177b7          	lui	a5,0x17
   11c7c:	0547a007          	flw	ft0,84(a5) # 17054 <OneAndHalf>
   11c80:	0007f1d3          	fadd.s	ft3,fa5,ft0
   11c84:	0037f153          	fadd.s	ft2,fa5,ft3
   11c88:	00017737          	lui	a4,0x17
   11c8c:	0c272c27          	fsw	ft2,216(a4) # 170d8 <Z>
  X = Z / Y2;
   11c90:	18117553          	fdiv.s	fa0,ft2,ft1
   11c94:	00017637          	lui	a2,0x17
   11c98:	0ea62a27          	fsw	fa0,244(a2) # 170f4 <X>
  T = OneAndHalf - U2 - U2;
   11c9c:	08f072d3          	fsub.s	ft5,ft0,fa5
   11ca0:	08f2f753          	fsub.s	fa4,ft5,fa5
   11ca4:	000177b7          	lui	a5,0x17
   11ca8:	12e7a027          	fsw	fa4,288(a5) # 17120 <T>
  Y = (T - U2) / Y1;
   11cac:	08f776d3          	fsub.s	fa3,fa4,fa5
   11cb0:	18b6f6d3          	fdiv.s	fa3,fa3,fa1
   11cb4:	000176b7          	lui	a3,0x17
   11cb8:	0ed6a427          	fsw	fa3,232(a3) # 170e8 <Y>
  Z = (Z + U2) / Y2;
   11cbc:	0027f653          	fadd.s	fa2,fa5,ft2
   11cc0:	18167653          	fdiv.s	fa2,fa2,ft1
   11cc4:	0cc72c27          	fsw	fa2,216(a4)
  X = X - OneAndHalf;
   11cc8:	08057553          	fsub.s	fa0,fa0,ft0
   11ccc:	0ea62a27          	fsw	fa0,244(a2)
  Y = Y - T;
   11cd0:	08e6f6d3          	fsub.s	fa3,fa3,fa4
   11cd4:	0ed6a427          	fsw	fa3,232(a3)
  T = T / Y1;
   11cd8:	18b77753          	fdiv.s	fa4,fa4,fa1
   11cdc:	12e7a027          	fsw	fa4,288(a5)
  Z = Z - (OneAndHalf + U2);
   11ce0:	08367653          	fsub.s	fa2,fa2,ft3
   11ce4:	0cc72c27          	fsw	fa2,216(a4)
  T = (U2 - OneAndHalf) + T;
   11ce8:	0807f253          	fsub.s	ft4,fa5,ft0
   11cec:	00477753          	fadd.s	fa4,fa4,ft4
   11cf0:	12e7a027          	fsw	fa4,288(a5)
  if (! ((X > Zero) || (Y > Zero) || (Z > Zero) || (T > Zero))) {
   11cf4:	000177b7          	lui	a5,0x17
   11cf8:	1987a207          	flw	ft4,408(a5) # 17198 <Zero>
   11cfc:	a0a217d3          	flt.s	a5,ft4,fa0
   11d00:	12079463          	bnez	a5,11e28 <main+0x1970>
   11d04:	a0d217d3          	flt.s	a5,ft4,fa3
   11d08:	12079063          	bnez	a5,11e28 <main+0x1970>
   11d0c:	a0c217d3          	flt.s	a5,ft4,fa2
   11d10:	10079c63          	bnez	a5,11e28 <main+0x1970>
   11d14:	a0e217d3          	flt.s	a5,ft4,fa4
   11d18:	10079863          	bnez	a5,11e28 <main+0x1970>
    X = OneAndHalf / Y2;
   11d1c:	18107353          	fdiv.s	ft6,ft0,ft1
   11d20:	0e662a27          	fsw	ft6,244(a2)
    Y = OneAndHalf - U2;
   11d24:	00017737          	lui	a4,0x17
   11d28:	0e572427          	fsw	ft5,232(a4) # 170e8 <Y>
    Z = OneAndHalf + U2;
   11d2c:	000177b7          	lui	a5,0x17
   11d30:	0c37ac27          	fsw	ft3,216(a5) # 170d8 <Z>
    X = X - Y;
   11d34:	08537353          	fsub.s	ft6,ft6,ft5
   11d38:	0e662a27          	fsw	ft6,244(a2)
    T = OneAndHalf / Y1;
   11d3c:	18b07553          	fdiv.s	fa0,ft0,fa1
   11d40:	000176b7          	lui	a3,0x17
   11d44:	12a6a027          	fsw	fa0,288(a3) # 17120 <T>
    Y = Y / Y1;
   11d48:	18b2f6d3          	fdiv.s	fa3,ft5,fa1
   11d4c:	0ed72427          	fsw	fa3,232(a4)
    T = T - (Z + U2);
   11d50:	08257553          	fsub.s	fa0,fa0,ft2
   11d54:	12a6a027          	fsw	fa0,288(a3)
    Y = Y - Z;
   11d58:	0836f6d3          	fsub.s	fa3,fa3,ft3
   11d5c:	0ed72427          	fsw	fa3,232(a4)
    Z = Z / Y2;
   11d60:	1811f753          	fdiv.s	fa4,ft3,ft1
   11d64:	0ce7ac27          	fsw	fa4,216(a5)
    Y1 = (Y2 + U2) / Y2;
   11d68:	0017f7d3          	fadd.s	fa5,fa5,ft1
   11d6c:	1817f7d3          	fdiv.s	fa5,fa5,ft1
   11d70:	00017737          	lui	a4,0x17
   11d74:	0ef72227          	fsw	fa5,228(a4) # 170e4 <Y1>
    Z = Z - OneAndHalf;
   11d78:	08077753          	fsub.s	fa4,fa4,ft0
   11d7c:	0ce7ac27          	fsw	fa4,216(a5)
    Y2 = Y1 - Y2;
   11d80:	0817f7d3          	fsub.s	fa5,fa5,ft1
   11d84:	000177b7          	lui	a5,0x17
   11d88:	0ef7a027          	fsw	fa5,224(a5) # 170e0 <Y2>
    Y1 = (F9 - U1) / F9;
   11d8c:	000177b7          	lui	a5,0x17
   11d90:	1507a587          	flw	fa1,336(a5) # 17150 <F9>
   11d94:	000177b7          	lui	a5,0x17
   11d98:	10c7a607          	flw	fa2,268(a5) # 1710c <U1>
   11d9c:	08c5f653          	fsub.s	fa2,fa1,fa2
   11da0:	18b67653          	fdiv.s	fa2,fa2,fa1
   11da4:	0ec72227          	fsw	fa2,228(a4)
    if ((X == Zero) && (Y == Zero) && (Z == Zero) && (T == Zero)
   11da8:	a06227d3          	feq.s	a5,ft4,ft6
   11dac:	02078e63          	beqz	a5,11de8 <main+0x1930>
   11db0:	a0d227d3          	feq.s	a5,ft4,fa3
   11db4:	02078a63          	beqz	a5,11de8 <main+0x1930>
   11db8:	a0e227d3          	feq.s	a5,ft4,fa4
   11dbc:	02078663          	beqz	a5,11de8 <main+0x1930>
   11dc0:	a0a227d3          	feq.s	a5,ft4,fa0
   11dc4:	02078263          	beqz	a5,11de8 <main+0x1930>
      && (Y2 == Zero) && (Y2 == Zero)
   11dc8:	a0f227d3          	feq.s	a5,ft4,fa5
   11dcc:	00078e63          	beqz	a5,11de8 <main+0x1930>
      && (Y1 - Half == F9 - Half )) {
   11dd0:	000177b7          	lui	a5,0x17
   11dd4:	0847a007          	flw	ft0,132(a5) # 17084 <Half>
   11dd8:	080670d3          	fsub.s	ft1,fa2,ft0
   11ddc:	0805f053          	fsub.s	ft0,fa1,ft0
   11de0:	a000a7d3          	feq.s	a5,ft1,ft0
   11de4:	10079463          	bnez	a5,11eec <main+0x1a34>
    else if ((X < Zero) && (Y < Zero) && (Z < Zero) && (T < Zero)
   11de8:	a04317d3          	flt.s	a5,ft6,ft4
   11dec:	02078e63          	beqz	a5,11e28 <main+0x1970>
   11df0:	a04697d3          	flt.s	a5,fa3,ft4
   11df4:	02078a63          	beqz	a5,11e28 <main+0x1970>
   11df8:	a04717d3          	flt.s	a5,fa4,ft4
   11dfc:	02078663          	beqz	a5,11e28 <main+0x1970>
   11e00:	a04517d3          	flt.s	a5,fa0,ft4
   11e04:	02078263          	beqz	a5,11e28 <main+0x1970>
      && (Y2 < Zero) && (Y1 - Half < F9 - Half)) {
   11e08:	a04797d3          	flt.s	a5,fa5,ft4
   11e0c:	00078e63          	beqz	a5,11e28 <main+0x1970>
   11e10:	000177b7          	lui	a5,0x17
   11e14:	0847a787          	flw	fa5,132(a5) # 17084 <Half>
   11e18:	08f67653          	fsub.s	fa2,fa2,fa5
   11e1c:	08f5f5d3          	fsub.s	fa1,fa1,fa5
   11e20:	a0b617d3          	flt.s	a5,fa2,fa1
   11e24:	0e079e63          	bnez	a5,11f20 <main+0x1a68>
  if (RDiv == Other) write_string("/ is neither chopped nor correctly rounded.\n");
   11e28:	000177b7          	lui	a5,0x17
   11e2c:	0a47a783          	lw	a5,164(a5) # 170a4 <RDiv>
   11e30:	00079863          	bnez	a5,11e40 <main+0x1988>
   11e34:	00015537          	lui	a0,0x15
   11e38:	c6050513          	addi	a0,a0,-928 # 14c60 <longjmp+0x970>
   11e3c:	9f0fe0ef          	jal	1002c <write_string>
  BInvrse = One / Radix;
   11e40:	000177b7          	lui	a5,0x17
   11e44:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   11e48:	000177b7          	lui	a5,0x17
   11e4c:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   11e50:	18f77753          	fdiv.s	fa4,fa4,fa5
   11e54:	000177b7          	lui	a5,0x17
   11e58:	1ae7a027          	fsw	fa4,416(a5) # 171a0 <BInvrse>
  TstCond (Failure, (BInvrse * Radix - Half == Half),
   11e5c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   11e60:	00017437          	lui	s0,0x17
   11e64:	08442707          	flw	fa4,132(s0) # 17084 <Half>
   11e68:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11e6c:	00015637          	lui	a2,0x15
   11e70:	c9060613          	addi	a2,a2,-880 # 14c90 <longjmp+0x9a0>
   11e74:	a0f725d3          	feq.s	a1,fa4,fa5
   11e78:	00000513          	li	a0,0
   11e7c:	b0cfe0ef          	jal	10188 <TstCond>
  Milestone = 50;
   11e80:	000177b7          	lui	a5,0x17
   11e84:	03200713          	li	a4,50
   11e88:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  TstCond (Failure, ((F9 + U1) - Half == Half)
   11e8c:	000177b7          	lui	a5,0x17
   11e90:	1507a787          	flw	fa5,336(a5) # 17150 <F9>
   11e94:	000177b7          	lui	a5,0x17
   11e98:	10c7a707          	flw	fa4,268(a5) # 1710c <U1>
   11e9c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   11ea0:	08442707          	flw	fa4,132(s0)
   11ea4:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   11ea8:	a0f727d3          	feq.s	a5,fa4,fa5
   11eac:	08078863          	beqz	a5,11f3c <main+0x1a84>
       && ((BMinusU2 + U2 ) - One == Radix - One),
   11eb0:	000177b7          	lui	a5,0x17
   11eb4:	19c7a787          	flw	fa5,412(a5) # 1719c <BMinusU2>
   11eb8:	000177b7          	lui	a5,0x17
   11ebc:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   11ec0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   11ec4:	000177b7          	lui	a5,0x17
   11ec8:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   11ecc:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   11ed0:	000177b7          	lui	a5,0x17
   11ed4:	1a87a707          	flw	fa4,424(a5) # 171a8 <Radix>
   11ed8:	08d77753          	fsub.s	fa4,fa4,fa3
  TstCond (Failure, ((F9 + U1) - Half == Half)
   11edc:	a0e7a7d3          	feq.s	a5,fa5,fa4
   11ee0:	1c079e63          	bnez	a5,120bc <main+0x1c04>
   11ee4:	00000593          	li	a1,0
   11ee8:	0580006f          	j	11f40 <main+0x1a88>
      RDiv = Rounded;
   11eec:	000177b7          	lui	a5,0x17
   11ef0:	00100713          	li	a4,1
   11ef4:	0ae7a223          	sw	a4,164(a5) # 170a4 <RDiv>
      write_string("Division appears to round correctly.\n");
   11ef8:	00015537          	lui	a0,0x15
   11efc:	c1050513          	addi	a0,a0,-1008 # 14c10 <longjmp+0x920>
   11f00:	92cfe0ef          	jal	1002c <write_string>
      if (GDiv == No) notify("Division");
   11f04:	000177b7          	lui	a5,0x17
   11f08:	0b07a783          	lw	a5,176(a5) # 170b0 <GDiv>
   11f0c:	f0079ee3          	bnez	a5,11e28 <main+0x1970>
   11f10:	00015537          	lui	a0,0x15
   11f14:	c3850513          	addi	a0,a0,-968 # 14c38 <longjmp+0x948>
   11f18:	d70fe0ef          	jal	10488 <notify>
   11f1c:	f0dff06f          	j	11e28 <main+0x1970>
      RDiv = Chopped;
   11f20:	000177b7          	lui	a5,0x17
   11f24:	00200713          	li	a4,2
   11f28:	0ae7a223          	sw	a4,164(a5) # 170a4 <RDiv>
      write_string("Division appears to chop.\n");
   11f2c:	00015537          	lui	a0,0x15
   11f30:	c4450513          	addi	a0,a0,-956 # 14c44 <longjmp+0x954>
   11f34:	8f8fe0ef          	jal	1002c <write_string>
   11f38:	ef1ff06f          	j	11e28 <main+0x1970>
  TstCond (Failure, ((F9 + U1) - Half == Half)
   11f3c:	00000593          	li	a1,0
   11f40:	00015637          	lui	a2,0x15
   11f44:	cb860613          	addi	a2,a2,-840 # 14cb8 <longjmp+0x9c8>
   11f48:	00000513          	li	a0,0
   11f4c:	a3cfe0ef          	jal	10188 <TstCond>
  X = One - U1 * U1;
   11f50:	000177b7          	lui	a5,0x17
   11f54:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   11f58:	000177b7          	lui	a5,0x17
   11f5c:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   11f60:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   11f64:	08f6f7d3          	fsub.s	fa5,fa3,fa5
   11f68:	00017737          	lui	a4,0x17
   11f6c:	0ef72a27          	fsw	fa5,244(a4) # 170f4 <X>
  Y = One + U2 * (One - U2);
   11f70:	000177b7          	lui	a5,0x17
   11f74:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   11f78:	08e6f653          	fsub.s	fa2,fa3,fa4
   11f7c:	10c77753          	fmul.s	fa4,fa4,fa2
   11f80:	00e6f753          	fadd.s	fa4,fa3,fa4
   11f84:	000177b7          	lui	a5,0x17
   11f88:	0ee7a427          	fsw	fa4,232(a5) # 170e8 <Y>
  Z = F9 - Half;
   11f8c:	000176b7          	lui	a3,0x17
   11f90:	0846a587          	flw	fa1,132(a3) # 17084 <Half>
   11f94:	000176b7          	lui	a3,0x17
   11f98:	1506a607          	flw	fa2,336(a3) # 17150 <F9>
   11f9c:	08b67653          	fsub.s	fa2,fa2,fa1
   11fa0:	000176b7          	lui	a3,0x17
   11fa4:	0cc6ac27          	fsw	fa2,216(a3) # 170d8 <Z>
  X = (X - Half) - Z;
   11fa8:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   11fac:	08c7f7d3          	fsub.s	fa5,fa5,fa2
   11fb0:	0ef72a27          	fsw	fa5,244(a4)
  Y = Y - One;
   11fb4:	08d77753          	fsub.s	fa4,fa4,fa3
   11fb8:	0ee7a427          	fsw	fa4,232(a5)
  if ((X == Zero) && (Y == Zero)) {
   11fbc:	000177b7          	lui	a5,0x17
   11fc0:	1987a687          	flw	fa3,408(a5) # 17198 <Zero>
   11fc4:	a0d7a7d3          	feq.s	a5,fa5,fa3
   11fc8:	00078663          	beqz	a5,11fd4 <main+0x1b1c>
   11fcc:	a0d727d3          	feq.s	a5,fa4,fa3
   11fd0:	0e079a63          	bnez	a5,120c4 <main+0x1c0c>
  if (GAddSub == Yes)
   11fd4:	000177b7          	lui	a5,0x17
   11fd8:	0ac7a703          	lw	a4,172(a5) # 170ac <GAddSub>
   11fdc:	00100793          	li	a5,1
   11fe0:	14f71263          	bne	a4,a5,12124 <main+0x1c6c>
    X = (Half + U2) * U2;
   11fe4:	000177b7          	lui	a5,0x17
   11fe8:	0847a707          	flw	fa4,132(a5) # 17084 <Half>
   11fec:	000177b7          	lui	a5,0x17
   11ff0:	1087a787          	flw	fa5,264(a5) # 17108 <U2>
   11ff4:	00f77553          	fadd.s	fa0,fa4,fa5
   11ff8:	10a7f5d3          	fmul.s	fa1,fa5,fa0
   11ffc:	00017737          	lui	a4,0x17
   12000:	0eb72a27          	fsw	fa1,244(a4) # 170f4 <X>
    Y = (Half - U2) * U2;
   12004:	08f776d3          	fsub.s	fa3,fa4,fa5
   12008:	10d7f753          	fmul.s	fa4,fa5,fa3
   1200c:	000177b7          	lui	a5,0x17
   12010:	0ee7a427          	fsw	fa4,232(a5) # 170e8 <Y>
    X = One + X;
   12014:	000176b7          	lui	a3,0x17
   12018:	0806a607          	flw	fa2,128(a3) # 17080 <One>
   1201c:	00c5f5d3          	fadd.s	fa1,fa1,fa2
   12020:	0eb72a27          	fsw	fa1,244(a4)
    Y = One + Y;
   12024:	00c77753          	fadd.s	fa4,fa4,fa2
   12028:	0ee7a427          	fsw	fa4,232(a5)
    X = (One + U2) - X;
   1202c:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   12030:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   12034:	0ef72a27          	fsw	fa5,244(a4)
    Y = One - Y;
   12038:	08e67753          	fsub.s	fa4,fa2,fa4
   1203c:	0ee7a427          	fsw	fa4,232(a5)
    if ((X == Zero) && (Y == Zero))
   12040:	000177b7          	lui	a5,0x17
   12044:	1987a587          	flw	fa1,408(a5) # 17198 <Zero>
   12048:	a0b7a7d3          	feq.s	a5,fa5,fa1
   1204c:	0c078463          	beqz	a5,12114 <main+0x1c5c>
   12050:	a0b727d3          	feq.s	a5,fa4,fa1
   12054:	0c078063          	beqz	a5,12114 <main+0x1c5c>
      X = (Half + U2) * U1;
   12058:	000177b7          	lui	a5,0x17
   1205c:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   12060:	10f57753          	fmul.s	fa4,fa0,fa5
   12064:	0ee72a27          	fsw	fa4,244(a4)
      Y = (Half - U2) * U1;
   12068:	10f6f7d3          	fmul.s	fa5,fa3,fa5
   1206c:	000177b7          	lui	a5,0x17
   12070:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
      X = One - X;
   12074:	08e67753          	fsub.s	fa4,fa2,fa4
   12078:	0ee72a27          	fsw	fa4,244(a4)
      Y = One - Y;
   1207c:	08f677d3          	fsub.s	fa5,fa2,fa5
   12080:	0ef7a427          	fsw	fa5,232(a5)
      X = F9 - X;
   12084:	000176b7          	lui	a3,0x17
   12088:	1506a687          	flw	fa3,336(a3) # 17150 <F9>
   1208c:	08e6f753          	fsub.s	fa4,fa3,fa4
   12090:	0ee72a27          	fsw	fa4,244(a4)
      Y = One - Y;
   12094:	08f67653          	fsub.s	fa2,fa2,fa5
   12098:	0ec7a427          	fsw	fa2,232(a5)
      if ((X == Zero) && (Y == Zero)) {
   1209c:	a0e5a7d3          	feq.s	a5,fa1,fa4
   120a0:	00078663          	beqz	a5,120ac <main+0x1bf4>
   120a4:	a0c5a7d3          	feq.s	a5,fa1,fa2
   120a8:	02079c63          	bnez	a5,120e0 <main+0x1c28>
      else write_string("Addition/Subtraction neither rounds nor chops.\n");
   120ac:	00015537          	lui	a0,0x15
   120b0:	d5050513          	addi	a0,a0,-688 # 14d50 <longjmp+0xa60>
   120b4:	f79fd0ef          	jal	1002c <write_string>
   120b8:	0780006f          	j	12130 <main+0x1c78>
  TstCond (Failure, ((F9 + U1) - Half == Half)
   120bc:	00048593          	mv	a1,s1
   120c0:	e81ff06f          	j	11f40 <main+0x1a88>
    RAddSub = Chopped;
   120c4:	000177b7          	lui	a5,0x17
   120c8:	00200713          	li	a4,2
   120cc:	0ae7a023          	sw	a4,160(a5) # 170a0 <RAddSub>
    write_string("Add/Subtract appears to be chopped.\n");
   120d0:	00015537          	lui	a0,0x15
   120d4:	ce450513          	addi	a0,a0,-796 # 14ce4 <longjmp+0x9f4>
   120d8:	f55fd0ef          	jal	1002c <write_string>
   120dc:	ef9ff06f          	j	11fd4 <main+0x1b1c>
        RAddSub = Rounded;
   120e0:	000177b7          	lui	a5,0x17
   120e4:	00100713          	li	a4,1
   120e8:	0ae7a023          	sw	a4,160(a5) # 170a0 <RAddSub>
        write_string("Addition/Subtraction appears to round correctly.\n");
   120ec:	00015537          	lui	a0,0x15
   120f0:	d0c50513          	addi	a0,a0,-756 # 14d0c <longjmp+0xa1c>
   120f4:	f39fd0ef          	jal	1002c <write_string>
        if (GAddSub == No) notify("Add/Subtract");
   120f8:	000177b7          	lui	a5,0x17
   120fc:	0ac7a783          	lw	a5,172(a5) # 170ac <GAddSub>
   12100:	02079863          	bnez	a5,12130 <main+0x1c78>
   12104:	00015537          	lui	a0,0x15
   12108:	d4050513          	addi	a0,a0,-704 # 14d40 <longjmp+0xa50>
   1210c:	b7cfe0ef          	jal	10488 <notify>
   12110:	0200006f          	j	12130 <main+0x1c78>
    else write_string("Addition/Subtraction neither rounds nor chops.\n");
   12114:	00015537          	lui	a0,0x15
   12118:	d5050513          	addi	a0,a0,-688 # 14d50 <longjmp+0xa60>
   1211c:	f11fd0ef          	jal	1002c <write_string>
   12120:	0100006f          	j	12130 <main+0x1c78>
  else write_string("Addition/Subtraction neither rounds nor chops.\n");
   12124:	00015537          	lui	a0,0x15
   12128:	d5050513          	addi	a0,a0,-688 # 14d50 <longjmp+0xa60>
   1212c:	f01fd0ef          	jal	1002c <write_string>
  S = One;
   12130:	000177b7          	lui	a5,0x17
   12134:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   12138:	000177b7          	lui	a5,0x17
   1213c:	10d7ac27          	fsw	fa3,280(a5) # 17118 <S>
  X = One + Half * (One + Half);
   12140:	000177b7          	lui	a5,0x17
   12144:	0847a787          	flw	fa5,132(a5) # 17084 <Half>
   12148:	00f6f753          	fadd.s	fa4,fa3,fa5
   1214c:	10e7f753          	fmul.s	fa4,fa5,fa4
   12150:	00e6f753          	fadd.s	fa4,fa3,fa4
   12154:	000177b7          	lui	a5,0x17
   12158:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
  Y = (One + U2) * Half;
   1215c:	000177b7          	lui	a5,0x17
   12160:	1087a607          	flw	fa2,264(a5) # 17108 <U2>
   12164:	00c6f6d3          	fadd.s	fa3,fa3,fa2
   12168:	10d7f7d3          	fmul.s	fa5,fa5,fa3
   1216c:	000177b7          	lui	a5,0x17
   12170:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  Z = X - Y;
   12174:	08f776d3          	fsub.s	fa3,fa4,fa5
   12178:	000177b7          	lui	a5,0x17
   1217c:	0cd7ac27          	fsw	fa3,216(a5) # 170d8 <Z>
  T = Y - X;
   12180:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   12184:	000177b7          	lui	a5,0x17
   12188:	12f7a027          	fsw	fa5,288(a5) # 17120 <T>
  StickyBit = Z + T;
   1218c:	00f6f7d3          	fadd.s	fa5,fa3,fa5
   12190:	000177b7          	lui	a5,0x17
   12194:	14f7a027          	fsw	fa5,320(a5) # 17140 <StickyBit>
  if (StickyBit != Zero) {
   12198:	000177b7          	lui	a5,0x17
   1219c:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   121a0:	a0e7a7d3          	feq.s	a5,fa5,fa4
   121a4:	08078c63          	beqz	a5,1223c <main+0x1d84>
  StickyBit = Zero;
   121a8:	000177b7          	lui	a5,0x17
   121ac:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   121b0:	000177b7          	lui	a5,0x17
   121b4:	14f7a027          	fsw	fa5,320(a5) # 17140 <StickyBit>
  if ((GMult == Yes) && (GDiv == Yes) && (GAddSub == Yes)
   121b8:	000177b7          	lui	a5,0x17
   121bc:	0b47a703          	lw	a4,180(a5) # 170b4 <GMult>
   121c0:	00100793          	li	a5,1
   121c4:	08f70a63          	beq	a4,a5,12258 <main+0x1da0>
  if (StickyBit == One) 
   121c8:	000177b7          	lui	a5,0x17
   121cc:	1407a707          	flw	fa4,320(a5) # 17140 <StickyBit>
   121d0:	000177b7          	lui	a5,0x17
   121d4:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   121d8:	a0f727d3          	feq.s	a5,fa4,fa5
   121dc:	2e078a63          	beqz	a5,124d0 <main+0x2018>
    write_string("Sticky bit apparently used correctly.\n");
   121e0:	00015537          	lui	a0,0x15
   121e4:	dbc50513          	addi	a0,a0,-580 # 14dbc <longjmp+0xacc>
   121e8:	e45fd0ef          	jal	1002c <write_string>
  TstCond (Flaw, !(GMult == No || GDiv == No || GAddSub == No ||
   121ec:	000177b7          	lui	a5,0x17
   121f0:	0b47a783          	lw	a5,180(a5) # 170b4 <GMult>
   121f4:	2e078663          	beqz	a5,124e0 <main+0x2028>
   121f8:	000177b7          	lui	a5,0x17
   121fc:	0b07a783          	lw	a5,176(a5) # 170b0 <GDiv>
   12200:	42078663          	beqz	a5,1262c <main+0x2174>
   12204:	000177b7          	lui	a5,0x17
   12208:	0ac7a783          	lw	a5,172(a5) # 170ac <GAddSub>
   1220c:	42078463          	beqz	a5,12634 <main+0x217c>
      RMult == Other || RDiv == Other || RAddSub == Other),
   12210:	000177b7          	lui	a5,0x17
   12214:	0a87a783          	lw	a5,168(a5) # 170a8 <RMult>
  TstCond (Flaw, !(GMult == No || GDiv == No || GAddSub == No ||
   12218:	42078263          	beqz	a5,1263c <main+0x2184>
      RMult == Other || RDiv == Other || RAddSub == Other),
   1221c:	000177b7          	lui	a5,0x17
   12220:	0a47a783          	lw	a5,164(a5) # 170a4 <RDiv>
   12224:	42078063          	beqz	a5,12644 <main+0x218c>
   12228:	000177b7          	lui	a5,0x17
   1222c:	0a07a783          	lw	a5,160(a5) # 170a0 <RAddSub>
  TstCond (Flaw, !(GMult == No || GDiv == No || GAddSub == No ||
   12230:	40079e63          	bnez	a5,1264c <main+0x2194>
   12234:	00000593          	li	a1,0
   12238:	2ac0006f          	j	124e4 <main+0x202c>
    S = Zero;
   1223c:	000177b7          	lui	a5,0x17
   12240:	10e7ac27          	fsw	fa4,280(a5) # 17118 <S>
    BadCond(Flaw, "(X - Y) + (Y - X) is non zero!\n");
   12244:	000155b7          	lui	a1,0x15
   12248:	d8058593          	addi	a1,a1,-640 # 14d80 <longjmp+0xa90>
   1224c:	00300513          	li	a0,3
   12250:	ed9fd0ef          	jal	10128 <BadCond>
   12254:	f55ff06f          	j	121a8 <main+0x1cf0>
  if ((GMult == Yes) && (GDiv == Yes) && (GAddSub == Yes)
   12258:	000177b7          	lui	a5,0x17
   1225c:	0b07a703          	lw	a4,176(a5) # 170b0 <GDiv>
   12260:	00100793          	li	a5,1
   12264:	f6f712e3          	bne	a4,a5,121c8 <main+0x1d10>
   12268:	000177b7          	lui	a5,0x17
   1226c:	0ac7a703          	lw	a4,172(a5) # 170ac <GAddSub>
   12270:	00100793          	li	a5,1
   12274:	f4f71ae3          	bne	a4,a5,121c8 <main+0x1d10>
    && (RMult == Rounded) && (RDiv == Rounded)
   12278:	000177b7          	lui	a5,0x17
   1227c:	0a87a703          	lw	a4,168(a5) # 170a8 <RMult>
   12280:	00100793          	li	a5,1
   12284:	f4f712e3          	bne	a4,a5,121c8 <main+0x1d10>
   12288:	000177b7          	lui	a5,0x17
   1228c:	0a47a703          	lw	a4,164(a5) # 170a4 <RDiv>
   12290:	00100793          	li	a5,1
   12294:	f2f71ae3          	bne	a4,a5,121c8 <main+0x1d10>
    && (RAddSub == Rounded) && (FLOOR(RadixD2) == RadixD2)) {
   12298:	000177b7          	lui	a5,0x17
   1229c:	0a07a703          	lw	a4,160(a5) # 170a0 <RAddSub>
   122a0:	00100793          	li	a5,1
   122a4:	f2f712e3          	bne	a4,a5,121c8 <main+0x1d10>
   122a8:	000177b7          	lui	a5,0x17
   122ac:	1a47a407          	flw	fs0,420(a5) # 171a4 <RadixD2>
   122b0:	20840553          	fmv.s	fa0,fs0
   122b4:	701010ef          	jal	141b4 <floorf>
   122b8:	a0a427d3          	feq.s	a5,fs0,fa0
   122bc:	f00786e3          	beqz	a5,121c8 <main+0x1d10>
    write_string("Checking for sticky bit.\n");
   122c0:	00015537          	lui	a0,0x15
   122c4:	da050513          	addi	a0,a0,-608 # 14da0 <longjmp+0xab0>
   122c8:	d65fd0ef          	jal	1002c <write_string>
    X = (Half + U1) * U2;
   122cc:	000177b7          	lui	a5,0x17
   122d0:	0847a707          	flw	fa4,132(a5) # 17084 <Half>
   122d4:	000177b7          	lui	a5,0x17
   122d8:	10c7a087          	flw	ft1,268(a5) # 1710c <U1>
   122dc:	00177653          	fadd.s	fa2,fa4,ft1
   122e0:	000177b7          	lui	a5,0x17
   122e4:	1087a787          	flw	fa5,264(a5) # 17108 <U2>
   122e8:	10f67053          	fmul.s	ft0,fa2,fa5
   122ec:	000177b7          	lui	a5,0x17
   122f0:	0e07aa27          	fsw	ft0,244(a5) # 170f4 <X>
    Y = Half * U2;
   122f4:	10f77553          	fmul.s	fa0,fa4,fa5
   122f8:	000177b7          	lui	a5,0x17
   122fc:	0ea7a427          	fsw	fa0,232(a5) # 170e8 <Y>
    Z = One + Y;
   12300:	000177b7          	lui	a5,0x17
   12304:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   12308:	00d575d3          	fadd.s	fa1,fa0,fa3
   1230c:	000177b7          	lui	a5,0x17
   12310:	0cb7ac27          	fsw	fa1,216(a5) # 170d8 <Z>
    T = One + X;
   12314:	00d07153          	fadd.s	ft2,ft0,fa3
   12318:	000177b7          	lui	a5,0x17
   1231c:	1227a027          	fsw	ft2,288(a5) # 17120 <T>
    if ((Z - One <= Zero) && (T - One >= U2)) {
   12320:	08d5f1d3          	fsub.s	ft3,fa1,fa3
   12324:	000177b7          	lui	a5,0x17
   12328:	1987a587          	flw	fa1,408(a5) # 17198 <Zero>
   1232c:	a0b187d3          	fle.s	a5,ft3,fa1
   12330:	e8078ce3          	beqz	a5,121c8 <main+0x1d10>
   12334:	08d171d3          	fsub.s	ft3,ft2,fa3
   12338:	a03787d3          	fle.s	a5,fa5,ft3
   1233c:	e80786e3          	beqz	a5,121c8 <main+0x1d10>
      Z = T + Y;
   12340:	00257553          	fadd.s	fa0,fa0,ft2
   12344:	000177b7          	lui	a5,0x17
   12348:	0ca7ac27          	fsw	fa0,216(a5) # 170d8 <Z>
      Y = Z - X;
   1234c:	08057053          	fsub.s	ft0,fa0,ft0
   12350:	000177b7          	lui	a5,0x17
   12354:	0e07a427          	fsw	ft0,232(a5) # 170e8 <Y>
      if ((Z - T >= U2) && (Y - T == Zero)) {
   12358:	08257553          	fsub.s	fa0,fa0,ft2
   1235c:	a0a787d3          	fle.s	a5,fa5,fa0
   12360:	e60784e3          	beqz	a5,121c8 <main+0x1d10>
   12364:	08207053          	fsub.s	ft0,ft0,ft2
   12368:	a005a7d3          	feq.s	a5,fa1,ft0
   1236c:	e4078ee3          	beqz	a5,121c8 <main+0x1d10>
        X = (Half + U1) * U1;
   12370:	10c0f653          	fmul.s	fa2,ft1,fa2
   12374:	000177b7          	lui	a5,0x17
   12378:	0ec7aa27          	fsw	fa2,244(a5) # 170f4 <X>
        Y = Half * U1;
   1237c:	10177053          	fmul.s	ft0,fa4,ft1
   12380:	000177b7          	lui	a5,0x17
   12384:	0e07a427          	fsw	ft0,232(a5) # 170e8 <Y>
        Z = One - Y;
   12388:	0806f553          	fsub.s	fa0,fa3,ft0
   1238c:	000177b7          	lui	a5,0x17
   12390:	0ca7ac27          	fsw	fa0,216(a5) # 170d8 <Z>
        T = One - X;
   12394:	08c6f653          	fsub.s	fa2,fa3,fa2
   12398:	000177b7          	lui	a5,0x17
   1239c:	12c7a027          	fsw	fa2,288(a5) # 17120 <T>
        if ((Z - One == Zero) && (T - F9 == Zero)) {
   123a0:	08d57553          	fsub.s	fa0,fa0,fa3
   123a4:	a0a5a7d3          	feq.s	a5,fa1,fa0
   123a8:	e20780e3          	beqz	a5,121c8 <main+0x1d10>
   123ac:	000177b7          	lui	a5,0x17
   123b0:	1507a507          	flw	fa0,336(a5) # 17150 <F9>
   123b4:	08a67653          	fsub.s	fa2,fa2,fa0
   123b8:	a0c5a7d3          	feq.s	a5,fa1,fa2
   123bc:	e00786e3          	beqz	a5,121c8 <main+0x1d10>
          Z = (Half - U1) * U1;
   123c0:	08177653          	fsub.s	fa2,fa4,ft1
   123c4:	10c0f653          	fmul.s	fa2,ft1,fa2
   123c8:	000177b7          	lui	a5,0x17
   123cc:	0cc7ac27          	fsw	fa2,216(a5) # 170d8 <Z>
          T = F9 - Z;
   123d0:	08c57653          	fsub.s	fa2,fa0,fa2
   123d4:	000177b7          	lui	a5,0x17
   123d8:	12c7a027          	fsw	fa2,288(a5) # 17120 <T>
          Q = F9 - Y;
   123dc:	08057053          	fsub.s	ft0,fa0,ft0
   123e0:	000177b7          	lui	a5,0x17
   123e4:	1207a827          	fsw	ft0,304(a5) # 17130 <Q>
          if ((T - F9 == Zero) && (F9 - U1 - Q == Zero)) {
   123e8:	08a67653          	fsub.s	fa2,fa2,fa0
   123ec:	a0c5a7d3          	feq.s	a5,fa1,fa2
   123f0:	dc078ce3          	beqz	a5,121c8 <main+0x1d10>
   123f4:	08157653          	fsub.s	fa2,fa0,ft1
   123f8:	08067653          	fsub.s	fa2,fa2,ft0
   123fc:	a0c5a7d3          	feq.s	a5,fa1,fa2
   12400:	dc0784e3          	beqz	a5,121c8 <main+0x1d10>
            Z = (One + U2) * OneAndHalf;
   12404:	00d7f553          	fadd.s	fa0,fa5,fa3
   12408:	000177b7          	lui	a5,0x17
   1240c:	0547a607          	flw	fa2,84(a5) # 17054 <OneAndHalf>
   12410:	10c57553          	fmul.s	fa0,fa0,fa2
   12414:	000177b7          	lui	a5,0x17
   12418:	0ca7ac27          	fsw	fa0,216(a5) # 170d8 <Z>
            T = (OneAndHalf + U2) - Z + U2;
   1241c:	00c7f653          	fadd.s	fa2,fa5,fa2
   12420:	08a67653          	fsub.s	fa2,fa2,fa0
   12424:	00c7f653          	fadd.s	fa2,fa5,fa2
   12428:	00017737          	lui	a4,0x17
   1242c:	12c72027          	fsw	fa2,288(a4) # 17120 <T>
            X = One + Half / Radix;
   12430:	00017737          	lui	a4,0x17
   12434:	1a872007          	flw	ft0,424(a4) # 171a8 <Radix>
   12438:	18077753          	fdiv.s	fa4,fa4,ft0
   1243c:	00e6f753          	fadd.s	fa4,fa3,fa4
   12440:	00017737          	lui	a4,0x17
   12444:	0ee72a27          	fsw	fa4,244(a4) # 170f4 <X>
            Y = One + Radix * U2;
   12448:	1007f0d3          	fmul.s	ft1,fa5,ft0
   1244c:	0016f553          	fadd.s	fa0,fa3,ft1
   12450:	00017737          	lui	a4,0x17
   12454:	0ea72427          	fsw	fa0,232(a4) # 170e8 <Y>
            Z = X * Y;
   12458:	10a77553          	fmul.s	fa0,fa4,fa0
   1245c:	0ca7ac27          	fsw	fa0,216(a5)
            if (T == Zero && X + Radix * U2 - Z == Zero) {
   12460:	a0c5a7d3          	feq.s	a5,fa1,fa2
   12464:	d60782e3          	beqz	a5,121c8 <main+0x1d10>
   12468:	00177753          	fadd.s	fa4,fa4,ft1
   1246c:	08a77753          	fsub.s	fa4,fa4,fa0
   12470:	a0e5a7d3          	feq.s	a5,fa1,fa4
   12474:	d4078ae3          	beqz	a5,121c8 <main+0x1d10>
              if (Radix != Two) {
   12478:	000177b7          	lui	a5,0x17
   1247c:	07c7a707          	flw	fa4,124(a5) # 1707c <Two>
   12480:	a0e027d3          	feq.s	a5,ft0,fa4
   12484:	02079c63          	bnez	a5,124bc <main+0x2004>
                X = Two + U2;
   12488:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   1248c:	000177b7          	lui	a5,0x17
   12490:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
                Y = X / Two;
   12494:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   12498:	0ef72427          	fsw	fa5,232(a4)
                if ((Y - One == Zero)) StickyBit = S;
   1249c:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   124a0:	a0f5a7d3          	feq.s	a5,fa1,fa5
   124a4:	d20782e3          	beqz	a5,121c8 <main+0x1d10>
   124a8:	000177b7          	lui	a5,0x17
   124ac:	1187a787          	flw	fa5,280(a5) # 17118 <S>
   124b0:	000177b7          	lui	a5,0x17
   124b4:	14f7a027          	fsw	fa5,320(a5) # 17140 <StickyBit>
   124b8:	d11ff06f          	j	121c8 <main+0x1d10>
              else StickyBit = S;
   124bc:	000177b7          	lui	a5,0x17
   124c0:	1187a787          	flw	fa5,280(a5) # 17118 <S>
   124c4:	000177b7          	lui	a5,0x17
   124c8:	14f7a027          	fsw	fa5,320(a5) # 17140 <StickyBit>
   124cc:	cfdff06f          	j	121c8 <main+0x1d10>
    write_string("Sticky bit used incorrectly or not at all.\n");
   124d0:	00015537          	lui	a0,0x15
   124d4:	de450513          	addi	a0,a0,-540 # 14de4 <longjmp+0xaf4>
   124d8:	b55fd0ef          	jal	1002c <write_string>
   124dc:	d11ff06f          	j	121ec <main+0x1d34>
  TstCond (Flaw, !(GMult == No || GDiv == No || GAddSub == No ||
   124e0:	00000593          	li	a1,0
   124e4:	00015637          	lui	a2,0x15
   124e8:	e1060613          	addi	a2,a2,-496 # 14e10 <longjmp+0xb20>
   124ec:	00300513          	li	a0,3
   124f0:	c99fd0ef          	jal	10188 <TstCond>
  Milestone = 60;
   124f4:	000177b7          	lui	a5,0x17
   124f8:	03c00713          	li	a4,60
   124fc:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  write_string("\n");
   12500:	00014537          	lui	a0,0x14
   12504:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   12508:	b25fd0ef          	jal	1002c <write_string>
  write_string("Does Multiplication commute?  ");
   1250c:	00015537          	lui	a0,0x15
   12510:	e8c50513          	addi	a0,a0,-372 # 14e8c <longjmp+0xb9c>
   12514:	b19fd0ef          	jal	1002c <write_string>
  Random9 = SQRT(3.0f);
   12518:	00017737          	lui	a4,0x17
   1251c:	000177b7          	lui	a5,0x17
   12520:	04472787          	flw	fa5,68(a4) # 17044 <__SDATA_BEGIN__+0x44>
   12524:	12f7a227          	fsw	fa5,292(a5) # 17124 <Random9>
  Random1 = Third;
   12528:	000177b7          	lui	a5,0x17
   1252c:	1587a787          	flw	fa5,344(a5) # 17158 <Third>
   12530:	000177b7          	lui	a5,0x17
   12534:	0ef7a627          	fsw	fa5,236(a5) # 170ec <Random1>
  I = 1;
   12538:	000177b7          	lui	a5,0x17
   1253c:	00100713          	li	a4,1
   12540:	14e7a223          	sw	a4,324(a5) # 17144 <I>
    X = Random();
   12544:	c75fd0ef          	jal	101b8 <Random>
   12548:	00017437          	lui	s0,0x17
   1254c:	0ea42a27          	fsw	fa0,244(s0) # 170f4 <X>
    Y = Random();
   12550:	c69fd0ef          	jal	101b8 <Random>
   12554:	000177b7          	lui	a5,0x17
   12558:	0ea7a427          	fsw	fa0,232(a5) # 170e8 <Y>
    Z9 = Y * X;
   1255c:	0f442787          	flw	fa5,244(s0)
   12560:	10f57553          	fmul.s	fa0,fa0,fa5
   12564:	000177b7          	lui	a5,0x17
   12568:	0ca7a427          	fsw	fa0,200(a5) # 170c8 <Z9>
    Z = X * Y;
   1256c:	00017737          	lui	a4,0x17
   12570:	0ca72c27          	fsw	fa0,216(a4) # 170d8 <Z>
    Z9 = Z - Z9;
   12574:	08a57553          	fsub.s	fa0,fa0,fa0
   12578:	0ca7a427          	fsw	fa0,200(a5)
    I = I + 1;
   1257c:	00017737          	lui	a4,0x17
   12580:	14472783          	lw	a5,324(a4) # 17144 <I>
   12584:	00178793          	addi	a5,a5,1
   12588:	14f72223          	sw	a5,324(a4)
    } while ( ! ((I > NoTrials) || (Z9 != Zero)));
   1258c:	00017737          	lui	a4,0x17
   12590:	05072703          	lw	a4,80(a4) # 17050 <NoTrials>
   12594:	00f74a63          	blt	a4,a5,125a8 <main+0x20f0>
   12598:	000176b7          	lui	a3,0x17
   1259c:	1986a787          	flw	fa5,408(a3) # 17198 <Zero>
   125a0:	a0f526d3          	feq.s	a3,fa0,fa5
   125a4:	fa0690e3          	bnez	a3,12544 <main+0x208c>
  if (I == NoTrials)
   125a8:	0ae78663          	beq	a5,a4,12654 <main+0x219c>
  if (! ((I == NoTrials) || (Z9 == Zero)))
   125ac:	00e78e63          	beq	a5,a4,125c8 <main+0x2110>
   125b0:	000177b7          	lui	a5,0x17
   125b4:	0c87a707          	flw	fa4,200(a5) # 170c8 <Z9>
   125b8:	000177b7          	lui	a5,0x17
   125bc:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   125c0:	a0f727d3          	feq.s	a5,fa4,fa5
   125c4:	0e078e63          	beqz	a5,126c0 <main+0x2208>
  else write_string("     No failures found in %d integer pairs.\n");
   125c8:	00015537          	lui	a0,0x15
   125cc:	ecc50513          	addi	a0,a0,-308 # 14ecc <longjmp+0xbdc>
   125d0:	a5dfd0ef          	jal	1002c <write_string>
  Milestone = 70;
   125d4:	000177b7          	lui	a5,0x17
   125d8:	04600713          	li	a4,70
   125dc:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  write_string("\nRunning test of square root(x).\n");
   125e0:	00015537          	lui	a0,0x15
   125e4:	efc50513          	addi	a0,a0,-260 # 14efc <longjmp+0xc0c>
   125e8:	a45fd0ef          	jal	1002c <write_string>
  TstCond (Failure, (Zero == SQRT(Zero))
   125ec:	000177b7          	lui	a5,0x17
   125f0:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   125f4:	5807f753          	fsqrt.s	fa4,fa5
   125f8:	a0e7a7d3          	feq.s	a5,fa5,fa4
   125fc:	0c078c63          	beqz	a5,126d4 <main+0x221c>
       && (- Zero == SQRT(- Zero))
   12600:	20f797d3          	fneg.s	fa5,fa5
   12604:	5807f753          	fsqrt.s	fa4,fa5
   12608:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1260c:	26078663          	beqz	a5,12878 <main+0x23c0>
       && (One == SQRT(One)), "Square root of 0.0, -0.0 or 1.0 wrong");
   12610:	000177b7          	lui	a5,0x17
   12614:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   12618:	5807f753          	fsqrt.s	fa4,fa5
  TstCond (Failure, (Zero == SQRT(Zero))
   1261c:	a0e7a7d3          	feq.s	a5,fa5,fa4
   12620:	0a079c63          	bnez	a5,126d8 <main+0x2220>
   12624:	00000493          	li	s1,0
   12628:	0b00006f          	j	126d8 <main+0x2220>
  TstCond (Flaw, !(GMult == No || GDiv == No || GAddSub == No ||
   1262c:	00000593          	li	a1,0
   12630:	eb5ff06f          	j	124e4 <main+0x202c>
   12634:	00000593          	li	a1,0
   12638:	eadff06f          	j	124e4 <main+0x202c>
   1263c:	00000593          	li	a1,0
   12640:	ea5ff06f          	j	124e4 <main+0x202c>
   12644:	00000593          	li	a1,0
   12648:	e9dff06f          	j	124e4 <main+0x202c>
   1264c:	00048593          	mv	a1,s1
   12650:	e95ff06f          	j	124e4 <main+0x202c>
    Random1 = One + Half / Three;
   12654:	000176b7          	lui	a3,0x17
   12658:	0846a787          	flw	fa5,132(a3) # 17084 <Half>
   1265c:	000176b7          	lui	a3,0x17
   12660:	0786a707          	flw	fa4,120(a3) # 17078 <Three>
   12664:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   12668:	000176b7          	lui	a3,0x17
   1266c:	0806a707          	flw	fa4,128(a3) # 17080 <One>
   12670:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   12674:	000176b7          	lui	a3,0x17
   12678:	0ef6a627          	fsw	fa5,236(a3) # 170ec <Random1>
    Random2 = (U2 + U1) + One;
   1267c:	000176b7          	lui	a3,0x17
   12680:	1086a687          	flw	fa3,264(a3) # 17108 <U2>
   12684:	000176b7          	lui	a3,0x17
   12688:	10c6a607          	flw	fa2,268(a3) # 1710c <U1>
   1268c:	00c6f6d3          	fadd.s	fa3,fa3,fa2
   12690:	00d77753          	fadd.s	fa4,fa4,fa3
   12694:	000176b7          	lui	a3,0x17
   12698:	0ce6ae27          	fsw	fa4,220(a3) # 170dc <Random2>
    Z = Random1 * Random2;
   1269c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   126a0:	000176b7          	lui	a3,0x17
   126a4:	0cf6ac27          	fsw	fa5,216(a3) # 170d8 <Z>
    Y = Random2 * Random1;
   126a8:	000176b7          	lui	a3,0x17
   126ac:	0ef6a427          	fsw	fa5,232(a3) # 170e8 <Y>
    Z9 = (One + Half / Three) * ((U2 + U1) + One) - (One + Half /
   126b0:	08f7f7d3          	fsub.s	fa5,fa5,fa5
   126b4:	000176b7          	lui	a3,0x17
   126b8:	0cf6a427          	fsw	fa5,200(a3) # 170c8 <Z9>
   126bc:	ef1ff06f          	j	125ac <main+0x20f4>
    BadCond(Defect, "X * Y == Y * X trial fails.\n");
   126c0:	000155b7          	lui	a1,0x15
   126c4:	eac58593          	addi	a1,a1,-340 # 14eac <longjmp+0xbbc>
   126c8:	00200513          	li	a0,2
   126cc:	a5dfd0ef          	jal	10128 <BadCond>
   126d0:	f05ff06f          	j	125d4 <main+0x211c>
  TstCond (Failure, (Zero == SQRT(Zero))
   126d4:	00000493          	li	s1,0
   126d8:	00015637          	lui	a2,0x15
   126dc:	f2060613          	addi	a2,a2,-224 # 14f20 <longjmp+0xc30>
   126e0:	00048593          	mv	a1,s1
   126e4:	00000513          	li	a0,0
   126e8:	aa1fd0ef          	jal	10188 <TstCond>
  MinSqEr = Zero;
   126ec:	00017937          	lui	s2,0x17
   126f0:	19892787          	flw	fa5,408(s2) # 17198 <Zero>
   126f4:	000177b7          	lui	a5,0x17
   126f8:	16f7a427          	fsw	fa5,360(a5) # 17168 <MinSqEr>
  MaxSqEr = Zero;
   126fc:	000177b7          	lui	a5,0x17
   12700:	16f7a027          	fsw	fa5,352(a5) # 17160 <MaxSqEr>
  J = Zero;
   12704:	000179b7          	lui	s3,0x17
   12708:	12f9ae27          	fsw	fa5,316(s3) # 1713c <J>
  X = Radix;
   1270c:	000174b7          	lui	s1,0x17
   12710:	000177b7          	lui	a5,0x17
   12714:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   12718:	0ef4aa27          	fsw	fa5,244(s1) # 170f4 <X>
  OneUlp = U2;
   1271c:	00017437          	lui	s0,0x17
   12720:	000177b7          	lui	a5,0x17
   12724:	1087a787          	flw	fa5,264(a5) # 17108 <U2>
   12728:	10f42a27          	fsw	fa5,276(s0) # 17114 <OneUlp>
  SqXMinX (Serious);
   1272c:	00100513          	li	a0,1
   12730:	aedfd0ef          	jal	1021c <SqXMinX>
  X = BInvrse;
   12734:	000177b7          	lui	a5,0x17
   12738:	1a07a787          	flw	fa5,416(a5) # 171a0 <BInvrse>
   1273c:	0ef4aa27          	fsw	fa5,244(s1)
  OneUlp = BInvrse * U1;
   12740:	00017a37          	lui	s4,0x17
   12744:	10ca2707          	flw	fa4,268(s4) # 1710c <U1>
   12748:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   1274c:	10f42a27          	fsw	fa5,276(s0)
  SqXMinX (Serious);
   12750:	00100513          	li	a0,1
   12754:	ac9fd0ef          	jal	1021c <SqXMinX>
  X = U1;
   12758:	10ca2787          	flw	fa5,268(s4)
   1275c:	0ef4aa27          	fsw	fa5,244(s1)
  OneUlp = U1 * U1;
   12760:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   12764:	10f42a27          	fsw	fa5,276(s0)
  SqXMinX (Serious);
   12768:	00100513          	li	a0,1
   1276c:	ab1fd0ef          	jal	1021c <SqXMinX>
  if (J != Zero) Pause();
   12770:	13c9a707          	flw	fa4,316(s3)
   12774:	19892787          	flw	fa5,408(s2)
   12778:	a0f727d3          	feq.s	a5,fa4,fa5
   1277c:	10078263          	beqz	a5,12880 <main+0x23c8>
  J = Zero;
   12780:	000177b7          	lui	a5,0x17
   12784:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   12788:	000177b7          	lui	a5,0x17
   1278c:	12f7ae27          	fsw	fa5,316(a5) # 1713c <J>
  X = Two;
   12790:	000177b7          	lui	a5,0x17
   12794:	07c7a787          	flw	fa5,124(a5) # 1707c <Two>
   12798:	000177b7          	lui	a5,0x17
   1279c:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
  Y = Radix;
   127a0:	000177b7          	lui	a5,0x17
   127a4:	1a87a687          	flw	fa3,424(a5) # 171a8 <Radix>
   127a8:	000177b7          	lui	a5,0x17
   127ac:	0ed7a427          	fsw	fa3,232(a5) # 170e8 <Y>
  if ((Radix != One)) do  {
   127b0:	000177b7          	lui	a5,0x17
   127b4:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   127b8:	a0f6a7d3          	feq.s	a5,fa3,fa5
   127bc:	02079a63          	bnez	a5,127f0 <main+0x2338>
    X = Y;
   127c0:	000177b7          	lui	a5,0x17
   127c4:	0e87a707          	flw	fa4,232(a5) # 170e8 <Y>
   127c8:	00017737          	lui	a4,0x17
   127cc:	0ee72a27          	fsw	fa4,244(a4) # 170f4 <X>
    Y = Radix * Y;
   127d0:	10e6f7d3          	fmul.s	fa5,fa3,fa4
   127d4:	0ef7a427          	fsw	fa5,232(a5)
    } while ( ! ((Y - X >= NoTrials)));
   127d8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   127dc:	000177b7          	lui	a5,0x17
   127e0:	0507a783          	lw	a5,80(a5) # 17050 <NoTrials>
   127e4:	d007f753          	fcvt.s.w	fa4,a5
   127e8:	a0f707d3          	fle.s	a5,fa4,fa5
   127ec:	fc078ae3          	beqz	a5,127c0 <main+0x2308>
  OneUlp = X * U2;
   127f0:	000177b7          	lui	a5,0x17
   127f4:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   127f8:	000177b7          	lui	a5,0x17
   127fc:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   12800:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   12804:	000177b7          	lui	a5,0x17
   12808:	10f7aa27          	fsw	fa5,276(a5) # 17114 <OneUlp>
  I = 1;
   1280c:	000177b7          	lui	a5,0x17
   12810:	00100713          	li	a4,1
   12814:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  while (I <= NoTrials) {
   12818:	000177b7          	lui	a5,0x17
   1281c:	1447a703          	lw	a4,324(a5) # 17144 <I>
   12820:	000177b7          	lui	a5,0x17
   12824:	0507a783          	lw	a5,80(a5) # 17050 <NoTrials>
   12828:	06e7c063          	blt	a5,a4,12888 <main+0x23d0>
    X = X + One;
   1282c:	000177b7          	lui	a5,0x17
   12830:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   12834:	00017737          	lui	a4,0x17
   12838:	08072707          	flw	fa4,128(a4) # 17080 <One>
   1283c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   12840:	0ef7aa27          	fsw	fa5,244(a5)
    SqXMinX (Defect);
   12844:	00200513          	li	a0,2
   12848:	9d5fd0ef          	jal	1021c <SqXMinX>
    if (J > Zero) break;
   1284c:	000177b7          	lui	a5,0x17
   12850:	13c7a707          	flw	fa4,316(a5) # 1713c <J>
   12854:	000177b7          	lui	a5,0x17
   12858:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   1285c:	a0e797d3          	flt.s	a5,fa5,fa4
   12860:	02079463          	bnez	a5,12888 <main+0x23d0>
    I = I + 1;
   12864:	00017737          	lui	a4,0x17
   12868:	14472783          	lw	a5,324(a4) # 17144 <I>
   1286c:	00178793          	addi	a5,a5,1
   12870:	14f72223          	sw	a5,324(a4)
   12874:	fa5ff06f          	j	12818 <main+0x2360>
  TstCond (Failure, (Zero == SQRT(Zero))
   12878:	00000493          	li	s1,0
   1287c:	e5dff06f          	j	126d8 <main+0x2220>
  if (J != Zero) Pause();
   12880:	861fd0ef          	jal	100e0 <Pause>
   12884:	efdff06f          	j	12780 <main+0x22c8>
  write_string("Test for sqrt monotonicity.\n");
   12888:	00015537          	lui	a0,0x15
   1288c:	f4850513          	addi	a0,a0,-184 # 14f48 <longjmp+0xc58>
   12890:	f9cfd0ef          	jal	1002c <write_string>
  I = - 1;
   12894:	000177b7          	lui	a5,0x17
   12898:	fff00713          	li	a4,-1
   1289c:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  X = BMinusU2;
   128a0:	000177b7          	lui	a5,0x17
   128a4:	19c7a787          	flw	fa5,412(a5) # 1719c <BMinusU2>
   128a8:	000177b7          	lui	a5,0x17
   128ac:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
  Y = Radix;
   128b0:	000177b7          	lui	a5,0x17
   128b4:	1a87a487          	flw	fs1,424(a5) # 171a8 <Radix>
   128b8:	000177b7          	lui	a5,0x17
   128bc:	0e97a427          	fsw	fs1,232(a5) # 170e8 <Y>
  Z = Radix + Radix * U2;
   128c0:	000177b7          	lui	a5,0x17
   128c4:	1087a907          	flw	fs2,264(a5) # 17108 <U2>
   128c8:	1124f7d3          	fmul.s	fa5,fs1,fs2
   128cc:	00f4f7d3          	fadd.s	fa5,fs1,fa5
   128d0:	000177b7          	lui	a5,0x17
   128d4:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  NotMonot = False;
   128d8:	000177b7          	lui	a5,0x17
   128dc:	0807aa23          	sw	zero,148(a5) # 17094 <NotMonot>
  Monot = False;
   128e0:	000177b7          	lui	a5,0x17
   128e4:	0807a823          	sw	zero,144(a5) # 17090 <Monot>
  while ( ! (NotMonot || Monot)) {
   128e8:	0100006f          	j	128f8 <main+0x2440>
    if ((X > Q) || (Q > Z)) NotMonot = True;
   128ec:	000177b7          	lui	a5,0x17
   128f0:	00100713          	li	a4,1
   128f4:	08e7aa23          	sw	a4,148(a5) # 17094 <NotMonot>
  while ( ! (NotMonot || Monot)) {
   128f8:	000177b7          	lui	a5,0x17
   128fc:	0947a783          	lw	a5,148(a5) # 17094 <NotMonot>
   12900:	10079a63          	bnez	a5,12a14 <main+0x255c>
   12904:	000177b7          	lui	a5,0x17
   12908:	0907a783          	lw	a5,144(a5) # 17090 <Monot>
   1290c:	10079463          	bnez	a5,12a14 <main+0x255c>
    I = I + 1;
   12910:	000177b7          	lui	a5,0x17
   12914:	1447a403          	lw	s0,324(a5) # 17144 <I>
   12918:	00140413          	addi	s0,s0,1
   1291c:	1487a223          	sw	s0,324(a5)
    X = SQRT(X);
   12920:	000177b7          	lui	a5,0x17
   12924:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   12928:	5807f7d3          	fsqrt.s	fa5,fa5
   1292c:	0ef7aa27          	fsw	fa5,244(a5)
    Q = SQRT(Y);
   12930:	000177b7          	lui	a5,0x17
   12934:	0e87a407          	flw	fs0,232(a5) # 170e8 <Y>
   12938:	580476d3          	fsqrt.s	fa3,fs0
   1293c:	000177b7          	lui	a5,0x17
   12940:	12d7a827          	fsw	fa3,304(a5) # 17130 <Q>
    Z = SQRT(Z);
   12944:	000177b7          	lui	a5,0x17
   12948:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   1294c:	58077753          	fsqrt.s	fa4,fa4
   12950:	0ce7ac27          	fsw	fa4,216(a5)
    if ((X > Q) || (Q > Z)) NotMonot = True;
   12954:	a0f697d3          	flt.s	a5,fa3,fa5
   12958:	f8079ae3          	bnez	a5,128ec <main+0x2434>
   1295c:	a0d717d3          	flt.s	a5,fa4,fa3
   12960:	f80796e3          	bnez	a5,128ec <main+0x2434>
      Q = FLOOR(Q + Half);
   12964:	000177b7          	lui	a5,0x17
   12968:	0847a507          	flw	fa0,132(a5) # 17084 <Half>
   1296c:	00a6f553          	fadd.s	fa0,fa3,fa0
   12970:	045010ef          	jal	141b4 <floorf>
   12974:	000177b7          	lui	a5,0x17
   12978:	12a7a827          	fsw	fa0,304(a5) # 17130 <Q>
      if (!(I > 0 || Radix == Q * Q)) Monot = True;
   1297c:	02805063          	blez	s0,1299c <main+0x24e4>
      else if (I > 0) {
   12980:	06805863          	blez	s0,129f0 <main+0x2538>
      if (I > 1) Monot = True;
   12984:	00100793          	li	a5,1
   12988:	0287d863          	bge	a5,s0,129b8 <main+0x2500>
   1298c:	000177b7          	lui	a5,0x17
   12990:	00100713          	li	a4,1
   12994:	08e7a823          	sw	a4,144(a5) # 17090 <Monot>
   12998:	f61ff06f          	j	128f8 <main+0x2440>
      if (!(I > 0 || Radix == Q * Q)) Monot = True;
   1299c:	10a577d3          	fmul.s	fa5,fa0,fa0
   129a0:	a0f4a7d3          	feq.s	a5,fs1,fa5
   129a4:	fc079ee3          	bnez	a5,12980 <main+0x24c8>
   129a8:	000177b7          	lui	a5,0x17
   129ac:	00100713          	li	a4,1
   129b0:	08e7a823          	sw	a4,144(a5) # 17090 <Monot>
   129b4:	f45ff06f          	j	128f8 <main+0x2440>
        Y = Y * BInvrse;
   129b8:	000177b7          	lui	a5,0x17
   129bc:	1a07a787          	flw	fa5,416(a5) # 171a0 <BInvrse>
   129c0:	10f47453          	fmul.s	fs0,fs0,fa5
   129c4:	000177b7          	lui	a5,0x17
   129c8:	0e87a427          	fsw	fs0,232(a5) # 170e8 <Y>
        X = Y - U1;
   129cc:	000177b7          	lui	a5,0x17
   129d0:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   129d4:	08f47753          	fsub.s	fa4,fs0,fa5
   129d8:	000177b7          	lui	a5,0x17
   129dc:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
        Z = Y + U1;
   129e0:	00f47453          	fadd.s	fs0,fs0,fa5
   129e4:	000177b7          	lui	a5,0x17
   129e8:	0c87ac27          	fsw	fs0,216(a5) # 170d8 <Z>
   129ec:	f0dff06f          	j	128f8 <main+0x2440>
        Y = Q;
   129f0:	000177b7          	lui	a5,0x17
   129f4:	0ea7a427          	fsw	fa0,232(a5) # 170e8 <Y>
        X = Y - U2;
   129f8:	092577d3          	fsub.s	fa5,fa0,fs2
   129fc:	000177b7          	lui	a5,0x17
   12a00:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
        Z = Y + U2;
   12a04:	00a97553          	fadd.s	fa0,fs2,fa0
   12a08:	000177b7          	lui	a5,0x17
   12a0c:	0ca7ac27          	fsw	fa0,216(a5) # 170d8 <Z>
   12a10:	ee9ff06f          	j	128f8 <main+0x2440>
  if (Monot) write_string("sqrt has passed a test for Monotonicity.\n");
   12a14:	000177b7          	lui	a5,0x17
   12a18:	0907a783          	lw	a5,144(a5) # 17090 <Monot>
   12a1c:	14078863          	beqz	a5,12b6c <main+0x26b4>
   12a20:	00015537          	lui	a0,0x15
   12a24:	f6850513          	addi	a0,a0,-152 # 14f68 <longjmp+0xc78>
   12a28:	e04fd0ef          	jal	1002c <write_string>
  Milestone = 80;
   12a2c:	000177b7          	lui	a5,0x17
   12a30:	05000713          	li	a4,80
   12a34:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  MinSqEr = MinSqEr + Half;
   12a38:	000177b7          	lui	a5,0x17
   12a3c:	0847a407          	flw	fs0,132(a5) # 17084 <Half>
   12a40:	000177b7          	lui	a5,0x17
   12a44:	1687a607          	flw	fa2,360(a5) # 17168 <MinSqEr>
   12a48:	00c47653          	fadd.s	fa2,fs0,fa2
   12a4c:	16c7a427          	fsw	fa2,360(a5)
  MaxSqEr = MaxSqEr - Half;
   12a50:	000177b7          	lui	a5,0x17
   12a54:	1607a587          	flw	fa1,352(a5) # 17160 <MaxSqEr>
   12a58:	0885f5d3          	fsub.s	fa1,fa1,fs0
   12a5c:	16b7a027          	fsw	fa1,352(a5)
  Y = (SQRT(One + U2) - One) / U2;
   12a60:	000177b7          	lui	a5,0x17
   12a64:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   12a68:	000177b7          	lui	a5,0x17
   12a6c:	1087a987          	flw	fs3,264(a5) # 17108 <U2>
   12a70:	013777d3          	fadd.s	fa5,fa4,fs3
   12a74:	5807f7d3          	fsqrt.s	fa5,fa5
   12a78:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   12a7c:	1937f7d3          	fdiv.s	fa5,fa5,fs3
   12a80:	000177b7          	lui	a5,0x17
   12a84:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  SqEr = (Y - One) + U2 / Eight;
   12a88:	08e7f6d3          	fsub.s	fa3,fa5,fa4
   12a8c:	000177b7          	lui	a5,0x17
   12a90:	06c7aa87          	flw	fs5,108(a5) # 1706c <Eight>
   12a94:	1959f553          	fdiv.s	fa0,fs3,fs5
   12a98:	00a6f6d3          	fadd.s	fa3,fa3,fa0
   12a9c:	000177b7          	lui	a5,0x17
   12aa0:	16d7a227          	fsw	fa3,356(a5) # 17164 <SqEr>
  if (SqEr > MaxSqEr) MaxSqEr = SqEr;
   12aa4:	a0d597d3          	flt.s	a5,fa1,fa3
   12aa8:	00078663          	beqz	a5,12ab4 <main+0x25fc>
   12aac:	000177b7          	lui	a5,0x17
   12ab0:	16d7a027          	fsw	fa3,352(a5) # 17160 <MaxSqEr>
  SqEr = Y + U2 / Eight;
   12ab4:	00a7f7d3          	fadd.s	fa5,fa5,fa0
   12ab8:	000177b7          	lui	a5,0x17
   12abc:	16f7a227          	fsw	fa5,356(a5) # 17164 <SqEr>
  if (SqEr < MinSqEr) MinSqEr = SqEr;
   12ac0:	a0c797d3          	flt.s	a5,fa5,fa2
   12ac4:	00078663          	beqz	a5,12ad0 <main+0x2618>
   12ac8:	000177b7          	lui	a5,0x17
   12acc:	16f7a427          	fsw	fa5,360(a5) # 17168 <MinSqEr>
  Y = ((SQRT(F9) - U2) - (One - U2)) / U1;
   12ad0:	000177b7          	lui	a5,0x17
   12ad4:	1507a907          	flw	fs2,336(a5) # 17150 <F9>
   12ad8:	580977d3          	fsqrt.s	fa5,fs2
   12adc:	0937f7d3          	fsub.s	fa5,fa5,fs3
   12ae0:	09377a53          	fsub.s	fs4,fa4,fs3
   12ae4:	0947f7d3          	fsub.s	fa5,fa5,fs4
   12ae8:	000177b7          	lui	a5,0x17
   12aec:	10c7a487          	flw	fs1,268(a5) # 1710c <U1>
   12af0:	1897f7d3          	fdiv.s	fa5,fa5,fs1
   12af4:	000177b7          	lui	a5,0x17
   12af8:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  SqEr = Y + U1 / Eight;
   12afc:	1954f6d3          	fdiv.s	fa3,fs1,fs5
   12b00:	00d7f653          	fadd.s	fa2,fa5,fa3
   12b04:	000177b7          	lui	a5,0x17
   12b08:	16c7a227          	fsw	fa2,356(a5) # 17164 <SqEr>
  if (SqEr > MaxSqEr) MaxSqEr = SqEr;
   12b0c:	000177b7          	lui	a5,0x17
   12b10:	1607a587          	flw	fa1,352(a5) # 17160 <MaxSqEr>
   12b14:	a0c597d3          	flt.s	a5,fa1,fa2
   12b18:	00078663          	beqz	a5,12b24 <main+0x266c>
   12b1c:	000177b7          	lui	a5,0x17
   12b20:	16c7a027          	fsw	fa2,352(a5) # 17160 <MaxSqEr>
  SqEr = (Y + One) + U1 / Eight;
   12b24:	00f77753          	fadd.s	fa4,fa4,fa5
   12b28:	00e6f7d3          	fadd.s	fa5,fa3,fa4
   12b2c:	000177b7          	lui	a5,0x17
   12b30:	16f7a227          	fsw	fa5,356(a5) # 17164 <SqEr>
  if (SqEr < MinSqEr) MinSqEr = SqEr;
   12b34:	000177b7          	lui	a5,0x17
   12b38:	1687a707          	flw	fa4,360(a5) # 17168 <MinSqEr>
   12b3c:	a0e797d3          	flt.s	a5,fa5,fa4
   12b40:	00078663          	beqz	a5,12b4c <main+0x2694>
   12b44:	000177b7          	lui	a5,0x17
   12b48:	16f7a427          	fsw	fa5,360(a5) # 17168 <MinSqEr>
  OneUlp = U2;
   12b4c:	000177b7          	lui	a5,0x17
   12b50:	1137aa27          	fsw	fs3,276(a5) # 17114 <OneUlp>
  X = OneUlp;
   12b54:	000177b7          	lui	a5,0x17
   12b58:	0f37aa27          	fsw	fs3,244(a5) # 170f4 <X>
  for( Indx = 1; Indx <= 3; ++Indx) {
   12b5c:	000177b7          	lui	a5,0x17
   12b60:	00100713          	li	a4,1
   12b64:	18e7aa23          	sw	a4,404(a5) # 17194 <Indx>
   12b68:	05c0006f          	j	12bc4 <main+0x270c>
    BadCond(Defect, "");
   12b6c:	000145b7          	lui	a1,0x14
   12b70:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   12b74:	00200513          	li	a0,2
   12b78:	db0fd0ef          	jal	10128 <BadCond>
    write_string("sqrt(X) is non-monotonic for X near %.7e .\n");
   12b7c:	00015537          	lui	a0,0x15
   12b80:	f9450513          	addi	a0,a0,-108 # 14f94 <longjmp+0xca4>
   12b84:	ca8fd0ef          	jal	1002c <write_string>
   12b88:	ea5ff06f          	j	12a2c <main+0x2574>
      X = OneUlp * Sign (X) * FLOOR(Eight / (Nine * SQRT(OneUlp)));
   12b8c:	d30fd0ef          	jal	100bc <Sign>
   12b90:	10ab7bd3          	fmul.s	fs7,fs6,fa0
   12b94:	580b7b53          	fsqrt.s	fs6,fs6
   12b98:	000177b7          	lui	a5,0x17
   12b9c:	0687a787          	flw	fa5,104(a5) # 17068 <Nine>
   12ba0:	10fb7553          	fmul.s	fa0,fs6,fa5
   12ba4:	18aaf553          	fdiv.s	fa0,fs5,fa0
   12ba8:	60c010ef          	jal	141b4 <floorf>
   12bac:	10abfbd3          	fmul.s	fs7,fs7,fa0
   12bb0:	000177b7          	lui	a5,0x17
   12bb4:	0f77aa27          	fsw	fs7,244(a5) # 170f4 <X>
  for( Indx = 1; Indx <= 3; ++Indx) {
   12bb8:	00140413          	addi	s0,s0,1
   12bbc:	000177b7          	lui	a5,0x17
   12bc0:	1887aa23          	sw	s0,404(a5) # 17194 <Indx>
   12bc4:	000177b7          	lui	a5,0x17
   12bc8:	1947a403          	lw	s0,404(a5) # 17194 <Indx>
   12bcc:	00300793          	li	a5,3
   12bd0:	0c87cc63          	blt	a5,s0,12ca8 <main+0x27f0>
    Y = SQRT((X + U1 + X) + F9);
   12bd4:	000177b7          	lui	a5,0x17
   12bd8:	0f47a507          	flw	fa0,244(a5) # 170f4 <X>
   12bdc:	00a4f7d3          	fadd.s	fa5,fs1,fa0
   12be0:	00f577d3          	fadd.s	fa5,fa0,fa5
   12be4:	00f977d3          	fadd.s	fa5,fs2,fa5
   12be8:	5807f7d3          	fsqrt.s	fa5,fa5
   12bec:	000177b7          	lui	a5,0x17
   12bf0:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
    Y = ((Y - U2) - ((One - U2) + X)) / OneUlp;
   12bf4:	0937f7d3          	fsub.s	fa5,fa5,fs3
   12bf8:	00aa7753          	fadd.s	fa4,fs4,fa0
   12bfc:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   12c00:	00017737          	lui	a4,0x17
   12c04:	11472b07          	flw	fs6,276(a4) # 17114 <OneUlp>
   12c08:	1967f7d3          	fdiv.s	fa5,fa5,fs6
   12c0c:	0ef7a427          	fsw	fa5,232(a5)
    Z = ((U1 - X) + F9) * Half * X * X / OneUlp;
   12c10:	08a4f753          	fsub.s	fa4,fs1,fa0
   12c14:	00e97753          	fadd.s	fa4,fs2,fa4
   12c18:	10e47753          	fmul.s	fa4,fs0,fa4
   12c1c:	10e57753          	fmul.s	fa4,fa0,fa4
   12c20:	10e57753          	fmul.s	fa4,fa0,fa4
   12c24:	19677753          	fdiv.s	fa4,fa4,fs6
   12c28:	000177b7          	lui	a5,0x17
   12c2c:	0ce7ac27          	fsw	fa4,216(a5) # 170d8 <Z>
    SqEr = (Y + Half) + Z;
   12c30:	00f476d3          	fadd.s	fa3,fs0,fa5
   12c34:	00d776d3          	fadd.s	fa3,fa4,fa3
   12c38:	000177b7          	lui	a5,0x17
   12c3c:	16d7a227          	fsw	fa3,356(a5) # 17164 <SqEr>
    if (SqEr < MinSqEr) MinSqEr = SqEr;
   12c40:	000177b7          	lui	a5,0x17
   12c44:	1687a607          	flw	fa2,360(a5) # 17168 <MinSqEr>
   12c48:	a0c697d3          	flt.s	a5,fa3,fa2
   12c4c:	00078663          	beqz	a5,12c58 <main+0x27a0>
   12c50:	000177b7          	lui	a5,0x17
   12c54:	16d7a427          	fsw	fa3,360(a5) # 17168 <MinSqEr>
    SqEr = (Y - Half) + Z;
   12c58:	0887f7d3          	fsub.s	fa5,fa5,fs0
   12c5c:	00f77753          	fadd.s	fa4,fa4,fa5
   12c60:	000177b7          	lui	a5,0x17
   12c64:	16e7a227          	fsw	fa4,356(a5) # 17164 <SqEr>
    if (SqEr > MaxSqEr) MaxSqEr = SqEr;
   12c68:	000177b7          	lui	a5,0x17
   12c6c:	1607a787          	flw	fa5,352(a5) # 17160 <MaxSqEr>
   12c70:	a0e797d3          	flt.s	a5,fa5,fa4
   12c74:	00078663          	beqz	a5,12c80 <main+0x27c8>
   12c78:	000177b7          	lui	a5,0x17
   12c7c:	16e7a027          	fsw	fa4,352(a5) # 17160 <MaxSqEr>
    if (((Indx == 1) || (Indx == 3))) 
   12c80:	00100793          	li	a5,1
   12c84:	f0f404e3          	beq	s0,a5,12b8c <main+0x26d4>
   12c88:	00300793          	li	a5,3
   12c8c:	f0f400e3          	beq	s0,a5,12b8c <main+0x26d4>
      OneUlp = U1;
   12c90:	000177b7          	lui	a5,0x17
   12c94:	1097aa27          	fsw	fs1,276(a5) # 17114 <OneUlp>
      X = - OneUlp;
   12c98:	209497d3          	fneg.s	fa5,fs1
   12c9c:	000177b7          	lui	a5,0x17
   12ca0:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
   12ca4:	f15ff06f          	j	12bb8 <main+0x2700>
  Milestone = 85;
   12ca8:	000177b7          	lui	a5,0x17
   12cac:	05500713          	li	a4,85
   12cb0:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Milestone = 90;
   12cb4:	05a00713          	li	a4,90
   12cb8:	0ce7a023          	sw	a4,192(a5)
    Milestone = 100;
   12cbc:	06400713          	li	a4,100
   12cc0:	0ce7a023          	sw	a4,192(a5)
  Milestone = 110;
   12cc4:	06e00713          	li	a4,110
   12cc8:	0ce7a023          	sw	a4,192(a5)
  write_string("Seeking Underflow thresholds UfThold and E0.\n");
   12ccc:	00015537          	lui	a0,0x15
   12cd0:	fc050513          	addi	a0,a0,-64 # 14fc0 <longjmp+0xcd0>
   12cd4:	b58fd0ef          	jal	1002c <write_string>
  D = U1;
   12cd8:	000177b7          	lui	a5,0x17
   12cdc:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   12ce0:	000177b7          	lui	a5,0x17
   12ce4:	16f7ac27          	fsw	fa5,376(a5) # 17178 <D>
  if (Precision != FLOOR(Precision)) {
   12ce8:	000177b7          	lui	a5,0x17
   12cec:	1347a407          	flw	fs0,308(a5) # 17134 <Precision>
   12cf0:	20840553          	fmv.s	fa0,fs0
   12cf4:	4c0010ef          	jal	141b4 <floorf>
   12cf8:	a0a427d3          	feq.s	a5,fs0,fa0
   12cfc:	04079a63          	bnez	a5,12d50 <main+0x2898>
    D = BInvrse;
   12d00:	000177b7          	lui	a5,0x17
   12d04:	1a07a687          	flw	fa3,416(a5) # 171a0 <BInvrse>
   12d08:	000177b7          	lui	a5,0x17
   12d0c:	16d7ac27          	fsw	fa3,376(a5) # 17178 <D>
    X = Precision;
   12d10:	000177b7          	lui	a5,0x17
   12d14:	0e87aa27          	fsw	fs0,244(a5) # 170f4 <X>
      D = D * BInvrse;
   12d18:	000177b7          	lui	a5,0x17
   12d1c:	1787a787          	flw	fa5,376(a5) # 17178 <D>
   12d20:	10f6f7d3          	fmul.s	fa5,fa3,fa5
   12d24:	16f7ac27          	fsw	fa5,376(a5)
      X = X - One;
   12d28:	000177b7          	lui	a5,0x17
   12d2c:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   12d30:	00017737          	lui	a4,0x17
   12d34:	08072707          	flw	fa4,128(a4) # 17080 <One>
   12d38:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   12d3c:	0ef7aa27          	fsw	fa5,244(a5)
      } while ( X > Zero);
   12d40:	000177b7          	lui	a5,0x17
   12d44:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   12d48:	a0f717d3          	flt.s	a5,fa4,fa5
   12d4c:	fc0796e3          	bnez	a5,12d18 <main+0x2860>
  Y = One;
   12d50:	000177b7          	lui	a5,0x17
   12d54:	0807a507          	flw	fa0,128(a5) # 17080 <One>
   12d58:	000177b7          	lui	a5,0x17
   12d5c:	0ea7a427          	fsw	fa0,232(a5) # 170e8 <Y>
  Z = D;
   12d60:	000177b7          	lui	a5,0x17
   12d64:	1787a607          	flw	fa2,376(a5) # 17178 <D>
   12d68:	000177b7          	lui	a5,0x17
   12d6c:	0cc7ac27          	fsw	fa2,216(a5) # 170d8 <Z>
    C = Y;
   12d70:	00017737          	lui	a4,0x17
   12d74:	0e872687          	flw	fa3,232(a4) # 170e8 <Y>
   12d78:	000177b7          	lui	a5,0x17
   12d7c:	18d7a027          	fsw	fa3,384(a5) # 17180 <C>
    Y = Z;
   12d80:	000177b7          	lui	a5,0x17
   12d84:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   12d88:	0ee72427          	fsw	fa4,232(a4)
    Z = Y * Y;
   12d8c:	10e777d3          	fmul.s	fa5,fa4,fa4
   12d90:	0cf7ac27          	fsw	fa5,216(a5)
    } while ((Y > Z) && (Z + Z > Z));
   12d94:	a0e797d3          	flt.s	a5,fa5,fa4
   12d98:	00078863          	beqz	a5,12da8 <main+0x28f0>
   12d9c:	00f7f753          	fadd.s	fa4,fa5,fa5
   12da0:	a0e797d3          	flt.s	a5,fa5,fa4
   12da4:	fc0796e3          	bnez	a5,12d70 <main+0x28b8>
  Y = C;
   12da8:	000177b7          	lui	a5,0x17
   12dac:	0ed7a427          	fsw	fa3,232(a5) # 170e8 <Y>
  Z = Y * D;
   12db0:	10d676d3          	fmul.s	fa3,fa2,fa3
   12db4:	000177b7          	lui	a5,0x17
   12db8:	0cd7ac27          	fsw	fa3,216(a5) # 170d8 <Z>
    C = Y;
   12dbc:	00017737          	lui	a4,0x17
   12dc0:	0e872687          	flw	fa3,232(a4) # 170e8 <Y>
   12dc4:	000177b7          	lui	a5,0x17
   12dc8:	18d7a027          	fsw	fa3,384(a5) # 17180 <C>
    Y = Z;
   12dcc:	000177b7          	lui	a5,0x17
   12dd0:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   12dd4:	0ee72427          	fsw	fa4,232(a4)
    Z = Y * D;
   12dd8:	10e677d3          	fmul.s	fa5,fa2,fa4
   12ddc:	0cf7ac27          	fsw	fa5,216(a5)
    } while ((Y > Z) && (Z + Z > Z));
   12de0:	a0e797d3          	flt.s	a5,fa5,fa4
   12de4:	00078863          	beqz	a5,12df4 <main+0x293c>
   12de8:	00f7f753          	fadd.s	fa4,fa5,fa5
   12dec:	a0e797d3          	flt.s	a5,fa5,fa4
   12df0:	fc0796e3          	bnez	a5,12dbc <main+0x2904>
  if (Radix < Two) HInvrse = Two;
   12df4:	000177b7          	lui	a5,0x17
   12df8:	1a87a107          	flw	ft2,424(a5) # 171a8 <Radix>
   12dfc:	000177b7          	lui	a5,0x17
   12e00:	07c7a787          	flw	fa5,124(a5) # 1707c <Two>
   12e04:	a0f117d3          	flt.s	a5,ft2,fa5
   12e08:	2a078c63          	beqz	a5,130c0 <main+0x2c08>
   12e0c:	000177b7          	lui	a5,0x17
   12e10:	14f7a427          	fsw	fa5,328(a5) # 17148 <HInvrse>
  H = One / HInvrse;
   12e14:	000177b7          	lui	a5,0x17
   12e18:	1487a087          	flw	ft1,328(a5) # 17148 <HInvrse>
   12e1c:	181575d3          	fdiv.s	fa1,fa0,ft1
   12e20:	000177b7          	lui	a5,0x17
   12e24:	14b7a627          	fsw	fa1,332(a5) # 1714c <H>
  CInvrse = One / C;
   12e28:	18d577d3          	fdiv.s	fa5,fa0,fa3
   12e2c:	000177b7          	lui	a5,0x17
   12e30:	16f7ae27          	fsw	fa5,380(a5) # 1717c <CInvrse>
  E0 = C;
   12e34:	000177b7          	lui	a5,0x17
   12e38:	16d7aa27          	fsw	fa3,372(a5) # 17174 <E0>
  Z = E0 * H;
   12e3c:	10b6f7d3          	fmul.s	fa5,fa3,fa1
   12e40:	000177b7          	lui	a5,0x17
   12e44:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    Y = E0;
   12e48:	00017737          	lui	a4,0x17
   12e4c:	17472787          	flw	fa5,372(a4) # 17174 <E0>
   12e50:	000177b7          	lui	a5,0x17
   12e54:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
    E0 = Z;
   12e58:	000177b7          	lui	a5,0x17
   12e5c:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   12e60:	16e72a27          	fsw	fa4,372(a4)
    Z = E0 * H;
   12e64:	10e5f7d3          	fmul.s	fa5,fa1,fa4
   12e68:	0cf7ac27          	fsw	fa5,216(a5)
    } while ((E0 > Z) && (Z + Z > Z));
   12e6c:	a0e797d3          	flt.s	a5,fa5,fa4
   12e70:	00078863          	beqz	a5,12e80 <main+0x29c8>
   12e74:	00f7f653          	fadd.s	fa2,fa5,fa5
   12e78:	a0c797d3          	flt.s	a5,fa5,fa2
   12e7c:	fc0796e3          	bnez	a5,12e48 <main+0x2990>
  UfThold = E0;
   12e80:	000177b7          	lui	a5,0x17
   12e84:	10e7a827          	fsw	fa4,272(a5) # 17110 <UfThold>
  E1 = Zero;
   12e88:	000177b7          	lui	a5,0x17
   12e8c:	1987a007          	flw	ft0,408(a5) # 17198 <Zero>
   12e90:	000177b7          	lui	a5,0x17
   12e94:	1607a827          	fsw	ft0,368(a5) # 17170 <E1>
  Q = Zero;
   12e98:	000177b7          	lui	a5,0x17
   12e9c:	1207a827          	fsw	ft0,304(a5) # 17130 <Q>
  E9 = U2;
   12ea0:	000177b7          	lui	a5,0x17
   12ea4:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   12ea8:	000177b7          	lui	a5,0x17
   12eac:	14e7ae27          	fsw	fa4,348(a5) # 1715c <E9>
  S = One + E9;
   12eb0:	00e577d3          	fadd.s	fa5,fa0,fa4
   12eb4:	000177b7          	lui	a5,0x17
   12eb8:	10f7ac27          	fsw	fa5,280(a5) # 17118 <S>
  D = C * S;
   12ebc:	10f6f7d3          	fmul.s	fa5,fa3,fa5
   12ec0:	000177b7          	lui	a5,0x17
   12ec4:	16f7ac27          	fsw	fa5,376(a5) # 17178 <D>
  if (D <= C) {
   12ec8:	a0d787d3          	fle.s	a5,fa5,fa3
   12ecc:	24078463          	beqz	a5,13114 <main+0x2c5c>
    E9 = Radix * U2;
   12ed0:	10e17153          	fmul.s	ft2,ft2,fa4
   12ed4:	000177b7          	lui	a5,0x17
   12ed8:	1427ae27          	fsw	ft2,348(a5) # 1715c <E9>
    S = One + E9;
   12edc:	002577d3          	fadd.s	fa5,fa0,ft2
   12ee0:	000177b7          	lui	a5,0x17
   12ee4:	10f7ac27          	fsw	fa5,280(a5) # 17118 <S>
    D = C * S;
   12ee8:	10f6f7d3          	fmul.s	fa5,fa3,fa5
   12eec:	000177b7          	lui	a5,0x17
   12ef0:	16f7ac27          	fsw	fa5,376(a5) # 17178 <D>
    if (D <= C) {
   12ef4:	a0d787d3          	fle.s	a5,fa5,fa3
   12ef8:	1c079a63          	bnez	a5,130cc <main+0x2c14>
  if (PseudoZero != Zero) {
   12efc:	000177b7          	lui	a5,0x17
   12f00:	0d47a707          	flw	fa4,212(a5) # 170d4 <PseudoZero>
   12f04:	000177b7          	lui	a5,0x17
   12f08:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   12f0c:	a0f727d3          	feq.s	a5,fa4,fa5
   12f10:	2a078e63          	beqz	a5,131cc <main+0x2d14>
  Milestone = 120;
   12f14:	000177b7          	lui	a5,0x17
   12f18:	07800713          	li	a4,120
   12f1c:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  if ( CInvrse * Y > CInvrse * Y1 )
   12f20:	000177b7          	lui	a5,0x17
   12f24:	17c7a787          	flw	fa5,380(a5) # 1717c <CInvrse>
   12f28:	000177b7          	lui	a5,0x17
   12f2c:	0e87a707          	flw	fa4,232(a5) # 170e8 <Y>
   12f30:	10e7f753          	fmul.s	fa4,fa5,fa4
   12f34:	000177b7          	lui	a5,0x17
   12f38:	0e47a687          	flw	fa3,228(a5) # 170e4 <Y1>
   12f3c:	10d7f7d3          	fmul.s	fa5,fa5,fa3
   12f40:	a0e797d3          	flt.s	a5,fa5,fa4
   12f44:	02078663          	beqz	a5,12f70 <main+0x2ab8>
    S = H * S;
   12f48:	000177b7          	lui	a5,0x17
   12f4c:	00017737          	lui	a4,0x17
   12f50:	14c72787          	flw	fa5,332(a4) # 1714c <H>
   12f54:	1187a707          	flw	fa4,280(a5) # 17118 <S>
   12f58:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   12f5c:	10f7ac27          	fsw	fa5,280(a5)
    E0 = Underflow;
   12f60:	000177b7          	lui	a5,0x17
   12f64:	11c7a787          	flw	fa5,284(a5) # 1711c <Underflow>
   12f68:	000177b7          	lui	a5,0x17
   12f6c:	16f7aa27          	fsw	fa5,372(a5) # 17174 <E0>
  if ( ! ((E1 == Zero) || (E1 == E0)) )
   12f70:	000177b7          	lui	a5,0x17
   12f74:	1707a787          	flw	fa5,368(a5) # 17170 <E1>
   12f78:	000177b7          	lui	a5,0x17
   12f7c:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   12f80:	a0e7a7d3          	feq.s	a5,fa5,fa4
   12f84:	00079a63          	bnez	a5,12f98 <main+0x2ae0>
   12f88:	000177b7          	lui	a5,0x17
   12f8c:	1747a707          	flw	fa4,372(a5) # 17174 <E0>
   12f90:	a0e7a7d3          	feq.s	a5,fa5,fa4
   12f94:	2e078263          	beqz	a5,13278 <main+0x2dc0>
  write_string("Smallest strictly positive number found is E0 = %g .\n");
   12f98:	00015537          	lui	a0,0x15
   12f9c:	19850513          	addi	a0,a0,408 # 15198 <longjmp+0xea8>
   12fa0:	88cfd0ef          	jal	1002c <write_string>
  Z = E0;
   12fa4:	00017437          	lui	s0,0x17
   12fa8:	17442787          	flw	fa5,372(s0) # 17174 <E0>
   12fac:	000177b7          	lui	a5,0x17
   12fb0:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  TstPtUf();
   12fb4:	b20fd0ef          	jal	102d4 <TstPtUf>
  Underflow = E0;
   12fb8:	17442607          	flw	fa2,372(s0)
   12fbc:	000177b7          	lui	a5,0x17
   12fc0:	10c7ae27          	fsw	fa2,284(a5) # 1711c <Underflow>
  if (N == 1) Underflow = Y;
   12fc4:	000177b7          	lui	a5,0x17
   12fc8:	0b87a703          	lw	a4,184(a5) # 170b8 <N>
   12fcc:	00100793          	li	a5,1
   12fd0:	32f70863          	beq	a4,a5,13300 <main+0x2e48>
  I = 4;
   12fd4:	000177b7          	lui	a5,0x17
   12fd8:	00400713          	li	a4,4
   12fdc:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  if (E1 == Zero) I = 3;
   12fe0:	000177b7          	lui	a5,0x17
   12fe4:	1707a687          	flw	fa3,368(a5) # 17170 <E1>
   12fe8:	000177b7          	lui	a5,0x17
   12fec:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   12ff0:	a0f6a7d3          	feq.s	a5,fa3,fa5
   12ff4:	00078863          	beqz	a5,13004 <main+0x2b4c>
   12ff8:	000177b7          	lui	a5,0x17
   12ffc:	00300713          	li	a4,3
   13000:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  if (UfThold == Zero) I = I - 2;
   13004:	000177b7          	lui	a5,0x17
   13008:	1107a707          	flw	fa4,272(a5) # 17110 <UfThold>
   1300c:	a0e7a7d3          	feq.s	a5,fa5,fa4
   13010:	00078a63          	beqz	a5,13024 <main+0x2b6c>
   13014:	00017737          	lui	a4,0x17
   13018:	14472783          	lw	a5,324(a4) # 17144 <I>
   1301c:	ffe78793          	addi	a5,a5,-2
   13020:	14f72223          	sw	a5,324(a4)
  UfNGrad = True;
   13024:	000177b7          	lui	a5,0x17
   13028:	00100713          	li	a4,1
   1302c:	08e7a423          	sw	a4,136(a5) # 17088 <UfNGrad>
  switch (I)  {
   13030:	000177b7          	lui	a5,0x17
   13034:	1447a783          	lw	a5,324(a5) # 17144 <I>
   13038:	00200713          	li	a4,2
   1303c:	2ce78c63          	beq	a5,a4,13314 <main+0x2e5c>
   13040:	00400713          	li	a4,4
   13044:	54e78863          	beq	a5,a4,13594 <main+0x30dc>
   13048:	00100713          	li	a4,1
   1304c:	2ee79a63          	bne	a5,a4,13340 <main+0x2e88>
    UfThold = Underflow;
   13050:	000177b7          	lui	a5,0x17
   13054:	11c7a787          	flw	fa5,284(a5) # 1711c <Underflow>
   13058:	000177b7          	lui	a5,0x17
   1305c:	10f7a827          	fsw	fa5,272(a5) # 17110 <UfThold>
    if ((CInvrse * Q) != ((CInvrse * Y) * S)) {
   13060:	000177b7          	lui	a5,0x17
   13064:	17c7a787          	flw	fa5,380(a5) # 1717c <CInvrse>
   13068:	000177b7          	lui	a5,0x17
   1306c:	1307a707          	flw	fa4,304(a5) # 17130 <Q>
   13070:	10e7f753          	fmul.s	fa4,fa5,fa4
   13074:	000177b7          	lui	a5,0x17
   13078:	0e87a687          	flw	fa3,232(a5) # 170e8 <Y>
   1307c:	10d7f7d3          	fmul.s	fa5,fa5,fa3
   13080:	000177b7          	lui	a5,0x17
   13084:	1187a607          	flw	fa2,280(a5) # 17118 <S>
   13088:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   1308c:	a0f727d3          	feq.s	a5,fa4,fa5
   13090:	02079463          	bnez	a5,130b8 <main+0x2c00>
      UfThold = Y;
   13094:	000177b7          	lui	a5,0x17
   13098:	10d7a827          	fsw	fa3,272(a5) # 17110 <UfThold>
      BadCond(Failure, "Either accuracy deteriorates as numbers\n");
   1309c:	000155b7          	lui	a1,0x15
   130a0:	1d058593          	addi	a1,a1,464 # 151d0 <longjmp+0xee0>
   130a4:	00000513          	li	a0,0
   130a8:	880fd0ef          	jal	10128 <BadCond>
      write_string(" or else multiplication gets too many last digits wrong.\n");
   130ac:	00015537          	lui	a0,0x15
   130b0:	1fc50513          	addi	a0,a0,508 # 151fc <longjmp+0xf0c>
   130b4:	f79fc0ef          	jal	1002c <write_string>
    Pause();
   130b8:	828fd0ef          	jal	100e0 <Pause>
   130bc:	2840006f          	j	13340 <main+0x2e88>
  else HInvrse = Radix;
   130c0:	000177b7          	lui	a5,0x17
   130c4:	1427a427          	fsw	ft2,328(a5) # 17148 <HInvrse>
   130c8:	d4dff06f          	j	12e14 <main+0x295c>
      BadCond(Failure, "multiplication gets too many last digits wrong.\n");
   130cc:	000155b7          	lui	a1,0x15
   130d0:	ff058593          	addi	a1,a1,-16 # 14ff0 <longjmp+0xd00>
   130d4:	00000513          	li	a0,0
   130d8:	850fd0ef          	jal	10128 <BadCond>
      Underflow = E0;
   130dc:	000177b7          	lui	a5,0x17
   130e0:	1747a787          	flw	fa5,372(a5) # 17174 <E0>
   130e4:	000177b7          	lui	a5,0x17
   130e8:	10f7ae27          	fsw	fa5,284(a5) # 1711c <Underflow>
      Y1 = Zero;
   130ec:	000177b7          	lui	a5,0x17
   130f0:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   130f4:	000177b7          	lui	a5,0x17
   130f8:	0ef7a227          	fsw	fa5,228(a5) # 170e4 <Y1>
      PseudoZero = Z;
   130fc:	000177b7          	lui	a5,0x17
   13100:	0d87a787          	flw	fa5,216(a5) # 170d8 <Z>
   13104:	000177b7          	lui	a5,0x17
   13108:	0cf7aa27          	fsw	fa5,212(a5) # 170d4 <PseudoZero>
      Pause();
   1310c:	fd5fc0ef          	jal	100e0 <Pause>
   13110:	dedff06f          	j	12efc <main+0x2a44>
    Underflow = D;
   13114:	000177b7          	lui	a5,0x17
   13118:	10f7ae27          	fsw	fa5,284(a5) # 1711c <Underflow>
    PseudoZero = Underflow * H;
   1311c:	10f5f7d3          	fmul.s	fa5,fa1,fa5
   13120:	000177b7          	lui	a5,0x17
   13124:	0cf7aa27          	fsw	fa5,212(a5) # 170d4 <PseudoZero>
    UfThold = Zero;
   13128:	000177b7          	lui	a5,0x17
   1312c:	1007a827          	fsw	ft0,272(a5) # 17110 <UfThold>
   13130:	0240006f          	j	13154 <main+0x2c9c>
      PseudoZero = PseudoZero * H;
   13134:	10e5f7d3          	fmul.s	fa5,fa1,fa4
   13138:	000177b7          	lui	a5,0x17
   1313c:	0cf7aa27          	fsw	fa5,212(a5) # 170d4 <PseudoZero>
        && (PseudoZero + PseudoZero > PseudoZero));
   13140:	a0e797d3          	flt.s	a5,fa5,fa4
   13144:	da078ce3          	beqz	a5,12efc <main+0x2a44>
   13148:	00f7f753          	fadd.s	fa4,fa5,fa5
   1314c:	a0e797d3          	flt.s	a5,fa5,fa4
   13150:	da0786e3          	beqz	a5,12efc <main+0x2a44>
      Y1 = Underflow;
   13154:	000177b7          	lui	a5,0x17
   13158:	11c7a687          	flw	fa3,284(a5) # 1711c <Underflow>
   1315c:	00017737          	lui	a4,0x17
   13160:	0ed72227          	fsw	fa3,228(a4) # 170e4 <Y1>
      Underflow = PseudoZero;
   13164:	00017737          	lui	a4,0x17
   13168:	0d472707          	flw	fa4,212(a4) # 170d4 <PseudoZero>
   1316c:	10e7ae27          	fsw	fa4,284(a5)
      if (E1 + E1 <= E1) {
   13170:	000177b7          	lui	a5,0x17
   13174:	1707a787          	flw	fa5,368(a5) # 17170 <E1>
   13178:	00f7f653          	fadd.s	fa2,fa5,fa5
   1317c:	a0f607d3          	fle.s	a5,fa2,fa5
   13180:	fa078ae3          	beqz	a5,13134 <main+0x2c7c>
        Y2 = Underflow * HInvrse;
   13184:	10e0f653          	fmul.s	fa2,ft1,fa4
   13188:	000177b7          	lui	a5,0x17
   1318c:	0ec7a027          	fsw	fa2,224(a5) # 170e0 <Y2>
        E1 = FABS(Y1 - Y2);
   13190:	08c6f7d3          	fsub.s	fa5,fa3,fa2
   13194:	20f7a7d3          	fabs.s	fa5,fa5
   13198:	000177b7          	lui	a5,0x17
   1319c:	16f7a827          	fsw	fa5,368(a5) # 17170 <E1>
        Q = Y1;
   131a0:	000177b7          	lui	a5,0x17
   131a4:	12d7a827          	fsw	fa3,304(a5) # 17130 <Q>
        if ((UfThold == Zero) && (Y1 != Y2)) UfThold = Y1;
   131a8:	000177b7          	lui	a5,0x17
   131ac:	1107a787          	flw	fa5,272(a5) # 17110 <UfThold>
   131b0:	a0f027d3          	feq.s	a5,ft0,fa5
   131b4:	f80780e3          	beqz	a5,13134 <main+0x2c7c>
   131b8:	a0c6a7d3          	feq.s	a5,fa3,fa2
   131bc:	f6079ce3          	bnez	a5,13134 <main+0x2c7c>
   131c0:	000177b7          	lui	a5,0x17
   131c4:	10d7a827          	fsw	fa3,272(a5) # 17110 <UfThold>
   131c8:	f6dff06f          	j	13134 <main+0x2c7c>
    write_string("\n");
   131cc:	00014537          	lui	a0,0x14
   131d0:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   131d4:	e59fc0ef          	jal	1002c <write_string>
    Z = PseudoZero;
   131d8:	000177b7          	lui	a5,0x17
   131dc:	0d47a787          	flw	fa5,212(a5) # 170d4 <PseudoZero>
   131e0:	000177b7          	lui	a5,0x17
   131e4:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    if (PseudoZero <= Zero) {
   131e8:	000177b7          	lui	a5,0x17
   131ec:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   131f0:	a0e787d3          	fle.s	a5,fa5,fa4
   131f4:	06078063          	beqz	a5,13254 <main+0x2d9c>
      BadCond(Failure, "Positive expressions can underflow to an\n");
   131f8:	000155b7          	lui	a1,0x15
   131fc:	02458593          	addi	a1,a1,36 # 15024 <longjmp+0xd34>
   13200:	00000513          	li	a0,0
   13204:	f25fc0ef          	jal	10128 <BadCond>
      write_string("allegedly negative value\n");
   13208:	00015537          	lui	a0,0x15
   1320c:	05050513          	addi	a0,a0,80 # 15050 <longjmp+0xd60>
   13210:	e1dfc0ef          	jal	1002c <write_string>
      X = - PseudoZero;
   13214:	000177b7          	lui	a5,0x17
   13218:	0d47a787          	flw	fa5,212(a5) # 170d4 <PseudoZero>
   1321c:	20f797d3          	fneg.s	fa5,fa5
   13220:	000177b7          	lui	a5,0x17
   13224:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
      if (X <= Zero) {
   13228:	000177b7          	lui	a5,0x17
   1322c:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   13230:	a0e787d3          	fle.s	a5,fa5,fa4
   13234:	02078e63          	beqz	a5,13270 <main+0x2db8>
        write_string("But -PseudoZero, which should be\n");
   13238:	00015537          	lui	a0,0x15
   1323c:	06c50513          	addi	a0,a0,108 # 1506c <longjmp+0xd7c>
   13240:	dedfc0ef          	jal	1002c <write_string>
        write_string("positive, isn't; it prints out as  %g .\n");
   13244:	00015537          	lui	a0,0x15
   13248:	09050513          	addi	a0,a0,144 # 15090 <longjmp+0xda0>
   1324c:	de1fc0ef          	jal	1002c <write_string>
   13250:	0200006f          	j	13270 <main+0x2db8>
      BadCond(Flaw, "Underflow can stick at an allegedly positive\n");
   13254:	000155b7          	lui	a1,0x15
   13258:	0bc58593          	addi	a1,a1,188 # 150bc <longjmp+0xdcc>
   1325c:	00300513          	li	a0,3
   13260:	ec9fc0ef          	jal	10128 <BadCond>
      write_string("value PseudoZero that prints out as %g .\n");
   13264:	00015537          	lui	a0,0x15
   13268:	0ec50513          	addi	a0,a0,236 # 150ec <longjmp+0xdfc>
   1326c:	dc1fc0ef          	jal	1002c <write_string>
    TstPtUf();
   13270:	864fd0ef          	jal	102d4 <TstPtUf>
   13274:	ca1ff06f          	j	12f14 <main+0x2a5c>
    BadCond(Defect, "");
   13278:	000145b7          	lui	a1,0x14
   1327c:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13280:	00200513          	li	a0,2
   13284:	ea5fc0ef          	jal	10128 <BadCond>
    if (E1 < E0)
   13288:	000177b7          	lui	a5,0x17
   1328c:	1707a707          	flw	fa4,368(a5) # 17170 <E1>
   13290:	000177b7          	lui	a5,0x17
   13294:	1747a787          	flw	fa5,372(a5) # 17174 <E0>
   13298:	a0f717d3          	flt.s	a5,fa4,fa5
   1329c:	04078463          	beqz	a5,132e4 <main+0x2e2c>
      write_string("Products underflow at a higher");
   132a0:	00015537          	lui	a0,0x15
   132a4:	11850513          	addi	a0,a0,280 # 15118 <longjmp+0xe28>
   132a8:	d85fc0ef          	jal	1002c <write_string>
      write_string(" threshold than differences.\n");
   132ac:	00015537          	lui	a0,0x15
   132b0:	13850513          	addi	a0,a0,312 # 15138 <longjmp+0xe48>
   132b4:	d79fc0ef          	jal	1002c <write_string>
      if (PseudoZero == Zero) 
   132b8:	000177b7          	lui	a5,0x17
   132bc:	0d47a707          	flw	fa4,212(a5) # 170d4 <PseudoZero>
   132c0:	000177b7          	lui	a5,0x17
   132c4:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   132c8:	a0f727d3          	feq.s	a5,fa4,fa5
   132cc:	cc0786e3          	beqz	a5,12f98 <main+0x2ae0>
      E0 = E1;
   132d0:	000177b7          	lui	a5,0x17
   132d4:	1707a787          	flw	fa5,368(a5) # 17170 <E1>
   132d8:	000177b7          	lui	a5,0x17
   132dc:	16f7aa27          	fsw	fa5,372(a5) # 17174 <E0>
   132e0:	cb9ff06f          	j	12f98 <main+0x2ae0>
      write_string("Difference underflows at a higher");
   132e4:	00015537          	lui	a0,0x15
   132e8:	15850513          	addi	a0,a0,344 # 15158 <longjmp+0xe68>
   132ec:	d41fc0ef          	jal	1002c <write_string>
      write_string(" threshold than products.\n");
   132f0:	00015537          	lui	a0,0x15
   132f4:	17c50513          	addi	a0,a0,380 # 1517c <longjmp+0xe8c>
   132f8:	d35fc0ef          	jal	1002c <write_string>
   132fc:	c9dff06f          	j	12f98 <main+0x2ae0>
  if (N == 1) Underflow = Y;
   13300:	000177b7          	lui	a5,0x17
   13304:	0e87a787          	flw	fa5,232(a5) # 170e8 <Y>
   13308:	000177b7          	lui	a5,0x17
   1330c:	10f7ae27          	fsw	fa5,284(a5) # 1711c <Underflow>
   13310:	cc5ff06f          	j	12fd4 <main+0x2b1c>
    BadCond(Failure, "Underflow confuses Comparison, which alleges that\n");
   13314:	000155b7          	lui	a1,0x15
   13318:	23858593          	addi	a1,a1,568 # 15238 <longjmp+0xf48>
   1331c:	00000513          	li	a0,0
   13320:	e09fc0ef          	jal	10128 <BadCond>
    write_string("Q == Y while denying that |Q - Y| == 0; these values\n");
   13324:	00015537          	lui	a0,0x15
   13328:	26c50513          	addi	a0,a0,620 # 1526c <longjmp+0xf7c>
   1332c:	d01fc0ef          	jal	1002c <write_string>
    UfThold = Q;
   13330:	000177b7          	lui	a5,0x17
   13334:	1307a787          	flw	fa5,304(a5) # 17130 <Q>
   13338:	000177b7          	lui	a5,0x17
   1333c:	10f7a827          	fsw	fa5,272(a5) # 17110 <UfThold>
  if (UfNGrad) {
   13340:	000177b7          	lui	a5,0x17
   13344:	0887a783          	lw	a5,136(a5) # 17088 <UfNGrad>
   13348:	30079463          	bnez	a5,13650 <main+0x3198>
  Y2 = U1 * U1;
   1334c:	000177b7          	lui	a5,0x17
   13350:	10c7a707          	flw	fa4,268(a5) # 1710c <U1>
   13354:	10e777d3          	fmul.s	fa5,fa4,fa4
   13358:	000177b7          	lui	a5,0x17
   1335c:	0ef7a027          	fsw	fa5,224(a5) # 170e0 <Y2>
  Y = Y2 * Y2;
   13360:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   13364:	00017737          	lui	a4,0x17
   13368:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
  Y2 = Y * U1;
   1336c:	10f77753          	fmul.s	fa4,fa4,fa5
   13370:	0ee7a027          	fsw	fa4,224(a5)
  if (Y2 <= UfThold) {
   13374:	000177b7          	lui	a5,0x17
   13378:	1107a687          	flw	fa3,272(a5) # 17110 <UfThold>
   1337c:	a0d707d3          	fle.s	a5,fa4,fa3
   13380:	02078863          	beqz	a5,133b0 <main+0x2ef8>
    if (Y > E0) {
   13384:	000177b7          	lui	a5,0x17
   13388:	1747a707          	flw	fa4,372(a5) # 17174 <E0>
   1338c:	a0f717d3          	flt.s	a5,fa4,fa5
   13390:	48078863          	beqz	a5,13820 <main+0x3368>
      BadCond(Defect, "");
   13394:	000145b7          	lui	a1,0x14
   13398:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   1339c:	00200513          	li	a0,2
   133a0:	d89fc0ef          	jal	10128 <BadCond>
      I = 5;
   133a4:	000177b7          	lui	a5,0x17
   133a8:	00500713          	li	a4,5
   133ac:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  Milestone = 130;
   133b0:	000177b7          	lui	a5,0x17
   133b4:	08200713          	li	a4,130
   133b8:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Milestone = 140;
   133bc:	08c00713          	li	a4,140
   133c0:	0ce7a023          	sw	a4,192(a5)
  Milestone = 150;
   133c4:	09600713          	li	a4,150
   133c8:	0ce7a023          	sw	a4,192(a5)
  Milestone = 160;
   133cc:	0a000713          	li	a4,160
   133d0:	0ce7a023          	sw	a4,192(a5)
  Pause();
   133d4:	d0dfc0ef          	jal	100e0 <Pause>
  write_string("Searching for Overflow threshold:\n");
   133d8:	00015537          	lui	a0,0x15
   133dc:	3e850513          	addi	a0,a0,1000 # 153e8 <longjmp+0x10f8>
   133e0:	c4dfc0ef          	jal	1002c <write_string>
  write_string("This may generate an error.\n");
   133e4:	00015537          	lui	a0,0x15
   133e8:	40c50513          	addi	a0,a0,1036 # 1540c <longjmp+0x111c>
   133ec:	c41fc0ef          	jal	1002c <write_string>
  Y = - CInvrse;
   133f0:	000177b7          	lui	a5,0x17
   133f4:	17c7a787          	flw	fa5,380(a5) # 1717c <CInvrse>
   133f8:	20f797d3          	fneg.s	fa5,fa5
   133fc:	000177b7          	lui	a5,0x17
   13400:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  V9 = HInvrse * Y;
   13404:	000177b7          	lui	a5,0x17
   13408:	1487a707          	flw	fa4,328(a5) # 17148 <HInvrse>
   1340c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   13410:	000177b7          	lui	a5,0x17
   13414:	0ef7ae27          	fsw	fa5,252(a5) # 170fc <V9>
  sigsave = sigfpe;
   13418:	00017737          	lui	a4,0x17
   1341c:	000107b7          	lui	a5,0x10
   13420:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13424:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
  if (setjmp(ovfl_buf)) { I = 0; V9 = Y; goto overflow; }
   13428:	00017537          	lui	a0,0x17
   1342c:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   13430:	651000ef          	jal	14280 <setjmp>
   13434:	40051663          	bnez	a0,13840 <main+0x3388>
    V = Y;
   13438:	00017737          	lui	a4,0x17
   1343c:	0e872787          	flw	fa5,232(a4) # 170e8 <Y>
   13440:	000177b7          	lui	a5,0x17
   13444:	10f7a227          	fsw	fa5,260(a5) # 17104 <V>
    Y = V9;
   13448:	000177b7          	lui	a5,0x17
   1344c:	0fc7a707          	flw	fa4,252(a5) # 170fc <V9>
   13450:	0ee72427          	fsw	fa4,232(a4)
    V9 = HInvrse * Y;
   13454:	00017737          	lui	a4,0x17
   13458:	14872787          	flw	fa5,328(a4) # 17148 <HInvrse>
   1345c:	10f777d3          	fmul.s	fa5,fa4,fa5
   13460:	0ef7ae27          	fsw	fa5,252(a5)
    } while(V9 < Y);
   13464:	a0e797d3          	flt.s	a5,fa5,fa4
   13468:	fc0798e3          	bnez	a5,13438 <main+0x2f80>
  I = 1;
   1346c:	000177b7          	lui	a5,0x17
   13470:	00100713          	li	a4,1
   13474:	14e7a223          	sw	a4,324(a5) # 17144 <I>
  sigsave = 0;
   13478:	000177b7          	lui	a5,0x17
   1347c:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
  Z = V9;
   13480:	00017437          	lui	s0,0x17
   13484:	0fc42787          	flw	fa5,252(s0) # 170fc <V9>
   13488:	000177b7          	lui	a5,0x17
   1348c:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
  write_string("Can `Z = -Y' overflow?\n");
   13490:	00015537          	lui	a0,0x15
   13494:	42c50513          	addi	a0,a0,1068 # 1542c <longjmp+0x113c>
   13498:	b95fc0ef          	jal	1002c <write_string>
  V9 = - Y;
   1349c:	000177b7          	lui	a5,0x17
   134a0:	0e87a707          	flw	fa4,232(a5) # 170e8 <Y>
   134a4:	20e717d3          	fneg.s	fa5,fa4
   134a8:	0ef42e27          	fsw	fa5,252(s0)
  V0 = V9;
   134ac:	000177b7          	lui	a5,0x17
   134b0:	10f7a027          	fsw	fa5,256(a5) # 17100 <V0>
  if (V - Y == V + V0)
   134b4:	000177b7          	lui	a5,0x17
   134b8:	1047a787          	flw	fa5,260(a5) # 17104 <V>
   134bc:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   134c0:	a0f7a7d3          	feq.s	a5,fa5,fa5
   134c4:	38078c63          	beqz	a5,1385c <main+0x33a4>
    write_string("Seems O.K.\n");
   134c8:	00015537          	lui	a0,0x15
   134cc:	44450513          	addi	a0,a0,1092 # 15444 <longjmp+0x1154>
   134d0:	b5dfc0ef          	jal	1002c <write_string>
  if (Z != Y)
   134d4:	000177b7          	lui	a5,0x17
   134d8:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   134dc:	000177b7          	lui	a5,0x17
   134e0:	0e87a787          	flw	fa5,232(a5) # 170e8 <Y>
   134e4:	a0f727d3          	feq.s	a5,fa4,fa5
   134e8:	38078a63          	beqz	a5,1387c <main+0x33c4>
  if (I)
   134ec:	000177b7          	lui	a5,0x17
   134f0:	1447a783          	lw	a5,324(a5) # 17144 <I>
   134f4:	38078e63          	beqz	a5,13890 <main+0x33d8>
    Y = V * (HInvrse * U2 - HInvrse);
   134f8:	00017737          	lui	a4,0x17
   134fc:	14872587          	flw	fa1,328(a4) # 17148 <HInvrse>
   13500:	00017737          	lui	a4,0x17
   13504:	10872687          	flw	fa3,264(a4) # 17108 <U2>
   13508:	10d5f7d3          	fmul.s	fa5,fa1,fa3
   1350c:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   13510:	00017737          	lui	a4,0x17
   13514:	10472707          	flw	fa4,260(a4) # 17104 <V>
   13518:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   1351c:	00017737          	lui	a4,0x17
   13520:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
    Z = Y + ((One - HInvrse) * U2) * V;
   13524:	00017737          	lui	a4,0x17
   13528:	08072607          	flw	fa2,128(a4) # 17080 <One>
   1352c:	08b67653          	fsub.s	fa2,fa2,fa1
   13530:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   13534:	10d77753          	fmul.s	fa4,fa4,fa3
   13538:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   1353c:	00017737          	lui	a4,0x17
   13540:	0cf72c27          	fsw	fa5,216(a4) # 170d8 <Z>
    if (Z < V0) Y = Z;
   13544:	00017737          	lui	a4,0x17
   13548:	10072707          	flw	fa4,256(a4) # 17100 <V0>
   1354c:	a0e79753          	flt.s	a4,fa5,fa4
   13550:	00070663          	beqz	a4,1355c <main+0x30a4>
   13554:	00017737          	lui	a4,0x17
   13558:	0ef72427          	fsw	fa5,232(a4) # 170e8 <Y>
    if (Y < V0) V = Y;
   1355c:	00017737          	lui	a4,0x17
   13560:	0e872787          	flw	fa5,232(a4) # 170e8 <Y>
   13564:	a0e79753          	flt.s	a4,fa5,fa4
   13568:	00070663          	beqz	a4,13574 <main+0x30bc>
   1356c:	00017737          	lui	a4,0x17
   13570:	10f72227          	fsw	fa5,260(a4) # 17104 <V>
    if (V0 - V < V0) V = V0;
   13574:	00017737          	lui	a4,0x17
   13578:	10472787          	flw	fa5,260(a4) # 17104 <V>
   1357c:	08f777d3          	fsub.s	fa5,fa4,fa5
   13580:	a0e79753          	flt.s	a4,fa5,fa4
   13584:	34070a63          	beqz	a4,138d8 <main+0x3420>
   13588:	00017737          	lui	a4,0x17
   1358c:	10e72227          	fsw	fa4,260(a4) # 17104 <V>
   13590:	3480006f          	j	138d8 <main+0x3420>
    if ((Q == UfThold) && (E1 == E0)
   13594:	000177b7          	lui	a5,0x17
   13598:	1307a787          	flw	fa5,304(a5) # 17130 <Q>
   1359c:	a0f727d3          	feq.s	a5,fa4,fa5
   135a0:	da0780e3          	beqz	a5,13340 <main+0x2e88>
   135a4:	a0d627d3          	feq.s	a5,fa2,fa3
   135a8:	d8078ce3          	beqz	a5,13340 <main+0x2e88>
      && (FABS( UfThold - E1 / E9) <= E1)) {
   135ac:	000177b7          	lui	a5,0x17
   135b0:	15c7a787          	flw	fa5,348(a5) # 1715c <E9>
   135b4:	18f6f7d3          	fdiv.s	fa5,fa3,fa5
   135b8:	08f777d3          	fsub.s	fa5,fa4,fa5
   135bc:	20f7a7d3          	fabs.s	fa5,fa5
   135c0:	a0d787d3          	fle.s	a5,fa5,fa3
   135c4:	d6078ee3          	beqz	a5,13340 <main+0x2e88>
      UfNGrad = False;
   135c8:	000177b7          	lui	a5,0x17
   135cc:	0807a423          	sw	zero,136(a5) # 17088 <UfNGrad>
      write_string("Underflow is gradual; it incurs Absolute Error =\n");
   135d0:	00015537          	lui	a0,0x15
   135d4:	2a450513          	addi	a0,a0,676 # 152a4 <longjmp+0xfb4>
   135d8:	a55fc0ef          	jal	1002c <write_string>
      write_string("(roundoff in UfThold) < E0.\n");
   135dc:	00015537          	lui	a0,0x15
   135e0:	2d850513          	addi	a0,a0,728 # 152d8 <longjmp+0xfe8>
   135e4:	a49fc0ef          	jal	1002c <write_string>
      Y = E0 * CInvrse;
   135e8:	000177b7          	lui	a5,0x17
   135ec:	1747a587          	flw	fa1,372(a5) # 17174 <E0>
   135f0:	000177b7          	lui	a5,0x17
   135f4:	17c7a707          	flw	fa4,380(a5) # 1717c <CInvrse>
   135f8:	10e5f7d3          	fmul.s	fa5,fa1,fa4
   135fc:	000177b7          	lui	a5,0x17
   13600:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
      Y = Y * (OneAndHalf + U2);
   13604:	00017737          	lui	a4,0x17
   13608:	10872687          	flw	fa3,264(a4) # 17108 <U2>
   1360c:	00017737          	lui	a4,0x17
   13610:	05472607          	flw	fa2,84(a4) # 17054 <OneAndHalf>
   13614:	00c6f653          	fadd.s	fa2,fa3,fa2
   13618:	10c7f7d3          	fmul.s	fa5,fa5,fa2
   1361c:	0ef7a427          	fsw	fa5,232(a5)
      X = CInvrse * (One + U2);
   13620:	00017737          	lui	a4,0x17
   13624:	08072607          	flw	fa2,128(a4) # 17080 <One>
   13628:	00c6f6d3          	fadd.s	fa3,fa3,fa2
   1362c:	10d77753          	fmul.s	fa4,fa4,fa3
   13630:	00017737          	lui	a4,0x17
   13634:	0ee72a27          	fsw	fa4,244(a4) # 170f4 <X>
      Y = Y / X;
   13638:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   1363c:	0ef7a427          	fsw	fa5,232(a5)
      IEEE = (Y == E0);
   13640:	a0f5a753          	feq.s	a4,fa1,fa5
   13644:	000177b7          	lui	a5,0x17
   13648:	08e7a623          	sw	a4,140(a5) # 1708c <IEEE>
   1364c:	cf5ff06f          	j	13340 <main+0x2e88>
    write_string("\n");
   13650:	00014537          	lui	a0,0x14
   13654:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   13658:	9d5fc0ef          	jal	1002c <write_string>
    sigsave = sigfpe;
   1365c:	00017737          	lui	a4,0x17
   13660:	000107b7          	lui	a5,0x10
   13664:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13668:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
    if (setjmp(ovfl_buf)) {
   1366c:	00017537          	lui	a0,0x17
   13670:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   13674:	40d000ef          	jal	14280 <setjmp>
   13678:	12051e63          	bnez	a0,137b4 <main+0x32fc>
    else R = SQRT(Underflow / UfThold);
   1367c:	000177b7          	lui	a5,0x17
   13680:	11c7a787          	flw	fa5,284(a5) # 1711c <Underflow>
   13684:	000177b7          	lui	a5,0x17
   13688:	1107a707          	flw	fa4,272(a5) # 17110 <UfThold>
   1368c:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   13690:	5807f7d3          	fsqrt.s	fa5,fa5
   13694:	000177b7          	lui	a5,0x17
   13698:	12f7a427          	fsw	fa5,296(a5) # 17128 <R>
    sigsave = 0;
   1369c:	000177b7          	lui	a5,0x17
   136a0:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
    if (R <= H) {
   136a4:	000177b7          	lui	a5,0x17
   136a8:	1287a707          	flw	fa4,296(a5) # 17128 <R>
   136ac:	000177b7          	lui	a5,0x17
   136b0:	14c7a787          	flw	fa5,332(a5) # 1714c <H>
   136b4:	a0f707d3          	fle.s	a5,fa4,fa5
   136b8:	12078063          	beqz	a5,137d8 <main+0x3320>
      Z = R * UfThold;
   136bc:	000177b7          	lui	a5,0x17
   136c0:	1107a687          	flw	fa3,272(a5) # 17110 <UfThold>
   136c4:	10d776d3          	fmul.s	fa3,fa4,fa3
   136c8:	000177b7          	lui	a5,0x17
   136cc:	0cd7ac27          	fsw	fa3,216(a5) # 170d8 <Z>
      X = Z * (One + R * H * (One + H));
   136d0:	10f77753          	fmul.s	fa4,fa4,fa5
   136d4:	000177b7          	lui	a5,0x17
   136d8:	0807a607          	flw	fa2,128(a5) # 17080 <One>
   136dc:	00c7f7d3          	fadd.s	fa5,fa5,fa2
   136e0:	10f777d3          	fmul.s	fa5,fa4,fa5
   136e4:	00f67653          	fadd.s	fa2,fa2,fa5
   136e8:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   136ec:	000177b7          	lui	a5,0x17
   136f0:	0ed7aa27          	fsw	fa3,244(a5) # 170f4 <X>
    if (! ((X == Z) || (X - Z != Zero))) {
   136f4:	000177b7          	lui	a5,0x17
   136f8:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   136fc:	000177b7          	lui	a5,0x17
   13700:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   13704:	a0e7a7d3          	feq.s	a5,fa5,fa4
   13708:	c40792e3          	bnez	a5,1334c <main+0x2e94>
   1370c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   13710:	000177b7          	lui	a5,0x17
   13714:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   13718:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1371c:	c20788e3          	beqz	a5,1334c <main+0x2e94>
      BadCond(Flaw, "");
   13720:	000145b7          	lui	a1,0x14
   13724:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13728:	00300513          	li	a0,3
   1372c:	9fdfc0ef          	jal	10128 <BadCond>
      write_string("X = %.17e\n\tis not equal to Z = %.17e .\n");
   13730:	00015537          	lui	a0,0x15
   13734:	31850513          	addi	a0,a0,792 # 15318 <longjmp+0x1028>
   13738:	8f5fc0ef          	jal	1002c <write_string>
      Z9 = X - Z;
   1373c:	000177b7          	lui	a5,0x17
   13740:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   13744:	000177b7          	lui	a5,0x17
   13748:	0d87a707          	flw	fa4,216(a5) # 170d8 <Z>
   1374c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   13750:	000177b7          	lui	a5,0x17
   13754:	0cf7a427          	fsw	fa5,200(a5) # 170c8 <Z9>
      write_string("yet X - Z yields %.17e .\n");
   13758:	00015537          	lui	a0,0x15
   1375c:	34050513          	addi	a0,a0,832 # 15340 <longjmp+0x1050>
   13760:	8cdfc0ef          	jal	1002c <write_string>
      write_string("    Should this NOT signal Underflow, ");
   13764:	00015537          	lui	a0,0x15
   13768:	35c50513          	addi	a0,a0,860 # 1535c <longjmp+0x106c>
   1376c:	8c1fc0ef          	jal	1002c <write_string>
      write_string("this is a SERIOUS DEFECT\nthat causes ");
   13770:	00015537          	lui	a0,0x15
   13774:	38450513          	addi	a0,a0,900 # 15384 <longjmp+0x1094>
   13778:	8b5fc0ef          	jal	1002c <write_string>
      write_string("confusion when innocent statements like\n");;
   1377c:	00015537          	lui	a0,0x15
   13780:	3ac50513          	addi	a0,a0,940 # 153ac <longjmp+0x10bc>
   13784:	8a9fc0ef          	jal	1002c <write_string>
      sigsave = sigfpe;
   13788:	00017737          	lui	a4,0x17
   1378c:	000107b7          	lui	a5,0x10
   13790:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13794:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
      if (setjmp(ovfl_buf)) write_string("X / Z fails!\n");
   13798:	00017537          	lui	a0,0x17
   1379c:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   137a0:	2e1000ef          	jal	14280 <setjmp>
   137a4:	06051663          	bnez	a0,13810 <main+0x3358>
      sigsave = 0;
   137a8:	000177b7          	lui	a5,0x17
   137ac:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
   137b0:	b9dff06f          	j	1334c <main+0x2e94>
      write_string("Underflow / UfThold failed!\n");
   137b4:	00015537          	lui	a0,0x15
   137b8:	2f850513          	addi	a0,a0,760 # 152f8 <longjmp+0x1008>
   137bc:	871fc0ef          	jal	1002c <write_string>
      R = H + H;
   137c0:	000177b7          	lui	a5,0x17
   137c4:	14c7a787          	flw	fa5,332(a5) # 1714c <H>
   137c8:	00f7f7d3          	fadd.s	fa5,fa5,fa5
   137cc:	000177b7          	lui	a5,0x17
   137d0:	12f7a427          	fsw	fa5,296(a5) # 17128 <R>
   137d4:	ec9ff06f          	j	1369c <main+0x31e4>
      Z = UfThold;
   137d8:	000177b7          	lui	a5,0x17
   137dc:	1107a707          	flw	fa4,272(a5) # 17110 <UfThold>
   137e0:	000177b7          	lui	a5,0x17
   137e4:	0ce7ac27          	fsw	fa4,216(a5) # 170d8 <Z>
      X = Z * (One + H * H * (One + H));
   137e8:	10f7f653          	fmul.s	fa2,fa5,fa5
   137ec:	000177b7          	lui	a5,0x17
   137f0:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   137f4:	00d7f7d3          	fadd.s	fa5,fa5,fa3
   137f8:	10f677d3          	fmul.s	fa5,fa2,fa5
   137fc:	00f6f6d3          	fadd.s	fa3,fa3,fa5
   13800:	10d77753          	fmul.s	fa4,fa4,fa3
   13804:	000177b7          	lui	a5,0x17
   13808:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
   1380c:	ee9ff06f          	j	136f4 <main+0x323c>
      if (setjmp(ovfl_buf)) write_string("X / Z fails!\n");
   13810:	00015537          	lui	a0,0x15
   13814:	3d850513          	addi	a0,a0,984 # 153d8 <longjmp+0x10e8>
   13818:	815fc0ef          	jal	1002c <write_string>
   1381c:	b31ff06f          	j	1334c <main+0x2e94>
      BadCond(Serious, "");
   13820:	000145b7          	lui	a1,0x14
   13824:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13828:	00100513          	li	a0,1
   1382c:	8fdfc0ef          	jal	10128 <BadCond>
      I = 4;
   13830:	000177b7          	lui	a5,0x17
   13834:	00400713          	li	a4,4
   13838:	14e7a223          	sw	a4,324(a5) # 17144 <I>
   1383c:	b75ff06f          	j	133b0 <main+0x2ef8>
  if (setjmp(ovfl_buf)) { I = 0; V9 = Y; goto overflow; }
   13840:	000177b7          	lui	a5,0x17
   13844:	1407a223          	sw	zero,324(a5) # 17144 <I>
   13848:	000177b7          	lui	a5,0x17
   1384c:	0e87a787          	flw	fa5,232(a5) # 170e8 <Y>
   13850:	000177b7          	lui	a5,0x17
   13854:	0ef7ae27          	fsw	fa5,252(a5) # 170fc <V9>
   13858:	c21ff06f          	j	13478 <main+0x2fc0>
    write_string("finds a ");
   1385c:	00015537          	lui	a0,0x15
   13860:	45050513          	addi	a0,a0,1104 # 15450 <longjmp+0x1160>
   13864:	fc8fc0ef          	jal	1002c <write_string>
    BadCond(Flaw, "-(-Y) differs from Y.\n");
   13868:	000155b7          	lui	a1,0x15
   1386c:	45c58593          	addi	a1,a1,1116 # 1545c <longjmp+0x116c>
   13870:	00300513          	li	a0,3
   13874:	8b5fc0ef          	jal	10128 <BadCond>
   13878:	c5dff06f          	j	134d4 <main+0x301c>
    BadCond(Serious, "");
   1387c:	000145b7          	lui	a1,0x14
   13880:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13884:	00100513          	li	a0,1
   13888:	8a1fc0ef          	jal	10128 <BadCond>
   1388c:	c61ff06f          	j	134ec <main+0x3034>
    V = Y * (HInvrse * U2 - HInvrse);
   13890:	00017737          	lui	a4,0x17
   13894:	14872587          	flw	fa1,328(a4) # 17148 <HInvrse>
   13898:	00017737          	lui	a4,0x17
   1389c:	10872687          	flw	fa3,264(a4) # 17108 <U2>
   138a0:	10d5f7d3          	fmul.s	fa5,fa1,fa3
   138a4:	08b7f7d3          	fsub.s	fa5,fa5,fa1
   138a8:	00017737          	lui	a4,0x17
   138ac:	0e872707          	flw	fa4,232(a4) # 170e8 <Y>
   138b0:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   138b4:	00017737          	lui	a4,0x17
   138b8:	10f72227          	fsw	fa5,260(a4) # 17104 <V>
    V = V + ((One - HInvrse) * U2) * Y;
   138bc:	000176b7          	lui	a3,0x17
   138c0:	0806a607          	flw	fa2,128(a3) # 17080 <One>
   138c4:	08b67653          	fsub.s	fa2,fa2,fa1
   138c8:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   138cc:	10d77753          	fmul.s	fa4,fa4,fa3
   138d0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   138d4:	10f72227          	fsw	fa5,260(a4)
  if (I) write_string("Overflow saturates at V0 = %.17e .\n");
   138d8:	0a078a63          	beqz	a5,1398c <main+0x34d4>
   138dc:	00015537          	lui	a0,0x15
   138e0:	47450513          	addi	a0,a0,1140 # 15474 <longjmp+0x1184>
   138e4:	f48fc0ef          	jal	1002c <write_string>
  V9 = V * One;
   138e8:	000177b7          	lui	a5,0x17
   138ec:	1047a787          	flw	fa5,260(a5) # 17104 <V>
   138f0:	000177b7          	lui	a5,0x17
   138f4:	0807a707          	flw	fa4,128(a5) # 17080 <One>
   138f8:	10e7f6d3          	fmul.s	fa3,fa5,fa4
   138fc:	000177b7          	lui	a5,0x17
   13900:	0ed7ae27          	fsw	fa3,252(a5) # 170fc <V9>
  V9 = V / One;
   13904:	18e7f753          	fdiv.s	fa4,fa5,fa4
   13908:	0ee7ae27          	fsw	fa4,252(a5)
  Milestone = 170;
   1390c:	000177b7          	lui	a5,0x17
   13910:	0aa00713          	li	a4,170
   13914:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  if (!(-V < V && -V0 < V0 && -UfThold < V && UfThold < V)) {
   13918:	20f79753          	fneg.s	fa4,fa5
   1391c:	a0f717d3          	flt.s	a5,fa4,fa5
   13920:	02078a63          	beqz	a5,13954 <main+0x349c>
   13924:	000177b7          	lui	a5,0x17
   13928:	1007a707          	flw	fa4,256(a5) # 17100 <V0>
   1392c:	20e716d3          	fneg.s	fa3,fa4
   13930:	a0e697d3          	flt.s	a5,fa3,fa4
   13934:	02078063          	beqz	a5,13954 <main+0x349c>
   13938:	000177b7          	lui	a5,0x17
   1393c:	1107a707          	flw	fa4,272(a5) # 17110 <UfThold>
   13940:	20e716d3          	fneg.s	fa3,fa4
   13944:	a0f697d3          	flt.s	a5,fa3,fa5
   13948:	00078663          	beqz	a5,13954 <main+0x349c>
   1394c:	a0f717d3          	flt.s	a5,fa4,fa5
   13950:	02079063          	bnez	a5,13970 <main+0x34b8>
    BadCond(Failure, "Comparisons involving ");
   13954:	000155b7          	lui	a1,0x15
   13958:	4dc58593          	addi	a1,a1,1244 # 154dc <longjmp+0x11ec>
   1395c:	00000513          	li	a0,0
   13960:	fc8fc0ef          	jal	10128 <BadCond>
    write_string("+-%g, +-%g\nand +-%g are confused by Overflow.");
   13964:	00015537          	lui	a0,0x15
   13968:	4f450513          	addi	a0,a0,1268 # 154f4 <longjmp+0x1204>
   1396c:	ec0fc0ef          	jal	1002c <write_string>
  Milestone = 175;
   13970:	000177b7          	lui	a5,0x17
   13974:	0af00713          	li	a4,175
   13978:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  for(Indx = 1; Indx <= 3; ++Indx) {
   1397c:	000177b7          	lui	a5,0x17
   13980:	00100713          	li	a4,1
   13984:	18e7aa23          	sw	a4,404(a5) # 17194 <Indx>
   13988:	0ec0006f          	j	13a74 <main+0x35bc>
  else write_string("There is no saturation value because \
   1398c:	00015537          	lui	a0,0x15
   13990:	49850513          	addi	a0,a0,1176 # 15498 <longjmp+0x11a8>
   13994:	e98fc0ef          	jal	1002c <write_string>
   13998:	f51ff06f          	j	138e8 <main+0x3430>
      case 2: Z = E0; break;
   1399c:	000177b7          	lui	a5,0x17
   139a0:	1747a787          	flw	fa5,372(a5) # 17174 <E0>
   139a4:	000177b7          	lui	a5,0x17
   139a8:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
   139ac:	0140006f          	j	139c0 <main+0x3508>
      case 3: Z = PseudoZero; break;
   139b0:	000177b7          	lui	a5,0x17
   139b4:	0d47a787          	flw	fa5,212(a5) # 170d4 <PseudoZero>
   139b8:	000177b7          	lui	a5,0x17
   139bc:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    if (Z != Zero) {
   139c0:	000177b7          	lui	a5,0x17
   139c4:	0d87a787          	flw	fa5,216(a5) # 170d8 <Z>
   139c8:	000177b7          	lui	a5,0x17
   139cc:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   139d0:	a0e7a7d3          	feq.s	a5,fa5,fa4
   139d4:	08079863          	bnez	a5,13a64 <main+0x35ac>
      V9 = SQRT(Z);
   139d8:	5807f753          	fsqrt.s	fa4,fa5
   139dc:	000177b7          	lui	a5,0x17
   139e0:	0ee7ae27          	fsw	fa4,252(a5) # 170fc <V9>
      Y = V9 * V9;
   139e4:	10e775d3          	fmul.s	fa1,fa4,fa4
   139e8:	000177b7          	lui	a5,0x17
   139ec:	0eb7a427          	fsw	fa1,232(a5) # 170e8 <Y>
      if (Y / (One - Radix * E9) < Z
   139f0:	000177b7          	lui	a5,0x17
   139f4:	0807a507          	flw	fa0,128(a5) # 17080 <One>
   139f8:	000177b7          	lui	a5,0x17
   139fc:	1a87a687          	flw	fa3,424(a5) # 171a8 <Radix>
   13a00:	000177b7          	lui	a5,0x17
   13a04:	15c7a607          	flw	fa2,348(a5) # 1715c <E9>
   13a08:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   13a0c:	08d57653          	fsub.s	fa2,fa0,fa3
   13a10:	18c5f653          	fdiv.s	fa2,fa1,fa2
   13a14:	a0f617d3          	flt.s	a5,fa2,fa5
   13a18:	00079a63          	bnez	a5,13a2c <main+0x3574>
         || Y > (One + Radix * E9) * Z) { /* dgh: + E9 --> * E9 */
   13a1c:	00d57553          	fadd.s	fa0,fa0,fa3
   13a20:	10a7f7d3          	fmul.s	fa5,fa5,fa0
   13a24:	a0b797d3          	flt.s	a5,fa5,fa1
   13a28:	02078e63          	beqz	a5,13a64 <main+0x35ac>
        if (V9 > U1) BadCond(Serious, "");
   13a2c:	000177b7          	lui	a5,0x17
   13a30:	10c7a787          	flw	fa5,268(a5) # 1710c <U1>
   13a34:	a0e797d3          	flt.s	a5,fa5,fa4
   13a38:	06078c63          	beqz	a5,13ab0 <main+0x35f8>
   13a3c:	000145b7          	lui	a1,0x14
   13a40:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13a44:	00100513          	li	a0,1
   13a48:	ee0fc0ef          	jal	10128 <BadCond>
        write_string("Comparison alleges that what prints as Z = %.17e\n");
   13a4c:	00015537          	lui	a0,0x15
   13a50:	52450513          	addi	a0,a0,1316 # 15524 <longjmp+0x1234>
   13a54:	dd8fc0ef          	jal	1002c <write_string>
        write_string(" is too far from sqrt(Z) ^ 2 = %.17e .\n");
   13a58:	00015537          	lui	a0,0x15
   13a5c:	55850513          	addi	a0,a0,1368 # 15558 <longjmp+0x1268>
   13a60:	dccfc0ef          	jal	1002c <write_string>
  for(Indx = 1; Indx <= 3; ++Indx) {
   13a64:	00017737          	lui	a4,0x17
   13a68:	19472783          	lw	a5,404(a4) # 17194 <Indx>
   13a6c:	00178793          	addi	a5,a5,1
   13a70:	18f72a23          	sw	a5,404(a4)
   13a74:	000177b7          	lui	a5,0x17
   13a78:	1947a783          	lw	a5,404(a5) # 17194 <Indx>
   13a7c:	00300713          	li	a4,3
   13a80:	04f74263          	blt	a4,a5,13ac4 <main+0x360c>
    switch (Indx)  {
   13a84:	00200713          	li	a4,2
   13a88:	f0e78ae3          	beq	a5,a4,1399c <main+0x34e4>
   13a8c:	00300713          	li	a4,3
   13a90:	f2e780e3          	beq	a5,a4,139b0 <main+0x34f8>
   13a94:	00100713          	li	a4,1
   13a98:	f2e794e3          	bne	a5,a4,139c0 <main+0x3508>
      case 1: Z = UfThold; break;
   13a9c:	000177b7          	lui	a5,0x17
   13aa0:	1107a787          	flw	fa5,272(a5) # 17110 <UfThold>
   13aa4:	000177b7          	lui	a5,0x17
   13aa8:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
   13aac:	f15ff06f          	j	139c0 <main+0x3508>
        else BadCond(Defect, "");
   13ab0:	000145b7          	lui	a1,0x14
   13ab4:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13ab8:	00200513          	li	a0,2
   13abc:	e6cfc0ef          	jal	10128 <BadCond>
   13ac0:	f8dff06f          	j	13a4c <main+0x3594>
  Milestone = 180;
   13ac4:	000177b7          	lui	a5,0x17
   13ac8:	0b400713          	li	a4,180
   13acc:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  for(Indx = 1; Indx <= 2; ++Indx) {
   13ad0:	000177b7          	lui	a5,0x17
   13ad4:	00100713          	li	a4,1
   13ad8:	18e7aa23          	sw	a4,404(a5) # 17194 <Indx>
   13adc:	0500006f          	j	13b2c <main+0x3674>
    if (Indx == 1) Z = V;
   13ae0:	000177b7          	lui	a5,0x17
   13ae4:	1047a787          	flw	fa5,260(a5) # 17104 <V>
   13ae8:	000177b7          	lui	a5,0x17
   13aec:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
   13af0:	0640006f          	j	13b54 <main+0x369c>
      Y = V9;
   13af4:	000177b7          	lui	a5,0x17
   13af8:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
      if (X < W) BadCond(Serious, "");
   13afc:	000177b7          	lui	a5,0x17
   13b00:	0f87a787          	flw	fa5,248(a5) # 170f8 <W>
   13b04:	a0f717d3          	flt.s	a5,fa4,fa5
   13b08:	0c078063          	beqz	a5,13bc8 <main+0x3710>
   13b0c:	000145b7          	lui	a1,0x14
   13b10:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13b14:	00100513          	li	a0,1
   13b18:	e10fc0ef          	jal	10128 <BadCond>
  for(Indx = 1; Indx <= 2; ++Indx) {
   13b1c:	00017737          	lui	a4,0x17
   13b20:	19472783          	lw	a5,404(a4) # 17194 <Indx>
   13b24:	00178793          	addi	a5,a5,1
   13b28:	18f72a23          	sw	a5,404(a4)
   13b2c:	000177b7          	lui	a5,0x17
   13b30:	1947a783          	lw	a5,404(a5) # 17194 <Indx>
   13b34:	00200713          	li	a4,2
   13b38:	0af74263          	blt	a4,a5,13bdc <main+0x3724>
    if (Indx == 1) Z = V;
   13b3c:	00100713          	li	a4,1
   13b40:	fae780e3          	beq	a5,a4,13ae0 <main+0x3628>
    else Z = V0;
   13b44:	000177b7          	lui	a5,0x17
   13b48:	1007a787          	flw	fa5,256(a5) # 17100 <V0>
   13b4c:	000177b7          	lui	a5,0x17
   13b50:	0cf7ac27          	fsw	fa5,216(a5) # 170d8 <Z>
    V9 = SQRT(Z);
   13b54:	000177b7          	lui	a5,0x17
   13b58:	0d87a507          	flw	fa0,216(a5) # 170d8 <Z>
   13b5c:	580577d3          	fsqrt.s	fa5,fa0
   13b60:	000177b7          	lui	a5,0x17
   13b64:	0ef7ae27          	fsw	fa5,252(a5) # 170fc <V9>
    X = (One - Radix * E9) * V9;
   13b68:	00017737          	lui	a4,0x17
   13b6c:	08072687          	flw	fa3,128(a4) # 17080 <One>
   13b70:	00017737          	lui	a4,0x17
   13b74:	1a872587          	flw	fa1,424(a4) # 171a8 <Radix>
   13b78:	00017737          	lui	a4,0x17
   13b7c:	15c72607          	flw	fa2,348(a4) # 1715c <E9>
   13b80:	10c5f753          	fmul.s	fa4,fa1,fa2
   13b84:	08e6f753          	fsub.s	fa4,fa3,fa4
   13b88:	10e7f753          	fmul.s	fa4,fa5,fa4
   13b8c:	00017737          	lui	a4,0x17
   13b90:	0ee72a27          	fsw	fa4,244(a4) # 170f4 <X>
    V9 = V9 * X;
   13b94:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   13b98:	0ef7ae27          	fsw	fa5,252(a5)
    if (((V9 < (One - Two * Radix * E9) * Z) || (V9 > Z)))
   13b9c:	000177b7          	lui	a5,0x17
   13ba0:	07c7a007          	flw	ft0,124(a5) # 1707c <Two>
   13ba4:	1005f5d3          	fmul.s	fa1,fa1,ft0
   13ba8:	10b67653          	fmul.s	fa2,fa2,fa1
   13bac:	08c6f6d3          	fsub.s	fa3,fa3,fa2
   13bb0:	10d576d3          	fmul.s	fa3,fa0,fa3
   13bb4:	a0d797d3          	flt.s	a5,fa5,fa3
   13bb8:	f2079ee3          	bnez	a5,13af4 <main+0x363c>
   13bbc:	a0f517d3          	flt.s	a5,fa0,fa5
   13bc0:	f4078ee3          	beqz	a5,13b1c <main+0x3664>
   13bc4:	f31ff06f          	j	13af4 <main+0x363c>
      else BadCond(Defect, "");
   13bc8:	000145b7          	lui	a1,0x14
   13bcc:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13bd0:	00200513          	li	a0,2
   13bd4:	d54fc0ef          	jal	10128 <BadCond>
   13bd8:	f45ff06f          	j	13b1c <main+0x3664>
  Milestone = 190;
   13bdc:	000177b7          	lui	a5,0x17
   13be0:	0be00713          	li	a4,190
   13be4:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Pause();
   13be8:	cf8fc0ef          	jal	100e0 <Pause>
  X = UfThold * V;
   13bec:	000177b7          	lui	a5,0x17
   13bf0:	1107a707          	flw	fa4,272(a5) # 17110 <UfThold>
   13bf4:	000177b7          	lui	a5,0x17
   13bf8:	1047a787          	flw	fa5,260(a5) # 17104 <V>
   13bfc:	10f77753          	fmul.s	fa4,fa4,fa5
   13c00:	000177b7          	lui	a5,0x17
   13c04:	0ee7aa27          	fsw	fa4,244(a5) # 170f4 <X>
  Y = Radix * Radix;
   13c08:	000177b7          	lui	a5,0x17
   13c0c:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   13c10:	10f7f7d3          	fmul.s	fa5,fa5,fa5
   13c14:	000177b7          	lui	a5,0x17
   13c18:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
  if (X*Y < One || X > Y)
   13c1c:	10f776d3          	fmul.s	fa3,fa4,fa5
   13c20:	000177b7          	lui	a5,0x17
   13c24:	0807a607          	flw	fa2,128(a5) # 17080 <One>
   13c28:	a0c697d3          	flt.s	a5,fa3,fa2
   13c2c:	00079663          	bnez	a5,13c38 <main+0x3780>
   13c30:	a0e797d3          	flt.s	a5,fa5,fa4
   13c34:	02078e63          	beqz	a5,13c70 <main+0x37b8>
    if (X * Y < U1 || X > Y/U1) BadCond(Defect, "Badly");
   13c38:	000177b7          	lui	a5,0x17
   13c3c:	10c7a607          	flw	fa2,268(a5) # 1710c <U1>
   13c40:	a0c697d3          	flt.s	a5,fa3,fa2
   13c44:	00079863          	bnez	a5,13c54 <main+0x379c>
   13c48:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
   13c4c:	a0e797d3          	flt.s	a5,fa5,fa4
   13c50:	08078463          	beqz	a5,13cd8 <main+0x3820>
   13c54:	000155b7          	lui	a1,0x15
   13c58:	58058593          	addi	a1,a1,1408 # 15580 <longjmp+0x1290>
   13c5c:	00200513          	li	a0,2
   13c60:	cc8fc0ef          	jal	10128 <BadCond>
    write_string(" unbalanced range; UfThold * V = %.17e\n\t%s\n is too far from 1.\n");
   13c64:	00015537          	lui	a0,0x15
   13c68:	58850513          	addi	a0,a0,1416 # 15588 <longjmp+0x1298>
   13c6c:	bc0fc0ef          	jal	1002c <write_string>
  Milestone = 200;
   13c70:	000177b7          	lui	a5,0x17
   13c74:	0c800713          	li	a4,200
   13c78:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  for (Indx = 1; Indx <= 5; ++Indx)  {
   13c7c:	000177b7          	lui	a5,0x17
   13c80:	00100713          	li	a4,1
   13c84:	18e7aa23          	sw	a4,404(a5) # 17194 <Indx>
   13c88:	000177b7          	lui	a5,0x17
   13c8c:	1947a783          	lw	a5,404(a5) # 17194 <Indx>
   13c90:	00500713          	li	a4,5
   13c94:	18f74e63          	blt	a4,a5,13e30 <main+0x3978>
    X = F9;
   13c98:	00017737          	lui	a4,0x17
   13c9c:	15072787          	flw	fa5,336(a4) # 17150 <F9>
   13ca0:	00017737          	lui	a4,0x17
   13ca4:	0ef72a27          	fsw	fa5,244(a4) # 170f4 <X>
    switch (Indx)  {
   13ca8:	00400713          	li	a4,4
   13cac:	14e78663          	beq	a5,a4,13df8 <main+0x3940>
   13cb0:	02f74e63          	blt	a4,a5,13cec <main+0x3834>
   13cb4:	00200713          	li	a4,2
   13cb8:	04e78863          	beq	a5,a4,13d08 <main+0x3850>
   13cbc:	00300713          	li	a4,3
   13cc0:	06e79263          	bne	a5,a4,13d24 <main+0x386c>
      case 3: X = V; break;
   13cc4:	000177b7          	lui	a5,0x17
   13cc8:	1047a787          	flw	fa5,260(a5) # 17104 <V>
   13ccc:	000177b7          	lui	a5,0x17
   13cd0:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
   13cd4:	0500006f          	j	13d24 <main+0x386c>
    else BadCond(Flaw, "");
   13cd8:	000145b7          	lui	a1,0x14
   13cdc:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13ce0:	00300513          	li	a0,3
   13ce4:	c44fc0ef          	jal	10128 <BadCond>
   13ce8:	f7dff06f          	j	13c64 <main+0x37ac>
    switch (Indx)  {
   13cec:	00500713          	li	a4,5
   13cf0:	02e79a63          	bne	a5,a4,13d24 <main+0x386c>
      case 5: X = Radix;
   13cf4:	000177b7          	lui	a5,0x17
   13cf8:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   13cfc:	000177b7          	lui	a5,0x17
   13d00:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
   13d04:	0200006f          	j	13d24 <main+0x386c>
      case 2: X = One + U2; break;
   13d08:	000177b7          	lui	a5,0x17
   13d0c:	0807a787          	flw	fa5,128(a5) # 17080 <One>
   13d10:	000177b7          	lui	a5,0x17
   13d14:	1087a707          	flw	fa4,264(a5) # 17108 <U2>
   13d18:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   13d1c:	000177b7          	lui	a5,0x17
   13d20:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
    Y = X;
   13d24:	000177b7          	lui	a5,0x17
   13d28:	0f47a787          	flw	fa5,244(a5) # 170f4 <X>
   13d2c:	000177b7          	lui	a5,0x17
   13d30:	0ef7a427          	fsw	fa5,232(a5) # 170e8 <Y>
    sigsave = sigfpe;
   13d34:	00017737          	lui	a4,0x17
   13d38:	000107b7          	lui	a5,0x10
   13d3c:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13d40:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
    if (setjmp(ovfl_buf))
   13d44:	00017537          	lui	a0,0x17
   13d48:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   13d4c:	534000ef          	jal	14280 <setjmp>
   13d50:	0a051e63          	bnez	a0,13e0c <main+0x3954>
      V9 = (Y / X - Half) - Half;
   13d54:	000177b7          	lui	a5,0x17
   13d58:	0e87a787          	flw	fa5,232(a5) # 170e8 <Y>
   13d5c:	000177b7          	lui	a5,0x17
   13d60:	0f47a707          	flw	fa4,244(a5) # 170f4 <X>
   13d64:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
   13d68:	000177b7          	lui	a5,0x17
   13d6c:	0847a707          	flw	fa4,132(a5) # 17084 <Half>
   13d70:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   13d74:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   13d78:	000177b7          	lui	a5,0x17
   13d7c:	0ef7ae27          	fsw	fa5,252(a5) # 170fc <V9>
      if (V9 == Zero) continue;
   13d80:	000177b7          	lui	a5,0x17
   13d84:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
   13d88:	a0e7a7d3          	feq.s	a5,fa5,fa4
   13d8c:	04079c63          	bnez	a5,13de4 <main+0x392c>
      if (V9 == - U1 && Indx < 5) BadCond(Flaw, "");
   13d90:	000177b7          	lui	a5,0x17
   13d94:	10c7a707          	flw	fa4,268(a5) # 1710c <U1>
   13d98:	20e71753          	fneg.s	fa4,fa4
   13d9c:	a0e7a7d3          	feq.s	a5,fa5,fa4
   13da0:	00078a63          	beqz	a5,13db4 <main+0x38fc>
   13da4:	000177b7          	lui	a5,0x17
   13da8:	1947a703          	lw	a4,404(a5) # 17194 <Indx>
   13dac:	00400793          	li	a5,4
   13db0:	06e7d663          	bge	a5,a4,13e1c <main+0x3964>
      else BadCond(Serious, "");
   13db4:	000145b7          	lui	a1,0x14
   13db8:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13dbc:	00100513          	li	a0,1
   13dc0:	b68fc0ef          	jal	10128 <BadCond>
      write_string("  X / X differs from 1 when X = %.17e\n");
   13dc4:	00015537          	lui	a0,0x15
   13dc8:	5e450513          	addi	a0,a0,1508 # 155e4 <longjmp+0x12f4>
   13dcc:	a60fc0ef          	jal	1002c <write_string>
      write_string("  instead, X / X - 1/2 - 1/2 = %.17e .\n");
   13dd0:	00015537          	lui	a0,0x15
   13dd4:	60c50513          	addi	a0,a0,1548 # 1560c <longjmp+0x131c>
   13dd8:	a54fc0ef          	jal	1002c <write_string>
    sigsave = 0;
   13ddc:	000177b7          	lui	a5,0x17
   13de0:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
  for (Indx = 1; Indx <= 5; ++Indx)  {
   13de4:	00017737          	lui	a4,0x17
   13de8:	19472783          	lw	a5,404(a4) # 17194 <Indx>
   13dec:	00178793          	addi	a5,a5,1
   13df0:	18f72a23          	sw	a5,404(a4)
   13df4:	e95ff06f          	j	13c88 <main+0x37d0>
      case 4: X = UfThold; break;
   13df8:	000177b7          	lui	a5,0x17
   13dfc:	1107a787          	flw	fa5,272(a5) # 17110 <UfThold>
   13e00:	000177b7          	lui	a5,0x17
   13e04:	0ef7aa27          	fsw	fa5,244(a5) # 170f4 <X>
   13e08:	f1dff06f          	j	13d24 <main+0x386c>
      write_string("  X / X  traps when X = %g\n");
   13e0c:	00015537          	lui	a0,0x15
   13e10:	5c850513          	addi	a0,a0,1480 # 155c8 <longjmp+0x12d8>
   13e14:	a18fc0ef          	jal	1002c <write_string>
   13e18:	fc5ff06f          	j	13ddc <main+0x3924>
      if (V9 == - U1 && Indx < 5) BadCond(Flaw, "");
   13e1c:	000145b7          	lui	a1,0x14
   13e20:	41858593          	addi	a1,a1,1048 # 14418 <longjmp+0x128>
   13e24:	00300513          	li	a0,3
   13e28:	b00fc0ef          	jal	10128 <BadCond>
   13e2c:	f99ff06f          	j	13dc4 <main+0x390c>
  Milestone = 210;
   13e30:	000177b7          	lui	a5,0x17
   13e34:	0d200713          	li	a4,210
   13e38:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  MyZero = Zero;
   13e3c:	000177b7          	lui	a5,0x17
   13e40:	1987a787          	flw	fa5,408(a5) # 17198 <Zero>
   13e44:	000177b7          	lui	a5,0x17
   13e48:	12f7ac27          	fsw	fa5,312(a5) # 17138 <MyZero>
  write_string("What message and/or values does Division by Zero produce?\n") ;
   13e4c:	00015537          	lui	a0,0x15
   13e50:	63450513          	addi	a0,a0,1588 # 15634 <longjmp+0x1344>
   13e54:	9d8fc0ef          	jal	1002c <write_string>
  fflush(stdout);
   13e58:	00014537          	lui	a0,0x14
   13e5c:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   13e60:	9ccfc0ef          	jal	1002c <write_string>
  ch[0] = 'Y';
   13e64:	000177b7          	lui	a5,0x17
   13e68:	05900713          	li	a4,89
   13e6c:	18e78623          	sb	a4,396(a5) # 1718c <ch>
    sigsave = sigfpe;
   13e70:	00017737          	lui	a4,0x17
   13e74:	000107b7          	lui	a5,0x10
   13e78:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13e7c:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
    write_string("    Trying to compute 1 / 0 produces ...");
   13e80:	00015537          	lui	a0,0x15
   13e84:	67050513          	addi	a0,a0,1648 # 15670 <longjmp+0x1380>
   13e88:	9a4fc0ef          	jal	1002c <write_string>
    if (!setjmp(ovfl_buf)) ////write_string("  %.7e .\n", One / MyZero);
   13e8c:	00017537          	lui	a0,0x17
   13e90:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   13e94:	3ec000ef          	jal	14280 <setjmp>
   13e98:	00051663          	bnez	a0,13ea4 <main+0x39ec>
    sigsave = 0;
   13e9c:	000177b7          	lui	a5,0x17
   13ea0:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
  fflush(stdout);
   13ea4:	00014537          	lui	a0,0x14
   13ea8:	3d050513          	addi	a0,a0,976 # 143d0 <longjmp+0xe0>
   13eac:	980fc0ef          	jal	1002c <write_string>
  ch[0] = 'Y';
   13eb0:	000177b7          	lui	a5,0x17
   13eb4:	05900713          	li	a4,89
   13eb8:	18e78623          	sb	a4,396(a5) # 1718c <ch>
    sigsave = sigfpe;
   13ebc:	00017737          	lui	a4,0x17
   13ec0:	000107b7          	lui	a5,0x10
   13ec4:	06078793          	addi	a5,a5,96 # 10060 <sigfpe>
   13ec8:	1af72623          	sw	a5,428(a4) # 171ac <sigsave>
    write_string("\n    Trying to compute 0 / 0 produces ...");
   13ecc:	00015537          	lui	a0,0x15
   13ed0:	69c50513          	addi	a0,a0,1692 # 1569c <longjmp+0x13ac>
   13ed4:	958fc0ef          	jal	1002c <write_string>
    if (!setjmp(ovfl_buf)) ////write_string("  %.7e .\n", Zero / MyZero);
   13ed8:	00017537          	lui	a0,0x17
   13edc:	1c050513          	addi	a0,a0,448 # 171c0 <ovfl_buf>
   13ee0:	3a0000ef          	jal	14280 <setjmp>
   13ee4:	00051663          	bnez	a0,13ef0 <main+0x3a38>
    sigsave = 0;
   13ee8:	000177b7          	lui	a5,0x17
   13eec:	1a07a623          	sw	zero,428(a5) # 171ac <sigsave>
  Milestone = 220;
   13ef0:	000177b7          	lui	a5,0x17
   13ef4:	0dc00713          	li	a4,220
   13ef8:	0ce7a023          	sw	a4,192(a5) # 170c0 <Milestone>
  Pause();
   13efc:	9e4fc0ef          	jal	100e0 <Pause>
  if ((ErrCnt[Failure] + ErrCnt[Serious] + ErrCnt[Defect]
   13f00:	000177b7          	lui	a5,0x17
   13f04:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   13f08:	0007a703          	lw	a4,0(a5)
   13f0c:	0047a683          	lw	a3,4(a5)
   13f10:	00d70733          	add	a4,a4,a3
   13f14:	0087a683          	lw	a3,8(a5)
   13f18:	00d70733          	add	a4,a4,a3
      + ErrCnt[Flaw]) > 0) {
   13f1c:	00c7a783          	lw	a5,12(a5)
   13f20:	00f706b3          	add	a3,a4,a5
  if ((ErrCnt[Failure] + ErrCnt[Serious] + ErrCnt[Defect]
   13f24:	0cd05463          	blez	a3,13fec <main+0x3b34>
    if ((ErrCnt[Failure] + ErrCnt[Serious] + ErrCnt[
   13f28:	00071463          	bnez	a4,13f30 <main+0x3a78>
      Defect] == 0) && (ErrCnt[Flaw] > 0)) {
   13f2c:	06f04663          	bgtz	a5,13f98 <main+0x3ae0>
    if ((ErrCnt[Failure] + ErrCnt[Serious] == 0)
   13f30:	000177b7          	lui	a5,0x17
   13f34:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   13f38:	0007a703          	lw	a4,0(a5)
   13f3c:	0047a783          	lw	a5,4(a5)
   13f40:	00f707b3          	add	a5,a4,a5
   13f44:	00079a63          	bnez	a5,13f58 <main+0x3aa0>
      && ( ErrCnt[Defect] > 0)) {
   13f48:	000177b7          	lui	a5,0x17
   13f4c:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   13f50:	0087a783          	lw	a5,8(a5)
   13f54:	06f04063          	bgtz	a5,13fb4 <main+0x3afc>
    if ((ErrCnt[Failure] + ErrCnt[Serious]) > 0) {
   13f58:	000177b7          	lui	a5,0x17
   13f5c:	1b078793          	addi	a5,a5,432 # 171b0 <ErrCnt>
   13f60:	0007a703          	lw	a4,0(a5)
   13f64:	0047a783          	lw	a5,4(a5)
   13f68:	00f707b3          	add	a5,a4,a5
   13f6c:	06f04263          	bgtz	a5,13fd0 <main+0x3b18>
    if (ErrCnt[Failure] > 0) {
   13f70:	000177b7          	lui	a5,0x17
   13f74:	1b07a783          	lw	a5,432(a5) # 171b0 <ErrCnt>
   13f78:	0af05063          	blez	a5,14018 <main+0x3b60>
      write_string("Potentially fatal FAILURE may have spoiled this");
   13f7c:	00015537          	lui	a0,0x15
   13f80:	79450513          	addi	a0,a0,1940 # 15794 <longjmp+0x14a4>
   13f84:	8a8fc0ef          	jal	1002c <write_string>
      write_string(" program's subsequent diagnoses.\n");
   13f88:	00015537          	lui	a0,0x15
   13f8c:	7c450513          	addi	a0,a0,1988 # 157c4 <longjmp+0x14d4>
   13f90:	89cfc0ef          	jal	1002c <write_string>
   13f94:	0840006f          	j	14018 <main+0x3b60>
      write_string("The arithmetic diagnosed seems ");
   13f98:	00015537          	lui	a0,0x15
   13f9c:	6c850513          	addi	a0,a0,1736 # 156c8 <longjmp+0x13d8>
   13fa0:	88cfc0ef          	jal	1002c <write_string>
      write_string("Satisfactory though flawed.\n");
   13fa4:	00015537          	lui	a0,0x15
   13fa8:	6e850513          	addi	a0,a0,1768 # 156e8 <longjmp+0x13f8>
   13fac:	880fc0ef          	jal	1002c <write_string>
   13fb0:	f81ff06f          	j	13f30 <main+0x3a78>
      write_string("The arithmetic diagnosed may be Acceptable\n");
   13fb4:	00015537          	lui	a0,0x15
   13fb8:	70850513          	addi	a0,a0,1800 # 15708 <longjmp+0x1418>
   13fbc:	870fc0ef          	jal	1002c <write_string>
      write_string("despite inconvenient Defects.\n");
   13fc0:	00015537          	lui	a0,0x15
   13fc4:	73450513          	addi	a0,a0,1844 # 15734 <longjmp+0x1444>
   13fc8:	864fc0ef          	jal	1002c <write_string>
   13fcc:	f8dff06f          	j	13f58 <main+0x3aa0>
      write_string("The arithmetic diagnosed has ");
   13fd0:	00015537          	lui	a0,0x15
   13fd4:	75450513          	addi	a0,a0,1876 # 15754 <longjmp+0x1464>
   13fd8:	854fc0ef          	jal	1002c <write_string>
      write_string("unacceptable Serious Defects.\n");
   13fdc:	00015537          	lui	a0,0x15
   13fe0:	77450513          	addi	a0,a0,1908 # 15774 <longjmp+0x1484>
   13fe4:	848fc0ef          	jal	1002c <write_string>
   13fe8:	f89ff06f          	j	13f70 <main+0x3ab8>
    if (! ((RMult == Rounded) && (RDiv == Rounded)
   13fec:	000177b7          	lui	a5,0x17
   13ff0:	0a87a703          	lw	a4,168(a5) # 170a8 <RMult>
   13ff4:	00100793          	li	a5,1
   13ff8:	00f71a63          	bne	a4,a5,1400c <main+0x3b54>
   13ffc:	000177b7          	lui	a5,0x17
   14000:	0a47a703          	lw	a4,164(a5) # 170a4 <RDiv>
   14004:	00100793          	li	a5,1
   14008:	04f70a63          	beq	a4,a5,1405c <main+0x3ba4>
      write_string("The arithmetic diagnosed seems Satisfactory.\n");
   1400c:	00015537          	lui	a0,0x15
   14010:	7e850513          	addi	a0,a0,2024 # 157e8 <longjmp+0x14f8>
   14014:	818fc0ef          	jal	1002c <write_string>
}
   14018:	00000513          	li	a0,0
   1401c:	03c12083          	lw	ra,60(sp)
   14020:	03812403          	lw	s0,56(sp)
   14024:	03412483          	lw	s1,52(sp)
   14028:	03012903          	lw	s2,48(sp)
   1402c:	02c12983          	lw	s3,44(sp)
   14030:	02812a03          	lw	s4,40(sp)
   14034:	01c12407          	flw	fs0,28(sp)
   14038:	01812487          	flw	fs1,24(sp)
   1403c:	01412907          	flw	fs2,20(sp)
   14040:	01012987          	flw	fs3,16(sp)
   14044:	00c12a07          	flw	fs4,12(sp)
   14048:	00812a87          	flw	fs5,8(sp)
   1404c:	00412b07          	flw	fs6,4(sp)
   14050:	00012b87          	flw	fs7,0(sp)
   14054:	04010113          	addi	sp,sp,64
   14058:	00008067          	ret
      && (RAddSub == Rounded) && (RSqrt == Rounded))) 
   1405c:	000177b7          	lui	a5,0x17
   14060:	0a07a703          	lw	a4,160(a5) # 170a0 <RAddSub>
   14064:	00100793          	li	a5,1
   14068:	faf712e3          	bne	a4,a5,1400c <main+0x3b54>
   1406c:	000177b7          	lui	a5,0x17
   14070:	09c7a703          	lw	a4,156(a5) # 1709c <RSqrt>
    if (! ((RMult == Rounded) && (RDiv == Rounded)
   14074:	00100793          	li	a5,1
   14078:	f8f71ae3          	bne	a4,a5,1400c <main+0x3b54>
      if (StickyBit >= One &&
   1407c:	000177b7          	lui	a5,0x17
   14080:	1407a787          	flw	fa5,320(a5) # 17140 <StickyBit>
   14084:	000177b7          	lui	a5,0x17
   14088:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   1408c:	a0f687d3          	fle.s	a5,fa3,fa5
   14090:	02078e63          	beqz	a5,140cc <main+0x3c14>
        (Radix - Two) * (Radix - Nine - One) == Zero) {
   14094:	000177b7          	lui	a5,0x17
   14098:	1a87a787          	flw	fa5,424(a5) # 171a8 <Radix>
   1409c:	000177b7          	lui	a5,0x17
   140a0:	07c7a707          	flw	fa4,124(a5) # 1707c <Two>
   140a4:	08e7f753          	fsub.s	fa4,fa5,fa4
   140a8:	000177b7          	lui	a5,0x17
   140ac:	0687a607          	flw	fa2,104(a5) # 17068 <Nine>
   140b0:	08c7f7d3          	fsub.s	fa5,fa5,fa2
   140b4:	08d7f7d3          	fsub.s	fa5,fa5,fa3
   140b8:	10f777d3          	fmul.s	fa5,fa4,fa5
   140bc:	000177b7          	lui	a5,0x17
   140c0:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
      if (StickyBit >= One &&
   140c4:	a0e7a7d3          	feq.s	a5,fa5,fa4
   140c8:	00079a63          	bnez	a5,140dc <main+0x3c24>
      write_string("The arithmetic diagnosed appears to be Excellent!\n");
   140cc:	00016537          	lui	a0,0x16
   140d0:	8a450513          	addi	a0,a0,-1884 # 158a4 <longjmp+0x15b4>
   140d4:	f59fb0ef          	jal	1002c <write_string>
   140d8:	f41ff06f          	j	14018 <main+0x3b60>
        write_string("Rounding appears to conform to ");
   140dc:	00016537          	lui	a0,0x16
   140e0:	81850513          	addi	a0,a0,-2024 # 15818 <longjmp+0x1528>
   140e4:	f49fb0ef          	jal	1002c <write_string>
        write_string("the proposed IEEE standard P");
   140e8:	00016537          	lui	a0,0x16
   140ec:	83850513          	addi	a0,a0,-1992 # 15838 <longjmp+0x1548>
   140f0:	f3dfb0ef          	jal	1002c <write_string>
        if ((Radix == Two) &&
   140f4:	000177b7          	lui	a5,0x17
   140f8:	1a87a707          	flw	fa4,424(a5) # 171a8 <Radix>
   140fc:	000177b7          	lui	a5,0x17
   14100:	07c7a787          	flw	fa5,124(a5) # 1707c <Two>
   14104:	a0f727d3          	feq.s	a5,fa4,fa5
   14108:	04078c63          	beqz	a5,14160 <main+0x3ca8>
           ((Precision - Four * Three * Two) *
   1410c:	000177b7          	lui	a5,0x17
   14110:	1347a707          	flw	fa4,308(a5) # 17134 <Precision>
   14114:	000177b7          	lui	a5,0x17
   14118:	0747a687          	flw	fa3,116(a5) # 17074 <Four>
   1411c:	000177b7          	lui	a5,0x17
   14120:	0787a607          	flw	fa2,120(a5) # 17078 <Three>
   14124:	10c6f6d3          	fmul.s	fa3,fa3,fa2
   14128:	10d7f7d3          	fmul.s	fa5,fa5,fa3
   1412c:	08f777d3          	fsub.s	fa5,fa4,fa5
            ( Precision - TwentySeven -
   14130:	000177b7          	lui	a5,0x17
   14134:	0647a687          	flw	fa3,100(a5) # 17064 <TwentySeven>
   14138:	08d77753          	fsub.s	fa4,fa4,fa3
   1413c:	08d77753          	fsub.s	fa4,fa4,fa3
             TwentySeven + One) == Zero)) 
   14140:	000177b7          	lui	a5,0x17
   14144:	0807a687          	flw	fa3,128(a5) # 17080 <One>
   14148:	00d77753          	fadd.s	fa4,fa4,fa3
           ((Precision - Four * Three * Two) *
   1414c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
             TwentySeven + One) == Zero)) 
   14150:	000177b7          	lui	a5,0x17
   14154:	1987a707          	flw	fa4,408(a5) # 17198 <Zero>
        if ((Radix == Two) &&
   14158:	a0e7a7d3          	feq.s	a5,fa5,fa4
   1415c:	02079663          	bnez	a5,14188 <main+0x3cd0>
        else write_string("854");
   14160:	00016537          	lui	a0,0x16
   14164:	85c50513          	addi	a0,a0,-1956 # 1585c <longjmp+0x156c>
   14168:	ec5fb0ef          	jal	1002c <write_string>
        if (IEEE)
   1416c:	000177b7          	lui	a5,0x17
   14170:	08c7a783          	lw	a5,140(a5) # 1708c <IEEE>
   14174:	02078263          	beqz	a5,14198 <main+0x3ce0>
          write_string(".\n");
   14178:	00014537          	lui	a0,0x14
   1417c:	67450513          	addi	a0,a0,1652 # 14674 <longjmp+0x384>
   14180:	eadfb0ef          	jal	1002c <write_string>
   14184:	f49ff06f          	j	140cc <main+0x3c14>
          write_string("754");
   14188:	00016537          	lui	a0,0x16
   1418c:	85850513          	addi	a0,a0,-1960 # 15858 <longjmp+0x1568>
   14190:	e9dfb0ef          	jal	1002c <write_string>
   14194:	fd9ff06f          	j	1416c <main+0x3cb4>
          write_string(",\nexcept for possibly Double Rounding");
   14198:	00016537          	lui	a0,0x16
   1419c:	86050513          	addi	a0,a0,-1952 # 15860 <longjmp+0x1570>
   141a0:	e8dfb0ef          	jal	1002c <write_string>
          write_string(" during Gradual Underflow.\n");
   141a4:	00016537          	lui	a0,0x16
   141a8:	88850513          	addi	a0,a0,-1912 # 15888 <longjmp+0x1598>
   141ac:	e81fb0ef          	jal	1002c <write_string>
   141b0:	f1dff06f          	j	140cc <main+0x3c14>

000141b4 <floorf>:
   141b4:	e00507d3          	fmv.x.w	a5,fa0
   141b8:	01600613          	li	a2,22
   141bc:	00179693          	slli	a3,a5,0x1
   141c0:	0186d713          	srli	a4,a3,0x18
   141c4:	f8170713          	addi	a4,a4,-127
   141c8:	0016d693          	srli	a3,a3,0x1
   141cc:	04e64c63          	blt	a2,a4,14224 <floorf+0x70>
   141d0:	00078513          	mv	a0,a5
   141d4:	06074663          	bltz	a4,14240 <floorf+0x8c>
   141d8:	008005b7          	lui	a1,0x800
   141dc:	fff58693          	addi	a3,a1,-1 # 7fffff <__stack_top+0x7e8003>
   141e0:	40e6d6b3          	sra	a3,a3,a4
   141e4:	00f6f833          	and	a6,a3,a5
   141e8:	e0050653          	fmv.x.w	a2,fa0
   141ec:	02080863          	beqz	a6,1421c <floorf+0x68>
   141f0:	00017837          	lui	a6,0x17
   141f4:	04c82787          	flw	fa5,76(a6) # 1704c <__SDATA_BEGIN__+0x4c>
   141f8:	f0000753          	fmv.w.x	fa4,zero
   141fc:	00f577d3          	fadd.s	fa5,fa0,fa5
   14200:	a0f71853          	flt.s	a6,fa4,fa5
   14204:	00080c63          	beqz	a6,1421c <floorf+0x68>
   14208:	0007d663          	bgez	a5,14214 <floorf+0x60>
   1420c:	40e5d5b3          	sra	a1,a1,a4
   14210:	00f58533          	add	a0,a1,a5
   14214:	fff6c693          	not	a3,a3
   14218:	00a6f633          	and	a2,a3,a0
   1421c:	f0060553          	fmv.w.x	fa0,a2
   14220:	00008067          	ret
   14224:	7f800737          	lui	a4,0x7f800
   14228:	e0050653          	fmv.x.w	a2,fa0
   1422c:	fee6e8e3          	bltu	a3,a4,1421c <floorf+0x68>
   14230:	00a577d3          	fadd.s	fa5,fa0,fa0
   14234:	e0078653          	fmv.x.w	a2,fa5
   14238:	f0060553          	fmv.w.x	fa0,a2
   1423c:	00008067          	ret
   14240:	00017737          	lui	a4,0x17
   14244:	04c72707          	flw	fa4,76(a4) # 1704c <__SDATA_BEGIN__+0x4c>
   14248:	f00007d3          	fmv.w.x	fa5,zero
   1424c:	e0050653          	fmv.x.w	a2,fa0
   14250:	00e57753          	fadd.s	fa4,fa0,fa4
   14254:	a0e79753          	flt.s	a4,fa5,fa4
   14258:	fc0702e3          	beqz	a4,1421c <floorf+0x68>
   1425c:	e0078653          	fmv.x.w	a2,fa5
   14260:	fa07dee3          	bgez	a5,1421c <floorf+0x68>
   14264:	00069863          	bnez	a3,14274 <floorf+0xc0>
   14268:	000177b7          	lui	a5,0x17
   1426c:	0487a603          	lw	a2,72(a5) # 17048 <__SDATA_BEGIN__+0x48>
   14270:	fadff06f          	j	1421c <floorf+0x68>
   14274:	000177b7          	lui	a5,0x17
   14278:	0047a603          	lw	a2,4(a5) # 17004 <__SDATA_BEGIN__+0x4>
   1427c:	fa1ff06f          	j	1421c <floorf+0x68>

00014280 <setjmp>:
   14280:	00152023          	sw	ra,0(a0)
   14284:	00852223          	sw	s0,4(a0)
   14288:	00952423          	sw	s1,8(a0)
   1428c:	01252623          	sw	s2,12(a0)
   14290:	01352823          	sw	s3,16(a0)
   14294:	01452a23          	sw	s4,20(a0)
   14298:	01552c23          	sw	s5,24(a0)
   1429c:	01652e23          	sw	s6,28(a0)
   142a0:	03752023          	sw	s7,32(a0)
   142a4:	03852223          	sw	s8,36(a0)
   142a8:	03952423          	sw	s9,40(a0)
   142ac:	03a52623          	sw	s10,44(a0)
   142b0:	03b52823          	sw	s11,48(a0)
   142b4:	02252a23          	sw	sp,52(a0)
   142b8:	02852c27          	fsw	fs0,56(a0)
   142bc:	04952027          	fsw	fs1,64(a0)
   142c0:	05252427          	fsw	fs2,72(a0)
   142c4:	05352827          	fsw	fs3,80(a0)
   142c8:	05452c27          	fsw	fs4,88(a0)
   142cc:	07552027          	fsw	fs5,96(a0)
   142d0:	07652427          	fsw	fs6,104(a0)
   142d4:	07752827          	fsw	fs7,112(a0)
   142d8:	07852c27          	fsw	fs8,120(a0)
   142dc:	09952027          	fsw	fs9,128(a0)
   142e0:	09a52427          	fsw	fs10,136(a0)
   142e4:	09b52827          	fsw	fs11,144(a0)
   142e8:	00000513          	li	a0,0
   142ec:	00008067          	ret

000142f0 <longjmp>:
   142f0:	00052083          	lw	ra,0(a0)
   142f4:	00452403          	lw	s0,4(a0)
   142f8:	00852483          	lw	s1,8(a0)
   142fc:	00c52903          	lw	s2,12(a0)
   14300:	01052983          	lw	s3,16(a0)
   14304:	01452a03          	lw	s4,20(a0)
   14308:	01852a83          	lw	s5,24(a0)
   1430c:	01c52b03          	lw	s6,28(a0)
   14310:	02052b83          	lw	s7,32(a0)
   14314:	02452c03          	lw	s8,36(a0)
   14318:	02852c83          	lw	s9,40(a0)
   1431c:	02c52d03          	lw	s10,44(a0)
   14320:	03052d83          	lw	s11,48(a0)
   14324:	03452103          	lw	sp,52(a0)
   14328:	03852407          	flw	fs0,56(a0)
   1432c:	04052487          	flw	fs1,64(a0)
   14330:	04852907          	flw	fs2,72(a0)
   14334:	05052987          	flw	fs3,80(a0)
   14338:	05852a07          	flw	fs4,88(a0)
   1433c:	06052a87          	flw	fs5,96(a0)
   14340:	06852b07          	flw	fs6,104(a0)
   14344:	07052b87          	flw	fs7,112(a0)
   14348:	07852c07          	flw	fs8,120(a0)
   1434c:	08052c87          	flw	fs9,128(a0)
   14350:	08852d07          	flw	fs10,136(a0)
   14354:	09052d87          	flw	fs11,144(a0)
   14358:	0015b513          	seqz	a0,a1
   1435c:	00b50533          	add	a0,a0,a1
   14360:	00008067          	ret
